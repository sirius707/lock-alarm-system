
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  000032de  00003372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008000ec  008000ec  000033fe  2**0
                  ALLOC
  3 .stab         00002cac  00000000  00000000  00003400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000141f  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000074cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000760b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000777b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000093c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a2af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b05c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b449  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 30       	cpi	r26, 0x03	; 3
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c9 13 	call	0x2792	; 0x2792 <main>
      8a:	0c 94 6d 19 	jmp	0x32da	; 0x32da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ee       	ldi	r26, 0xE3	; 227
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 ee       	ldi	r24, 0xE3	; 227
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_callbackUpdateGTick>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
static void HMI_callbackUpdateGTick()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 ec 00 	lds	r24, 0x00EC
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 ec 00 	sts	0x00EC, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <HMI_init>:

void HMI_init()
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	2d 97       	sbiw	r28, 0x0d	; 13
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	UART_CONF_STRUCT uart_config;

	uart_config.baud_rate = 9600;
     b72:	80 e8       	ldi	r24, 0x80	; 128
     b74:	95 e2       	ldi	r25, 0x25	; 37
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	ab 83       	std	Y+3, r26	; 0x03
     b80:	bc 83       	std	Y+4, r27	; 0x04
	uart_config.two_stop_bits = FALSE;
     b82:	1d 82       	std	Y+5, r1	; 0x05
	uart_config.parity = DISABLED;
     b84:	1f 82       	std	Y+7, r1	; 0x07
	uart_config.num_of_bits = EIGHT_BIT;
     b86:	81 e1       	ldi	r24, 0x11	; 17
     b88:	8e 83       	std	Y+6, r24	; 0x06

	UART_init(&uart_config);
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <UART_init>

	LCD_init();
     b92:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_init>

	func_ptrs[NEW_PASS] = HMI_newPass;
     b96:	8d ec       	ldi	r24, 0xCD	; 205
     b98:	96 e0       	ldi	r25, 0x06	; 6
     b9a:	90 93 ee 00 	sts	0x00EE, r25
     b9e:	80 93 ed 00 	sts	0x00ED, r24
	func_ptrs[ENTER_PASS] = HMI_enterPass;
     ba2:	8f e6       	ldi	r24, 0x6F	; 111
     ba4:	99 e0       	ldi	r25, 0x09	; 9
     ba6:	90 93 f0 00 	sts	0x00F0, r25
     baa:	80 93 ef 00 	sts	0x00EF, r24
	func_ptrs[OPENING] = HMI_opening;
     bae:	81 e3       	ldi	r24, 0x31	; 49
     bb0:	96 e0       	ldi	r25, 0x06	; 6
     bb2:	90 93 f2 00 	sts	0x00F2, r25
     bb6:	80 93 f1 00 	sts	0x00F1, r24
	func_ptrs[OPTIONS] = HMI_options;
     bba:	86 ea       	ldi	r24, 0xA6	; 166
     bbc:	96 e0       	ldi	r25, 0x06	; 6
     bbe:	90 93 f8 00 	sts	0x00F8, r25
     bc2:	80 93 f7 00 	sts	0x00F7, r24
	func_ptrs[ALARM] = HMI_alarm;
     bc6:	88 e5       	ldi	r24, 0x58	; 88
     bc8:	96 e0       	ldi	r25, 0x06	; 6
     bca:	90 93 f6 00 	sts	0x00F6, r25
     bce:	80 93 f5 00 	sts	0x00F5, r24
	func_ptrs[LOCKING] = HMI_locking;
     bd2:	8f e7       	ldi	r24, 0x7F	; 127
     bd4:	96 e0       	ldi	r25, 0x06	; 6
     bd6:	90 93 f4 00 	sts	0x00F4, r25
     bda:	80 93 f3 00 	sts	0x00F3, r24
	func_ptrs[CONFIRM_PASS] = HMI_confirmPass;
     bde:	8e e1       	ldi	r24, 0x1E	; 30
     be0:	98 e0       	ldi	r25, 0x08	; 8
     be2:	90 93 fa 00 	sts	0x00FA, r25
     be6:	80 93 f9 00 	sts	0x00F9, r24

	/*timer1 initialization*/
	TIMER1_CONFIG timer1_config;
	timer1_config.clock = FCPU_256;
     bea:	84 e0       	ldi	r24, 0x04	; 4
     bec:	89 87       	std	Y+9, r24	; 0x09
	timer1_config.mode = CTC;
     bee:	88 e0       	ldi	r24, 0x08	; 8
     bf0:	88 87       	std	Y+8, r24	; 0x08
	timer1_config.init_value = 0;
     bf2:	1b 86       	std	Y+11, r1	; 0x0b
     bf4:	1a 86       	std	Y+10, r1	; 0x0a
	timer1_config.compare_value = 31250;/*generate interrupt every second*/
     bf6:	82 e1       	ldi	r24, 0x12	; 18
     bf8:	9a e7       	ldi	r25, 0x7A	; 122
     bfa:	9d 87       	std	Y+13, r25	; 0x0d
     bfc:	8c 87       	std	Y+12, r24	; 0x0c
	Timer1_setCallBackCompare(HMI_callbackUpdateGTick);
     bfe:	83 ea       	ldi	r24, 0xA3	; 163
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	0e 94 b2 14 	call	0x2964	; 0x2964 <Timer1_setCallBackCompare>
	Timer1_init(&timer1_config);
     c06:	ce 01       	movw	r24, r28
     c08:	08 96       	adiw	r24, 0x08	; 8
     c0a:	0e 94 43 14 	call	0x2886	; 0x2886 <Timer1_init>
	Timer1_Stop();
     c0e:	0e 94 c4 14 	call	0x2988	; 0x2988 <Timer1_Stop>
}
     c12:	2d 96       	adiw	r28, 0x0d	; 13
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <HMI_recieveCmd>:

uint8 HMI_recieveCmd()
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	return UART_recvByte();
     c2c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <UART_recvByte>
}
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <HMI_execCmd>:

void HMI_execCmd(CONTROL_COMMAND control_cmd)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	0f 92       	push	r0
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	89 83       	std	Y+1, r24	; 0x01
	(func_ptrs[control_cmd])();
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	fc 01       	movw	r30, r24
     c4e:	e3 51       	subi	r30, 0x13	; 19
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	01 90       	ld	r0, Z+
     c54:	f0 81       	ld	r31, Z
     c56:	e0 2d       	mov	r30, r0
     c58:	09 95       	icall
}
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <HMI_opening>:
void HMI_opening()
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     c6a:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("Door unlocking...");
     c76:	80 e6       	ldi	r24, 0x60	; 96
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>

	g_tick = 0;
     c7e:	10 92 ec 00 	sts	0x00EC, r1
	Timer1_start(FCPU_256);
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	0e 94 83 14 	call	0x2906	; 0x2906 <Timer1_start>
     c88:	0a c0       	rjmp	.+20     	; 0xc9e <HMI_opening+0x3c>
	while(g_tick < LOCK_PERIOD+WAIT_PERIOD){/*display message for period of locking + waiting*/
		LCD_goToRowColumn(1, 0);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
		LCD_intToStr(g_tick);
     c92:	80 91 ec 00 	lds	r24, 0x00EC
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_intToStr>
	LCD_goToRowColumn(0, 0);
	LCD_putString("Door unlocking...");

	g_tick = 0;
	Timer1_start(FCPU_256);
	while(g_tick < LOCK_PERIOD+WAIT_PERIOD){/*display message for period of locking + waiting*/
     c9e:	80 91 ec 00 	lds	r24, 0x00EC
     ca2:	82 31       	cpi	r24, 0x12	; 18
     ca4:	90 f3       	brcs	.-28     	; 0xc8a <HMI_opening+0x28>
		LCD_goToRowColumn(1, 0);
		LCD_intToStr(g_tick);
	}
	Timer1_Stop();
     ca6:	0e 94 c4 14 	call	0x2988	; 0x2988 <Timer1_Stop>
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <HMI_alarm>:


void HMI_alarm()
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     cb8:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("ERROR!!");
     cc4:	82 e7       	ldi	r24, 0x72	; 114
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>

	g_tick = 0;
     ccc:	10 92 ec 00 	sts	0x00EC, r1
	Timer1_start(FCPU_256);
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	0e 94 83 14 	call	0x2906	; 0x2906 <Timer1_start>
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <HMI_alarm+0x3c>
	while(g_tick < ALARM_PERIOD){
		LCD_goToRowColumn(1, 0);
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
		LCD_intToStr(g_tick);
     ce0:	80 91 ec 00 	lds	r24, 0x00EC
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_intToStr>
	LCD_goToRowColumn(0, 0);
	LCD_putString("ERROR!!");

	g_tick = 0;
	Timer1_start(FCPU_256);
	while(g_tick < ALARM_PERIOD){
     cec:	80 91 ec 00 	lds	r24, 0x00EC
     cf0:	8c 33       	cpi	r24, 0x3C	; 60
     cf2:	90 f3       	brcs	.-28     	; 0xcd8 <HMI_alarm+0x28>
		LCD_goToRowColumn(1, 0);
		LCD_intToStr(g_tick);
	}
	Timer1_Stop();
     cf4:	0e 94 c4 14 	call	0x2988	; 0x2988 <Timer1_Stop>
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <HMI_locking>:

void HMI_locking()
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     d06:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("Door locking...  ");
     d12:	8a e7       	ldi	r24, 0x7A	; 122
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>


	g_tick = 0;
     d1a:	10 92 ec 00 	sts	0x00EC, r1
	Timer1_start(FCPU_256);
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	0e 94 83 14 	call	0x2906	; 0x2906 <Timer1_start>
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <HMI_locking+0x3c>
	while(g_tick < LOCK_PERIOD){
		LCD_goToRowColumn(1, 0);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
		LCD_intToStr(g_tick);
     d2e:	80 91 ec 00 	lds	r24, 0x00EC
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_intToStr>
	LCD_putString("Door locking...  ");


	g_tick = 0;
	Timer1_start(FCPU_256);
	while(g_tick < LOCK_PERIOD){
     d3a:	80 91 ec 00 	lds	r24, 0x00EC
     d3e:	8f 30       	cpi	r24, 0x0F	; 15
     d40:	90 f3       	brcs	.-28     	; 0xd26 <HMI_locking+0x28>
		LCD_goToRowColumn(1, 0);
		LCD_intToStr(g_tick);
	}
	Timer1_Stop();
     d42:	0e 94 c4 14 	call	0x2988	; 0x2988 <Timer1_Stop>
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <HMI_options>:


void HMI_options()
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	LCD_clearScreen();
     d56:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("+ change pass  ");
     d62:	8c e8       	ldi	r24, 0x8C	; 140
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>

	LCD_goToRowColumn(1, 0);
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("- open door        ");
     d72:	8c e9       	ldi	r24, 0x9C	; 156
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>

	while(1){
		key = KeyPad_getPressedKey();
     d7a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <KeyPad_getPressedKey>
     d7e:	89 83       	std	Y+1, r24	; 0x01
		if(key == '+' || key == '-')break;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	8b 32       	cpi	r24, 0x2B	; 43
     d84:	19 f0       	breq	.+6      	; 0xd8c <HMI_options+0x40>
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	8d 32       	cpi	r24, 0x2D	; 45
     d8a:	b9 f7       	brne	.-18     	; 0xd7a <HMI_options+0x2e>
	}

	UART_sendByte(key);
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_sendByte>

}
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <HMI_newPass>:

void HMI_newPass()
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	a3 97       	sbiw	r28, 0x23	; 35
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASS_LEN];
	uint8 i = 0; /*loop counter*/
     db2:	1d 8e       	std	Y+29, r1	; 0x1d
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	aa ef       	ldi	r26, 0xFA	; 250
     dba:	b3 e4       	ldi	r27, 0x43	; 67
     dbc:	89 8f       	std	Y+25, r24	; 0x19
     dbe:	9a 8f       	std	Y+26, r25	; 0x1a
     dc0:	ab 8f       	std	Y+27, r26	; 0x1b
     dc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	69 8d       	ldd	r22, Y+25	; 0x19
     dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a ef       	ldi	r20, 0xFA	; 250
     dd2:	54 e4       	ldi	r21, 0x44	; 68
     dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8d 8b       	std	Y+21, r24	; 0x15
     dde:	9e 8b       	std	Y+22, r25	; 0x16
     de0:	af 8b       	std	Y+23, r26	; 0x17
     de2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     de4:	6d 89       	ldd	r22, Y+21	; 0x15
     de6:	7e 89       	ldd	r23, Y+22	; 0x16
     de8:	8f 89       	ldd	r24, Y+23	; 0x17
     dea:	98 8d       	ldd	r25, Y+24	; 0x18
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <HMI_newPass+0x6c>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9c 8b       	std	Y+20, r25	; 0x14
     e02:	8b 8b       	std	Y+19, r24	; 0x13
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <HMI_newPass+0xea>
	else if (__tmp > 65535)
     e06:	6d 89       	ldd	r22, Y+21	; 0x15
     e08:	7e 89       	ldd	r23, Y+22	; 0x16
     e0a:	8f 89       	ldd	r24, Y+23	; 0x17
     e0c:	98 8d       	ldd	r25, Y+24	; 0x18
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <HMI_newPass+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	69 8d       	ldd	r22, Y+25	; 0x19
     e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9c 8b       	std	Y+20, r25	; 0x14
     e44:	8b 8b       	std	Y+19, r24	; 0x13
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <HMI_newPass+0xcc>
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9a 8b       	std	Y+18, r25	; 0x12
     e4e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e50:	89 89       	ldd	r24, Y+17	; 0x11
     e52:	9a 89       	ldd	r25, Y+18	; 0x12
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <HMI_newPass+0xba>
     e58:	9a 8b       	std	Y+18, r25	; 0x12
     e5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8b 89       	ldd	r24, Y+19	; 0x13
     e5e:	9c 89       	ldd	r25, Y+20	; 0x14
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9c 8b       	std	Y+20, r25	; 0x14
     e64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8b 89       	ldd	r24, Y+19	; 0x13
     e68:	9c 89       	ldd	r25, Y+20	; 0x14
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <HMI_newPass+0xae>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <HMI_newPass+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6d 89       	ldd	r22, Y+21	; 0x15
     e72:	7e 89       	ldd	r23, Y+22	; 0x16
     e74:	8f 89       	ldd	r24, Y+23	; 0x17
     e76:	98 8d       	ldd	r25, Y+24	; 0x18
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9c 8b       	std	Y+20, r25	; 0x14
     e82:	8b 8b       	std	Y+19, r24	; 0x13
     e84:	8b 89       	ldd	r24, Y+19	; 0x13
     e86:	9c 89       	ldd	r25, Y+20	; 0x14
     e88:	98 8b       	std	Y+16, r25	; 0x10
     e8a:	8f 87       	std	Y+15, r24	; 0x0f
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	98 89       	ldd	r25, Y+16	; 0x10
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <HMI_newPass+0xf6>
     e94:	98 8b       	std	Y+16, r25	; 0x10
     e96:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(KEYPAD_DELAY);

	LCD_clearScreen();
     e98:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("Enter new pass:");
     ea4:	80 eb       	ldi	r24, 0xB0	; 176
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>
	LCD_goToRowColumn(1, 0);/*move cursor to next line*/
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>

	do{
		password[i] = KeyPad_getPressedKey();
     eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb6:	08 2f       	mov	r16, r24
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	0e 94 c0 0a 	call	0x1580	; 0x1580 <KeyPad_getPressedKey>
     ebe:	28 2f       	mov	r18, r24
     ec0:	ce 01       	movw	r24, r28
     ec2:	4e 96       	adiw	r24, 0x1e	; 30
     ec4:	fc 01       	movw	r30, r24
     ec6:	e0 0f       	add	r30, r16
     ec8:	f1 1f       	adc	r31, r17
     eca:	20 83       	st	Z, r18
		if(password[i] >=0 && password[i] <= 9){/*accept digits only*/
     ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	ce 01       	movw	r24, r28
     ed4:	4e 96       	adiw	r24, 0x1e	; 30
     ed6:	fc 01       	movw	r30, r24
     ed8:	e2 0f       	add	r30, r18
     eda:	f3 1f       	adc	r31, r19
     edc:	80 81       	ld	r24, Z
     ede:	8a 30       	cpi	r24, 0x0A	; 10
     ee0:	d0 f4       	brcc	.+52     	; 0xf16 <HMI_newPass+0x17c>
			password[i] = '0' + password[i];/*turn digit to corresponding character*/
     ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee4:	48 2f       	mov	r20, r24
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	ce 01       	movw	r24, r28
     ef0:	4e 96       	adiw	r24, 0x1e	; 30
     ef2:	fc 01       	movw	r30, r24
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	20 5d       	subi	r18, 0xD0	; 208
     efe:	ce 01       	movw	r24, r28
     f00:	4e 96       	adiw	r24, 0x1e	; 30
     f02:	fc 01       	movw	r30, r24
     f04:	e4 0f       	add	r30, r20
     f06:	f5 1f       	adc	r31, r21
     f08:	20 83       	st	Z, r18
			i++;
     f0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_putCharacter('*');
     f10:	8a e2       	ldi	r24, 0x2A	; 42
     f12:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_putCharacter>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	aa ef       	ldi	r26, 0xFA	; 250
     f1c:	b3 e4       	ldi	r27, 0x43	; 67
     f1e:	8b 87       	std	Y+11, r24	; 0x0b
     f20:	9c 87       	std	Y+12, r25	; 0x0c
     f22:	ad 87       	std	Y+13, r26	; 0x0d
     f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f26:	6b 85       	ldd	r22, Y+11	; 0x0b
     f28:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	54 e4       	ldi	r21, 0x44	; 68
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	98 87       	std	Y+8, r25	; 0x08
     f42:	a9 87       	std	Y+9, r26	; 0x09
     f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <HMI_newPass+0x1ce>
		__ticks = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <HMI_newPass+0x24c>
	else if (__tmp > 65535)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <HMI_newPass+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f80:	6b 85       	ldd	r22, Y+11	; 0x0b
     f82:	7c 85       	ldd	r23, Y+12	; 0x0c
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	51 e4       	ldi	r21, 0x41	; 65
     f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <HMI_newPass+0x22e>
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <HMI_newPass+0x21c>
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f7       	brne	.-38     	; 0xfaa <HMI_newPass+0x210>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <HMI_newPass+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <HMI_newPass+0x258>
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(KEYPAD_DELAY);

	}while(i < PASS_LEN-1);
     ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffc:	85 30       	cpi	r24, 0x05	; 5
     ffe:	08 f4       	brcc	.+2      	; 0x1002 <HMI_newPass+0x268>
    1000:	59 cf       	rjmp	.-334    	; 0xeb4 <HMI_newPass+0x11a>
	password[i] = '\0';
    1002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	ce 01       	movw	r24, r28
    100a:	4e 96       	adiw	r24, 0x1e	; 30
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	10 82       	st	Z, r1

	while(KeyPad_getPressedKey() != 13);/*wait until return is pressed*/
    1014:	0e 94 c0 0a 	call	0x1580	; 0x1580 <KeyPad_getPressedKey>
    1018:	8d 30       	cpi	r24, 0x0D	; 13
    101a:	e1 f7       	brne	.-8      	; 0x1014 <HMI_newPass+0x27a>

	UART_sendString(password, '#');
    101c:	ce 01       	movw	r24, r28
    101e:	4e 96       	adiw	r24, 0x1e	; 30
    1020:	63 e2       	ldi	r22, 0x23	; 35
    1022:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <UART_sendString>
}
    1026:	a3 96       	adiw	r28, 0x23	; 35
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	08 95       	ret

0000103c <HMI_confirmPass>:

void HMI_confirmPass()
{
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	a3 97       	sbiw	r28, 0x23	; 35
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
	uint8 password_confirm[PASS_LEN];
	uint8 i = 0; /*loop counter*/
    1054:	1d 8e       	std	Y+29, r1	; 0x1d
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	aa ef       	ldi	r26, 0xFA	; 250
    105c:	b3 e4       	ldi	r27, 0x43	; 67
    105e:	89 8f       	std	Y+25, r24	; 0x19
    1060:	9a 8f       	std	Y+26, r25	; 0x1a
    1062:	ab 8f       	std	Y+27, r26	; 0x1b
    1064:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1066:	69 8d       	ldd	r22, Y+25	; 0x19
    1068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a ef       	ldi	r20, 0xFA	; 250
    1074:	54 e4       	ldi	r21, 0x44	; 68
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	8d 8b       	std	Y+21, r24	; 0x15
    1080:	9e 8b       	std	Y+22, r25	; 0x16
    1082:	af 8b       	std	Y+23, r26	; 0x17
    1084:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109a:	88 23       	and	r24, r24
    109c:	2c f4       	brge	.+10     	; 0x10a8 <HMI_confirmPass+0x6c>
		__ticks = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c 8b       	std	Y+20, r25	; 0x14
    10a4:	8b 8b       	std	Y+19, r24	; 0x13
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <HMI_confirmPass+0xea>
	else if (__tmp > 65535)
    10a8:	6d 89       	ldd	r22, Y+21	; 0x15
    10aa:	7e 89       	ldd	r23, Y+22	; 0x16
    10ac:	8f 89       	ldd	r24, Y+23	; 0x17
    10ae:	98 8d       	ldd	r25, Y+24	; 0x18
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	57 e4       	ldi	r21, 0x47	; 71
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10bc:	18 16       	cp	r1, r24
    10be:	4c f5       	brge	.+82     	; 0x1112 <HMI_confirmPass+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c0:	69 8d       	ldd	r22, Y+25	; 0x19
    10c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9c 8b       	std	Y+20, r25	; 0x14
    10e6:	8b 8b       	std	Y+19, r24	; 0x13
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <HMI_confirmPass+0xcc>
    10ea:	88 ec       	ldi	r24, 0xC8	; 200
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9a 8b       	std	Y+18, r25	; 0x12
    10f0:	89 8b       	std	Y+17, r24	; 0x11
    10f2:	89 89       	ldd	r24, Y+17	; 0x11
    10f4:	9a 89       	ldd	r25, Y+18	; 0x12
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <HMI_confirmPass+0xba>
    10fa:	9a 8b       	std	Y+18, r25	; 0x12
    10fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1100:	9c 89       	ldd	r25, Y+20	; 0x14
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	9c 8b       	std	Y+20, r25	; 0x14
    1106:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	8b 89       	ldd	r24, Y+19	; 0x13
    110a:	9c 89       	ldd	r25, Y+20	; 0x14
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	69 f7       	brne	.-38     	; 0x10ea <HMI_confirmPass+0xae>
    1110:	14 c0       	rjmp	.+40     	; 0x113a <HMI_confirmPass+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	6d 89       	ldd	r22, Y+21	; 0x15
    1114:	7e 89       	ldd	r23, Y+22	; 0x16
    1116:	8f 89       	ldd	r24, Y+23	; 0x17
    1118:	98 8d       	ldd	r25, Y+24	; 0x18
    111a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9c 8b       	std	Y+20, r25	; 0x14
    1124:	8b 8b       	std	Y+19, r24	; 0x13
    1126:	8b 89       	ldd	r24, Y+19	; 0x13
    1128:	9c 89       	ldd	r25, Y+20	; 0x14
    112a:	98 8b       	std	Y+16, r25	; 0x10
    112c:	8f 87       	std	Y+15, r24	; 0x0f
    112e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1130:	98 89       	ldd	r25, Y+16	; 0x10
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <HMI_confirmPass+0xf6>
    1136:	98 8b       	std	Y+16, r25	; 0x10
    1138:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(KEYPAD_DELAY);

	LCD_clearScreen();
    113a:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("confirm new pass:");
    1146:	80 ec       	ldi	r24, 0xC0	; 192
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>
	LCD_goToRowColumn(1, 0);/*move cursor to next line*/
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>

	do{
		password_confirm[i] = KeyPad_getPressedKey();
    1156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1158:	08 2f       	mov	r16, r24
    115a:	10 e0       	ldi	r17, 0x00	; 0
    115c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <KeyPad_getPressedKey>
    1160:	28 2f       	mov	r18, r24
    1162:	ce 01       	movw	r24, r28
    1164:	4e 96       	adiw	r24, 0x1e	; 30
    1166:	fc 01       	movw	r30, r24
    1168:	e0 0f       	add	r30, r16
    116a:	f1 1f       	adc	r31, r17
    116c:	20 83       	st	Z, r18
		if(password_confirm[i] >=0 && password_confirm[i] <= 9){/*accept digits only*/
    116e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	ce 01       	movw	r24, r28
    1176:	4e 96       	adiw	r24, 0x1e	; 30
    1178:	fc 01       	movw	r30, r24
    117a:	e2 0f       	add	r30, r18
    117c:	f3 1f       	adc	r31, r19
    117e:	80 81       	ld	r24, Z
    1180:	8a 30       	cpi	r24, 0x0A	; 10
    1182:	d0 f4       	brcc	.+52     	; 0x11b8 <HMI_confirmPass+0x17c>
			password_confirm[i] = '0' + password_confirm[i];/*turn digit to corresponding character*/
    1184:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1186:	48 2f       	mov	r20, r24
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	ce 01       	movw	r24, r28
    1192:	4e 96       	adiw	r24, 0x1e	; 30
    1194:	fc 01       	movw	r30, r24
    1196:	e2 0f       	add	r30, r18
    1198:	f3 1f       	adc	r31, r19
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	20 5d       	subi	r18, 0xD0	; 208
    11a0:	ce 01       	movw	r24, r28
    11a2:	4e 96       	adiw	r24, 0x1e	; 30
    11a4:	fc 01       	movw	r30, r24
    11a6:	e4 0f       	add	r30, r20
    11a8:	f5 1f       	adc	r31, r21
    11aa:	20 83       	st	Z, r18
			i++;
    11ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ae:	8f 5f       	subi	r24, 0xFF	; 255
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_putCharacter('*');
    11b2:	8a e2       	ldi	r24, 0x2A	; 42
    11b4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_putCharacter>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	aa ef       	ldi	r26, 0xFA	; 250
    11be:	b3 e4       	ldi	r27, 0x43	; 67
    11c0:	8b 87       	std	Y+11, r24	; 0x0b
    11c2:	9c 87       	std	Y+12, r25	; 0x0c
    11c4:	ad 87       	std	Y+13, r26	; 0x0d
    11c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    11cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	4a ef       	ldi	r20, 0xFA	; 250
    11d6:	54 e4       	ldi	r21, 0x44	; 68
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	8f 83       	std	Y+7, r24	; 0x07
    11e2:	98 87       	std	Y+8, r25	; 0x08
    11e4:	a9 87       	std	Y+9, r26	; 0x09
    11e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <HMI_confirmPass+0x1ce>
		__ticks = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <HMI_confirmPass+0x24c>
	else if (__tmp > 65535)
    120a:	6f 81       	ldd	r22, Y+7	; 0x07
    120c:	78 85       	ldd	r23, Y+8	; 0x08
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	4c f5       	brge	.+82     	; 0x1274 <HMI_confirmPass+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	6b 85       	ldd	r22, Y+11	; 0x0b
    1224:	7c 85       	ldd	r23, Y+12	; 0x0c
    1226:	8d 85       	ldd	r24, Y+13	; 0x0d
    1228:	9e 85       	ldd	r25, Y+14	; 0x0e
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e2       	ldi	r20, 0x20	; 32
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	0f c0       	rjmp	.+30     	; 0x126a <HMI_confirmPass+0x22e>
    124c:	88 ec       	ldi	r24, 0xC8	; 200
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <HMI_confirmPass+0x21c>
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	69 f7       	brne	.-38     	; 0x124c <HMI_confirmPass+0x210>
    1272:	14 c0       	rjmp	.+40     	; 0x129c <HMI_confirmPass+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	6f 81       	ldd	r22, Y+7	; 0x07
    1276:	78 85       	ldd	r23, Y+8	; 0x08
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	9a 83       	std	Y+2, r25	; 0x02
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <HMI_confirmPass+0x258>
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(KEYPAD_DELAY);

	}while(i < PASS_LEN-1);
    129c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <HMI_confirmPass+0x268>
    12a2:	59 cf       	rjmp	.-334    	; 0x1156 <HMI_confirmPass+0x11a>
	password_confirm[i] = '\0';
    12a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	ce 01       	movw	r24, r28
    12ac:	4e 96       	adiw	r24, 0x1e	; 30
    12ae:	fc 01       	movw	r30, r24
    12b0:	e2 0f       	add	r30, r18
    12b2:	f3 1f       	adc	r31, r19
    12b4:	10 82       	st	Z, r1

	while(KeyPad_getPressedKey() != 13);/*wait until return is pressed*/
    12b6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <KeyPad_getPressedKey>
    12ba:	8d 30       	cpi	r24, 0x0D	; 13
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <HMI_confirmPass+0x27a>


	UART_sendString(password_confirm, '#');
    12be:	ce 01       	movw	r24, r28
    12c0:	4e 96       	adiw	r24, 0x1e	; 30
    12c2:	63 e2       	ldi	r22, 0x23	; 35
    12c4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <UART_sendString>
}
    12c8:	a3 96       	adiw	r28, 0x23	; 35
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	08 95       	ret

000012de <HMI_enterPass>:
void HMI_enterPass()
{
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	a3 97       	sbiw	r28, 0x23	; 35
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61

	uint8 password[PASS_LEN];
	uint8 i = 0; /*loop counter*/
    12f6:	1d 8e       	std	Y+29, r1	; 0x1d
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	aa ef       	ldi	r26, 0xFA	; 250
    12fe:	b3 e4       	ldi	r27, 0x43	; 67
    1300:	89 8f       	std	Y+25, r24	; 0x19
    1302:	9a 8f       	std	Y+26, r25	; 0x1a
    1304:	ab 8f       	std	Y+27, r26	; 0x1b
    1306:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1308:	69 8d       	ldd	r22, Y+25	; 0x19
    130a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a ef       	ldi	r20, 0xFA	; 250
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8d 8b       	std	Y+21, r24	; 0x15
    1322:	9e 8b       	std	Y+22, r25	; 0x16
    1324:	af 8b       	std	Y+23, r26	; 0x17
    1326:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1328:	6d 89       	ldd	r22, Y+21	; 0x15
    132a:	7e 89       	ldd	r23, Y+22	; 0x16
    132c:	8f 89       	ldd	r24, Y+23	; 0x17
    132e:	98 8d       	ldd	r25, Y+24	; 0x18
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	2c f4       	brge	.+10     	; 0x134a <HMI_enterPass+0x6c>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 8b       	std	Y+20, r25	; 0x14
    1346:	8b 8b       	std	Y+19, r24	; 0x13
    1348:	3f c0       	rjmp	.+126    	; 0x13c8 <HMI_enterPass+0xea>
	else if (__tmp > 65535)
    134a:	6d 89       	ldd	r22, Y+21	; 0x15
    134c:	7e 89       	ldd	r23, Y+22	; 0x16
    134e:	8f 89       	ldd	r24, Y+23	; 0x17
    1350:	98 8d       	ldd	r25, Y+24	; 0x18
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	57 e4       	ldi	r21, 0x47	; 71
    135a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135e:	18 16       	cp	r1, r24
    1360:	4c f5       	brge	.+82     	; 0x13b4 <HMI_enterPass+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	69 8d       	ldd	r22, Y+25	; 0x19
    1364:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1366:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1368:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9c 8b       	std	Y+20, r25	; 0x14
    1388:	8b 8b       	std	Y+19, r24	; 0x13
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <HMI_enterPass+0xcc>
    138c:	88 ec       	ldi	r24, 0xC8	; 200
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9a 8b       	std	Y+18, r25	; 0x12
    1392:	89 8b       	std	Y+17, r24	; 0x11
    1394:	89 89       	ldd	r24, Y+17	; 0x11
    1396:	9a 89       	ldd	r25, Y+18	; 0x12
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <HMI_enterPass+0xba>
    139c:	9a 8b       	std	Y+18, r25	; 0x12
    139e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	8b 89       	ldd	r24, Y+19	; 0x13
    13a2:	9c 89       	ldd	r25, Y+20	; 0x14
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	9c 8b       	std	Y+20, r25	; 0x14
    13a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	69 f7       	brne	.-38     	; 0x138c <HMI_enterPass+0xae>
    13b2:	14 c0       	rjmp	.+40     	; 0x13dc <HMI_enterPass+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b4:	6d 89       	ldd	r22, Y+21	; 0x15
    13b6:	7e 89       	ldd	r23, Y+22	; 0x16
    13b8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ba:	98 8d       	ldd	r25, Y+24	; 0x18
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9c 8b       	std	Y+20, r25	; 0x14
    13c6:	8b 8b       	std	Y+19, r24	; 0x13
    13c8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ca:	9c 89       	ldd	r25, Y+20	; 0x14
    13cc:	98 8b       	std	Y+16, r25	; 0x10
    13ce:	8f 87       	std	Y+15, r24	; 0x0f
    13d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d2:	98 89       	ldd	r25, Y+16	; 0x10
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <HMI_enterPass+0xf6>
    13d8:	98 8b       	std	Y+16, r25	; 0x10
    13da:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(KEYPAD_DELAY);

	LCD_clearScreen();
    13dc:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	LCD_putString("Enter pass:");
    13e8:	82 ed       	ldi	r24, 0xD2	; 210
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>

	LCD_goToRowColumn(1, 0);/*move cursor to next line*/
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_goToRowColumn>
	do{
		password[i] = KeyPad_getPressedKey();
    13f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13fa:	08 2f       	mov	r16, r24
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <KeyPad_getPressedKey>
    1402:	28 2f       	mov	r18, r24
    1404:	ce 01       	movw	r24, r28
    1406:	4e 96       	adiw	r24, 0x1e	; 30
    1408:	fc 01       	movw	r30, r24
    140a:	e0 0f       	add	r30, r16
    140c:	f1 1f       	adc	r31, r17
    140e:	20 83       	st	Z, r18
		if(password[i] >=0 && password[i] <= 9){/*accept digits only*/
    1410:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	ce 01       	movw	r24, r28
    1418:	4e 96       	adiw	r24, 0x1e	; 30
    141a:	fc 01       	movw	r30, r24
    141c:	e2 0f       	add	r30, r18
    141e:	f3 1f       	adc	r31, r19
    1420:	80 81       	ld	r24, Z
    1422:	8a 30       	cpi	r24, 0x0A	; 10
    1424:	d0 f4       	brcc	.+52     	; 0x145a <HMI_enterPass+0x17c>
			password[i] = '0' + password[i];/*turn digit to corresponding character*/
    1426:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1428:	48 2f       	mov	r20, r24
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	ce 01       	movw	r24, r28
    1434:	4e 96       	adiw	r24, 0x1e	; 30
    1436:	fc 01       	movw	r30, r24
    1438:	e2 0f       	add	r30, r18
    143a:	f3 1f       	adc	r31, r19
    143c:	80 81       	ld	r24, Z
    143e:	28 2f       	mov	r18, r24
    1440:	20 5d       	subi	r18, 0xD0	; 208
    1442:	ce 01       	movw	r24, r28
    1444:	4e 96       	adiw	r24, 0x1e	; 30
    1446:	fc 01       	movw	r30, r24
    1448:	e4 0f       	add	r30, r20
    144a:	f5 1f       	adc	r31, r21
    144c:	20 83       	st	Z, r18
			i++;
    144e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_putCharacter('*');
    1454:	8a e2       	ldi	r24, 0x2A	; 42
    1456:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_putCharacter>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	aa ef       	ldi	r26, 0xFA	; 250
    1460:	b3 e4       	ldi	r27, 0x43	; 67
    1462:	8b 87       	std	Y+11, r24	; 0x0b
    1464:	9c 87       	std	Y+12, r25	; 0x0c
    1466:	ad 87       	std	Y+13, r26	; 0x0d
    1468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	6b 85       	ldd	r22, Y+11	; 0x0b
    146c:	7c 85       	ldd	r23, Y+12	; 0x0c
    146e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1470:	9e 85       	ldd	r25, Y+14	; 0x0e
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a ef       	ldi	r20, 0xFA	; 250
    1478:	54 e4       	ldi	r21, 0x44	; 68
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	8f 83       	std	Y+7, r24	; 0x07
    1484:	98 87       	std	Y+8, r25	; 0x08
    1486:	a9 87       	std	Y+9, r26	; 0x09
    1488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <HMI_enterPass+0x1ce>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <HMI_enterPass+0x24c>
	else if (__tmp > 65535)
    14ac:	6f 81       	ldd	r22, Y+7	; 0x07
    14ae:	78 85       	ldd	r23, Y+8	; 0x08
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <HMI_enterPass+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <HMI_enterPass+0x22e>
    14ee:	88 ec       	ldi	r24, 0xC8	; 200
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <HMI_enterPass+0x21c>
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <HMI_enterPass+0x210>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <HMI_enterPass+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	6f 81       	ldd	r22, Y+7	; 0x07
    1518:	78 85       	ldd	r23, Y+8	; 0x08
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	9a 85       	ldd	r25, Y+10	; 0x0a
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <HMI_enterPass+0x258>
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(KEYPAD_DELAY);

	}while(i < PASS_LEN-1);
    153e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1540:	85 30       	cpi	r24, 0x05	; 5
    1542:	08 f4       	brcc	.+2      	; 0x1546 <HMI_enterPass+0x268>
    1544:	59 cf       	rjmp	.-334    	; 0x13f8 <HMI_enterPass+0x11a>
	password[i] = '\0';
    1546:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	ce 01       	movw	r24, r28
    154e:	4e 96       	adiw	r24, 0x1e	; 30
    1550:	fc 01       	movw	r30, r24
    1552:	e2 0f       	add	r30, r18
    1554:	f3 1f       	adc	r31, r19
    1556:	10 82       	st	Z, r1

	while(KeyPad_getPressedKey() != 13);/*wait until return is pressed*/
    1558:	0e 94 c0 0a 	call	0x1580	; 0x1580 <KeyPad_getPressedKey>
    155c:	8d 30       	cpi	r24, 0x0D	; 13
    155e:	e1 f7       	brne	.-8      	; 0x1558 <HMI_enterPass+0x27a>

	UART_sendString(password, '#');
    1560:	ce 01       	movw	r24, r28
    1562:	4e 96       	adiw	r24, 0x1e	; 30
    1564:	63 e2       	ldi	r22, 0x23	; 35
    1566:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <UART_sendString>
}
    156a:	a3 96       	adiw	r28, 0x23	; 35
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <KeyPad_getPressedKey>:
 *******************************************************************************/
/*
 * Function responsible for getting the pressed key on the keypad.
 */
uint8 KeyPad_getPressedKey(void)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <KeyPad_getPressedKey+0x6>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		/*
		 * The first four pins of the port are the input pins (rows pins).
		 */
		KEYPAD_PORT_DIR &= 0XF0;
    158a:	aa e3       	ldi	r26, 0x3A	; 58
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ea e3       	ldi	r30, 0x3A	; 58
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 7f       	andi	r24, 0xF0	; 240
    1596:	8c 93       	st	X, r24
		/*
		 * The last four pins of the port are the output pins (columns pins).
		 */
		KEYPAD_PORT_DIR|=0XF0;
    1598:	aa e3       	ldi	r26, 0x3A	; 58
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ea e3       	ldi	r30, 0x3A	; 58
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 6f       	ori	r24, 0xF0	; 240
    15a4:	8c 93       	st	X, r24
		/*
		 * write one to the first four pins to activate internal pull-up resistor.
		 * write one to the last four pins to deactivate the buttons.
		 */
		KEYPAD_PORT_OUT=0XFF;
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	80 83       	st	Z, r24
		for(col=0;col<N_col;col++) /* loop for columns */
    15ae:	1a 82       	std	Y+2, r1	; 0x02
    15b0:	4e c0       	rjmp	.+156    	; 0x164e <KeyPad_getPressedKey+0xce>
		{
			/*
			 * write one to the last four pins to deactivate the buttons.
			 */
			KEYPAD_PORT_OUT|=0XF0;
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 6f       	ori	r24, 0xF0	; 240
    15be:	8c 93       	st	X, r24
			/*
			 * Activate only one column at a time by writing zero.
			 */
			KEYPAD_PORT_OUT&=~(1<<(col+4));
    15c0:	ab e3       	ldi	r26, 0x3B	; 59
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e3       	ldi	r30, 0x3B	; 59
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 01       	movw	r18, r24
    15d4:	2c 5f       	subi	r18, 0xFC	; 252
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <KeyPad_getPressedKey+0x64>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <KeyPad_getPressedKey+0x60>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    15ee:	19 82       	std	Y+1, r1	; 0x01
    15f0:	28 c0       	rjmp	.+80     	; 0x1642 <KeyPad_getPressedKey+0xc2>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    15f2:	e9 e3       	ldi	r30, 0x39	; 57
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <KeyPad_getPressedKey+0x8a>
    1606:	55 95       	asr	r21
    1608:	47 95       	ror	r20
    160a:	8a 95       	dec	r24
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <KeyPad_getPressedKey+0x86>
    160e:	ca 01       	movw	r24, r20
    1610:	81 70       	andi	r24, 0x01	; 1
    1612:	90 70       	andi	r25, 0x00	; 0
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	91 f4       	brne	.+36     	; 0x163c <KeyPad_getPressedKey+0xbc>
				{
#if (N_col == 3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 4)
					return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	98 2f       	mov	r25, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	89 0f       	add	r24, r25
    162c:	8f 5f       	subi	r24, 0xFF	; 255
    162e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <KeyPad_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}	
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret
			KEYPAD_PORT_OUT|=0XF0;
			/*
			 * Activate only one column at a time by writing zero.
			 */
			KEYPAD_PORT_OUT&=~(1<<(col+4));
			for(row=0;row<N_row;row++) /* loop for rows */
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	a8 f2       	brcs	.-86     	; 0x15f2 <KeyPad_getPressedKey+0x72>
		/*
		 * write one to the first four pins to activate internal pull-up resistor.
		 * write one to the last four pins to deactivate the buttons.
		 */
		KEYPAD_PORT_OUT=0XFF;
		for(col=0;col<N_col;col++) /* loop for columns */
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	8a 83       	std	Y+2, r24	; 0x02
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	84 30       	cpi	r24, 0x04	; 4
    1652:	08 f4       	brcc	.+2      	; 0x1656 <KeyPad_getPressedKey+0xd6>
    1654:	ae cf       	rjmp	.-164    	; 0x15b2 <KeyPad_getPressedKey+0x32>
    1656:	99 cf       	rjmp	.-206    	; 0x158a <KeyPad_getPressedKey+0xa>

00001658 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <KeyPad_4x4_adjustKeyNumber+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <KeyPad_4x4_adjustKeyNumber+0x8>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3c 83       	std	Y+4, r19	; 0x04
    166e:	2b 83       	std	Y+3, r18	; 0x03
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	88 30       	cpi	r24, 0x08	; 8
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <KeyPad_4x4_adjustKeyNumber+0x24>
    167a:	70 c0       	rjmp	.+224    	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x104>
    167c:	2b 81       	ldd	r18, Y+3	; 0x03
    167e:	3c 81       	ldd	r19, Y+4	; 0x04
    1680:	29 30       	cpi	r18, 0x09	; 9
    1682:	31 05       	cpc	r19, r1
    1684:	5c f5       	brge	.+86     	; 0x16dc <KeyPad_4x4_adjustKeyNumber+0x84>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	91 05       	cpc	r25, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1690:	59 c0       	rjmp	.+178    	; 0x1744 <KeyPad_4x4_adjustKeyNumber+0xec>
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	25 30       	cpi	r18, 0x05	; 5
    1698:	31 05       	cpc	r19, r1
    169a:	9c f4       	brge	.+38     	; 0x16c2 <KeyPad_4x4_adjustKeyNumber+0x6a>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <KeyPad_4x4_adjustKeyNumber+0x50>
    16a6:	48 c0       	rjmp	.+144    	; 0x1738 <KeyPad_4x4_adjustKeyNumber+0xe0>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	23 30       	cpi	r18, 0x03	; 3
    16ae:	31 05       	cpc	r19, r1
    16b0:	0c f0       	brlt	.+2      	; 0x16b4 <KeyPad_4x4_adjustKeyNumber+0x5c>
    16b2:	45 c0       	rjmp	.+138    	; 0x173e <KeyPad_4x4_adjustKeyNumber+0xe6>
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <KeyPad_4x4_adjustKeyNumber+0x68>
    16be:	39 c0       	rjmp	.+114    	; 0x1732 <KeyPad_4x4_adjustKeyNumber+0xda>
    16c0:	67 c0       	rjmp	.+206    	; 0x1790 <KeyPad_4x4_adjustKeyNumber+0x138>
    16c2:	2b 81       	ldd	r18, Y+3	; 0x03
    16c4:	3c 81       	ldd	r19, Y+4	; 0x04
    16c6:	26 30       	cpi	r18, 0x06	; 6
    16c8:	31 05       	cpc	r19, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <KeyPad_4x4_adjustKeyNumber+0x76>
    16cc:	41 c0       	rjmp	.+130    	; 0x1750 <KeyPad_4x4_adjustKeyNumber+0xf8>
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	87 30       	cpi	r24, 0x07	; 7
    16d4:	91 05       	cpc	r25, r1
    16d6:	0c f0       	brlt	.+2      	; 0x16da <KeyPad_4x4_adjustKeyNumber+0x82>
    16d8:	3e c0       	rjmp	.+124    	; 0x1756 <KeyPad_4x4_adjustKeyNumber+0xfe>
    16da:	37 c0       	rjmp	.+110    	; 0x174a <KeyPad_4x4_adjustKeyNumber+0xf2>
    16dc:	2b 81       	ldd	r18, Y+3	; 0x03
    16de:	3c 81       	ldd	r19, Y+4	; 0x04
    16e0:	2c 30       	cpi	r18, 0x0C	; 12
    16e2:	31 05       	cpc	r19, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <KeyPad_4x4_adjustKeyNumber+0x90>
    16e6:	46 c0       	rjmp	.+140    	; 0x1774 <KeyPad_4x4_adjustKeyNumber+0x11c>
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	8d 30       	cpi	r24, 0x0D	; 13
    16ee:	91 05       	cpc	r25, r1
    16f0:	5c f4       	brge	.+22     	; 0x1708 <KeyPad_4x4_adjustKeyNumber+0xb0>
    16f2:	2b 81       	ldd	r18, Y+3	; 0x03
    16f4:	3c 81       	ldd	r19, Y+4	; 0x04
    16f6:	2a 30       	cpi	r18, 0x0A	; 10
    16f8:	31 05       	cpc	r19, r1
    16fa:	b1 f1       	breq	.+108    	; 0x1768 <KeyPad_4x4_adjustKeyNumber+0x110>
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	8b 30       	cpi	r24, 0x0B	; 11
    1702:	91 05       	cpc	r25, r1
    1704:	a4 f5       	brge	.+104    	; 0x176e <KeyPad_4x4_adjustKeyNumber+0x116>
    1706:	2d c0       	rjmp	.+90     	; 0x1762 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1708:	2b 81       	ldd	r18, Y+3	; 0x03
    170a:	3c 81       	ldd	r19, Y+4	; 0x04
    170c:	2e 30       	cpi	r18, 0x0E	; 14
    170e:	31 05       	cpc	r19, r1
    1710:	b9 f1       	breq	.+110    	; 0x1780 <KeyPad_4x4_adjustKeyNumber+0x128>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	8e 30       	cpi	r24, 0x0E	; 14
    1718:	91 05       	cpc	r25, r1
    171a:	7c f1       	brlt	.+94     	; 0x177a <KeyPad_4x4_adjustKeyNumber+0x122>
    171c:	2b 81       	ldd	r18, Y+3	; 0x03
    171e:	3c 81       	ldd	r19, Y+4	; 0x04
    1720:	2f 30       	cpi	r18, 0x0F	; 15
    1722:	31 05       	cpc	r19, r1
    1724:	79 f1       	breq	.+94     	; 0x1784 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	80 31       	cpi	r24, 0x10	; 16
    172c:	91 05       	cpc	r25, r1
    172e:	69 f1       	breq	.+90     	; 0x178a <KeyPad_4x4_adjustKeyNumber+0x132>
    1730:	2f c0       	rjmp	.+94     	; 0x1790 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	case 1: return 7;
    1732:	97 e0       	ldi	r25, 0x07	; 7
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	2e c0       	rjmp	.+92     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 2: return 8;
    1738:	28 e0       	ldi	r18, 0x08	; 8
    173a:	2a 83       	std	Y+2, r18	; 0x02
    173c:	2b c0       	rjmp	.+86     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 3: return 9;
    173e:	39 e0       	ldi	r19, 0x09	; 9
    1740:	3a 83       	std	Y+2, r19	; 0x02
    1742:	28 c0       	rjmp	.+80     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 4: return '%'; // ASCII Code of %
    1744:	85 e2       	ldi	r24, 0x25	; 37
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	25 c0       	rjmp	.+74     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 5: return 4;
    174a:	94 e0       	ldi	r25, 0x04	; 4
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	22 c0       	rjmp	.+68     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 6: return 5;
    1750:	25 e0       	ldi	r18, 0x05	; 5
    1752:	2a 83       	std	Y+2, r18	; 0x02
    1754:	1f c0       	rjmp	.+62     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 7: return 6;
    1756:	36 e0       	ldi	r19, 0x06	; 6
    1758:	3a 83       	std	Y+2, r19	; 0x02
    175a:	1c c0       	rjmp	.+56     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 8: return '*'; /* ASCII Code of '*' */
    175c:	8a e2       	ldi	r24, 0x2A	; 42
    175e:	8a 83       	std	Y+2, r24	; 0x02
    1760:	19 c0       	rjmp	.+50     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 9: return 1;
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 10: return 2;
    1768:	22 e0       	ldi	r18, 0x02	; 2
    176a:	2a 83       	std	Y+2, r18	; 0x02
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 11: return 3;
    176e:	33 e0       	ldi	r19, 0x03	; 3
    1770:	3a 83       	std	Y+2, r19	; 0x02
    1772:	10 c0       	rjmp	.+32     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 12: return '-'; /* ASCII Code of '-' */
    1774:	8d e2       	ldi	r24, 0x2D	; 45
    1776:	8a 83       	std	Y+2, r24	; 0x02
    1778:	0d c0       	rjmp	.+26     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 13: return 13;  /* ASCII of Enter */
    177a:	9d e0       	ldi	r25, 0x0D	; 13
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	0a c0       	rjmp	.+20     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 14: return 0;
    1780:	1a 82       	std	Y+2, r1	; 0x02
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 15: return '='; /* ASCII Code of '=' */
    1784:	2d e3       	ldi	r18, 0x3D	; 61
    1786:	2a 83       	std	Y+2, r18	; 0x02
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 16: return '+'; /* ASCII Code of '+' */
    178a:	3b e2       	ldi	r19, 0x2B	; 43
    178c:	3a 83       	std	Y+2, r19	; 0x02
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	default: return button_number;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LCD_init()
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	/*make control pins output port*/
	SET_BIT(LCD_CTRL_PORT_DIR, LCD_RS);
    17ac:	a1 e3       	ldi	r26, 0x31	; 49
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 61       	ori	r24, 0x10	; 16
    17b8:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT_DIR, LCD_EN);
    17ba:	a1 e3       	ldi	r26, 0x31	; 49
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e1 e3       	ldi	r30, 0x31	; 49
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	80 64       	ori	r24, 0x40	; 64
    17c6:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT_DIR, LCD_RW);
    17c8:	a1 e3       	ldi	r26, 0x31	; 49
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e1 e3       	ldi	r30, 0x31	; 49
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 62       	ori	r24, 0x20	; 32
    17d4:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR =  0x0F;
		#endif
		LCD_sendCmd(FOUR_BITS_DATA_MODE);
		LCD_sendCmd(TWO_LINE_LCD_4_BIT);
	#else
			LCD_DATA_PORT_DIR = 0xFF;
    17d6:	e4 e3       	ldi	r30, 0x34	; 52
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	80 83       	st	Z, r24
			LCD_sendCmd(TWO_LINE_LCD_8_BIT);
    17de:	88 e3       	ldi	r24, 0x38	; 56
    17e0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCmd>
	#endif

	LCD_sendCmd(CURSOR_OFF);/*turn off cursor*/
    17e4:	8c e0       	ldi	r24, 0x0C	; 12
    17e6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCmd>
	LCD_sendCmd(CLEAR_COMMAND);/*clear LCD*/
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCmd>


}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <LCD_sendCmd>:

void LCD_sendCmd(uint8_t cmd)
{
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	c7 54       	subi	r28, 0x47	; 71
    1804:	d0 40       	sbci	r29, 0x00	; 0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	fe 01       	movw	r30, r28
    1812:	e9 5b       	subi	r30, 0xB9	; 185
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RS);
    1818:	a2 e3       	ldi	r26, 0x32	; 50
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e2 e3       	ldi	r30, 0x32	; 50
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8f 7e       	andi	r24, 0xEF	; 239
    1824:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RW);
    1826:	a2 e3       	ldi	r26, 0x32	; 50
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e2 e3       	ldi	r30, 0x32	; 50
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8f 7d       	andi	r24, 0xDF	; 223
    1832:	8c 93       	st	X, r24
    1834:	fe 01       	movw	r30, r28
    1836:	ed 5b       	subi	r30, 0xBD	; 189
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a0 e8       	ldi	r26, 0x80	; 128
    1840:	bf e3       	ldi	r27, 0x3F	; 63
    1842:	80 83       	st	Z, r24
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	a2 83       	std	Z+2, r26	; 0x02
    1848:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184a:	8e 01       	movw	r16, r28
    184c:	01 5c       	subi	r16, 0xC1	; 193
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	fe 01       	movw	r30, r28
    1852:	ed 5b       	subi	r30, 0xBD	; 189
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	4a ef       	ldi	r20, 0xFA	; 250
    1864:	54 e4       	ldi	r21, 0x44	; 68
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	f8 01       	movw	r30, r16
    1870:	80 83       	st	Z, r24
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	a2 83       	std	Z+2, r26	; 0x02
    1876:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1878:	fe 01       	movw	r30, r28
    187a:	ff 96       	adiw	r30, 0x3f	; 63
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_sendCmd+0xa8>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9e af       	std	Y+62, r25	; 0x3e
    189a:	8d af       	std	Y+61, r24	; 0x3d
    189c:	46 c0       	rjmp	.+140    	; 0x192a <LCD_sendCmd+0x134>
	else if (__tmp > 65535)
    189e:	fe 01       	movw	r30, r28
    18a0:	ff 96       	adiw	r30, 0x3f	; 63
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	64 f5       	brge	.+88     	; 0x1912 <LCD_sendCmd+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	fe 01       	movw	r30, r28
    18bc:	ed 5b       	subi	r30, 0xBD	; 189
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e2       	ldi	r20, 0x20	; 32
    18ce:	51 e4       	ldi	r21, 0x41	; 65
    18d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e af       	std	Y+62, r25	; 0x3e
    18e6:	8d af       	std	Y+61, r24	; 0x3d
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <LCD_sendCmd+0x112>
    18ea:	88 ec       	ldi	r24, 0xC8	; 200
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9c af       	std	Y+60, r25	; 0x3c
    18f0:	8b af       	std	Y+59, r24	; 0x3b
    18f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    18f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_sendCmd+0x100>
    18fa:	9c af       	std	Y+60, r25	; 0x3c
    18fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1900:	9e ad       	ldd	r25, Y+62	; 0x3e
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	9e af       	std	Y+62, r25	; 0x3e
    1906:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	8d ad       	ldd	r24, Y+61	; 0x3d
    190a:	9e ad       	ldd	r25, Y+62	; 0x3e
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	69 f7       	brne	.-38     	; 0x18ea <LCD_sendCmd+0xf4>
    1910:	16 c0       	rjmp	.+44     	; 0x193e <LCD_sendCmd+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1912:	fe 01       	movw	r30, r28
    1914:	ff 96       	adiw	r30, 0x3f	; 63
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e af       	std	Y+62, r25	; 0x3e
    1928:	8d af       	std	Y+61, r24	; 0x3d
    192a:	8d ad       	ldd	r24, Y+61	; 0x3d
    192c:	9e ad       	ldd	r25, Y+62	; 0x3e
    192e:	9a af       	std	Y+58, r25	; 0x3a
    1930:	89 af       	std	Y+57, r24	; 0x39
    1932:	89 ad       	ldd	r24, Y+57	; 0x39
    1934:	9a ad       	ldd	r25, Y+58	; 0x3a
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <LCD_sendCmd+0x140>
    193a:	9a af       	std	Y+58, r25	; 0x3a
    193c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, LCD_EN);
    193e:	a2 e3       	ldi	r26, 0x32	; 50
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e2 e3       	ldi	r30, 0x32	; 50
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 64       	ori	r24, 0x40	; 64
    194a:	8c 93       	st	X, r24
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e8       	ldi	r26, 0x80	; 128
    1952:	bf e3       	ldi	r27, 0x3F	; 63
    1954:	8d ab       	std	Y+53, r24	; 0x35
    1956:	9e ab       	std	Y+54, r25	; 0x36
    1958:	af ab       	std	Y+55, r26	; 0x37
    195a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	6d a9       	ldd	r22, Y+53	; 0x35
    195e:	7e a9       	ldd	r23, Y+54	; 0x36
    1960:	8f a9       	ldd	r24, Y+55	; 0x37
    1962:	98 ad       	ldd	r25, Y+56	; 0x38
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a ef       	ldi	r20, 0xFA	; 250
    196a:	54 e4       	ldi	r21, 0x44	; 68
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	89 ab       	std	Y+49, r24	; 0x31
    1976:	9a ab       	std	Y+50, r25	; 0x32
    1978:	ab ab       	std	Y+51, r26	; 0x33
    197a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    197c:	69 a9       	ldd	r22, Y+49	; 0x31
    197e:	7a a9       	ldd	r23, Y+50	; 0x32
    1980:	8b a9       	ldd	r24, Y+51	; 0x33
    1982:	9c a9       	ldd	r25, Y+52	; 0x34
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <LCD_sendCmd+0x1a8>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	98 ab       	std	Y+48, r25	; 0x30
    199a:	8f a7       	std	Y+47, r24	; 0x2f
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <LCD_sendCmd+0x226>
	else if (__tmp > 65535)
    199e:	69 a9       	ldd	r22, Y+49	; 0x31
    19a0:	7a a9       	ldd	r23, Y+50	; 0x32
    19a2:	8b a9       	ldd	r24, Y+51	; 0x33
    19a4:	9c a9       	ldd	r25, Y+52	; 0x34
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <LCD_sendCmd+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	6d a9       	ldd	r22, Y+53	; 0x35
    19b8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ba:	8f a9       	ldd	r24, Y+55	; 0x37
    19bc:	98 ad       	ldd	r25, Y+56	; 0x38
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	98 ab       	std	Y+48, r25	; 0x30
    19dc:	8f a7       	std	Y+47, r24	; 0x2f
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <LCD_sendCmd+0x208>
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9e a7       	std	Y+46, r25	; 0x2e
    19e6:	8d a7       	std	Y+45, r24	; 0x2d
    19e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_sendCmd+0x1f6>
    19f0:	9e a7       	std	Y+46, r25	; 0x2e
    19f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f6:	98 a9       	ldd	r25, Y+48	; 0x30
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	98 ab       	std	Y+48, r25	; 0x30
    19fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a00:	98 a9       	ldd	r25, Y+48	; 0x30
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <LCD_sendCmd+0x1ea>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <LCD_sendCmd+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	69 a9       	ldd	r22, Y+49	; 0x31
    1a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	98 ab       	std	Y+48, r25	; 0x30
    1a1a:	8f a7       	std	Y+47, r24	; 0x2f
    1a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a20:	9c a7       	std	Y+44, r25	; 0x2c
    1a22:	8b a7       	std	Y+43, r24	; 0x2b
    1a24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_sendCmd+0x232>
    1a2c:	9c a7       	std	Y+44, r25	; 0x2c
    1a2e:	8b a7       	std	Y+43, r24	; 0x2b
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 e8       	ldi	r26, 0x80	; 128
    1a36:	bf e3       	ldi	r27, 0x3F	; 63
    1a38:	8f a3       	std	Y+39, r24	; 0x27
    1a3a:	98 a7       	std	Y+40, r25	; 0x28
    1a3c:	a9 a7       	std	Y+41, r26	; 0x29
    1a3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	6f a1       	ldd	r22, Y+39	; 0x27
    1a42:	78 a5       	ldd	r23, Y+40	; 0x28
    1a44:	89 a5       	ldd	r24, Y+41	; 0x29
    1a46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a ef       	ldi	r20, 0xFA	; 250
    1a4e:	54 e4       	ldi	r21, 0x44	; 68
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8b a3       	std	Y+35, r24	; 0x23
    1a5a:	9c a3       	std	Y+36, r25	; 0x24
    1a5c:	ad a3       	std	Y+37, r26	; 0x25
    1a5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a60:	6b a1       	ldd	r22, Y+35	; 0x23
    1a62:	7c a1       	ldd	r23, Y+36	; 0x24
    1a64:	8d a1       	ldd	r24, Y+37	; 0x25
    1a66:	9e a1       	ldd	r25, Y+38	; 0x26
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <LCD_sendCmd+0x28c>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9a a3       	std	Y+34, r25	; 0x22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <LCD_sendCmd+0x30a>
	else if (__tmp > 65535)
    1a82:	6b a1       	ldd	r22, Y+35	; 0x23
    1a84:	7c a1       	ldd	r23, Y+36	; 0x24
    1a86:	8d a1       	ldd	r24, Y+37	; 0x25
    1a88:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <LCD_sendCmd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <LCD_sendCmd+0x2ec>
    1ac4:	88 ec       	ldi	r24, 0xC8	; 200
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	98 a3       	std	Y+32, r25	; 0x20
    1aca:	8f 8f       	std	Y+31, r24	; 0x1f
    1acc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ace:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_sendCmd+0x2da>
    1ad4:	98 a3       	std	Y+32, r25	; 0x20
    1ad6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ada:	9a a1       	ldd	r25, Y+34	; 0x22
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <LCD_sendCmd+0x2ce>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <LCD_sendCmd+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6b a1       	ldd	r22, Y+35	; 0x23
    1aee:	7c a1       	ldd	r23, Y+36	; 0x24
    1af0:	8d a1       	ldd	r24, Y+37	; 0x25
    1af2:	9e a1       	ldd	r25, Y+38	; 0x26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	9e 8f       	std	Y+30, r25	; 0x1e
    1b06:	8d 8f       	std	Y+29, r24	; 0x1d
    1b08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_sendCmd+0x316>
    1b10:	9e 8f       	std	Y+30, r25	; 0x1e
    1b12:	8d 8f       	std	Y+29, r24	; 0x1d
		#endif

		_delay_ms(1);
	#else
	_delay_ms(1);
	LCD_DATA_PORT = cmd;
    1b14:	a5 e3       	ldi	r26, 0x35	; 53
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e9 5b       	subi	r30, 0xB9	; 185
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	8c 93       	st	X, r24
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e8       	ldi	r26, 0x80	; 128
    1b28:	bf e3       	ldi	r27, 0x3F	; 63
    1b2a:	89 8f       	std	Y+25, r24	; 0x19
    1b2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	69 8d       	ldd	r22, Y+25	; 0x19
    1b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8d 8b       	std	Y+21, r24	; 0x15
    1b4c:	9e 8b       	std	Y+22, r25	; 0x16
    1b4e:	af 8b       	std	Y+23, r26	; 0x17
    1b50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b52:	6d 89       	ldd	r22, Y+21	; 0x15
    1b54:	7e 89       	ldd	r23, Y+22	; 0x16
    1b56:	8f 89       	ldd	r24, Y+23	; 0x17
    1b58:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <LCD_sendCmd+0x37e>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9c 8b       	std	Y+20, r25	; 0x14
    1b70:	8b 8b       	std	Y+19, r24	; 0x13
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <LCD_sendCmd+0x3fc>
	else if (__tmp > 65535)
    1b74:	6d 89       	ldd	r22, Y+21	; 0x15
    1b76:	7e 89       	ldd	r23, Y+22	; 0x16
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <LCD_sendCmd+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <LCD_sendCmd+0x3de>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
    1bbe:	89 89       	ldd	r24, Y+17	; 0x11
    1bc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_sendCmd+0x3cc>
    1bc6:	9a 8b       	std	Y+18, r25	; 0x12
    1bc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8b 89       	ldd	r24, Y+19	; 0x13
    1bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9c 8b       	std	Y+20, r25	; 0x14
    1bd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <LCD_sendCmd+0x3c0>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <LCD_sendCmd+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6d 89       	ldd	r22, Y+21	; 0x15
    1be0:	7e 89       	ldd	r23, Y+22	; 0x16
    1be2:	8f 89       	ldd	r24, Y+23	; 0x17
    1be4:	98 8d       	ldd	r25, Y+24	; 0x18
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
    1bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfc:	98 89       	ldd	r25, Y+16	; 0x10
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_sendCmd+0x408>
    1c02:	98 8b       	std	Y+16, r25	; 0x10
    1c04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	#endif
	CLEAR_BIT(LCD_CTRL_PORT, LCD_EN);
    1c06:	a2 e3       	ldi	r26, 0x32	; 50
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e2 e3       	ldi	r30, 0x32	; 50
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 7b       	andi	r24, 0xBF	; 191
    1c12:	8c 93       	st	X, r24
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e8       	ldi	r26, 0x80	; 128
    1c1a:	bf e3       	ldi	r27, 0x3F	; 63
    1c1c:	8b 87       	std	Y+11, r24	; 0x0b
    1c1e:	9c 87       	std	Y+12, r25	; 0x0c
    1c20:	ad 87       	std	Y+13, r26	; 0x0d
    1c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a ef       	ldi	r20, 0xFA	; 250
    1c32:	54 e4       	ldi	r21, 0x44	; 68
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f 83       	std	Y+7, r24	; 0x07
    1c3e:	98 87       	std	Y+8, r25	; 0x08
    1c40:	a9 87       	std	Y+9, r26	; 0x09
    1c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <LCD_sendCmd+0x470>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	3f c0       	rjmp	.+126    	; 0x1ce4 <LCD_sendCmd+0x4ee>
	else if (__tmp > 65535)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	4c f5       	brge	.+82     	; 0x1cd0 <LCD_sendCmd+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <LCD_sendCmd+0x4d0>
    1ca8:	88 ec       	ldi	r24, 0xC8	; 200
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_sendCmd+0x4be>
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <LCD_sendCmd+0x4b2>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <LCD_sendCmd+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_sendCmd+0x4fa>
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1cf8:	c9 5b       	subi	r28, 0xB9	; 185
    1cfa:	df 4f       	sbci	r29, 0xFF	; 255
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	08 95       	ret

00001d10 <LCD_putCharacter>:

void LCD_putCharacter(const unsigned char ch)
{
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	c7 54       	subi	r28, 0x47	; 71
    1d1e:	d0 40       	sbci	r29, 0x00	; 0
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e9 5b       	subi	r30, 0xB9	; 185
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT, LCD_RS);
    1d32:	a2 e3       	ldi	r26, 0x32	; 50
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e2 e3       	ldi	r30, 0x32	; 50
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 61       	ori	r24, 0x10	; 16
    1d3e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RW);
    1d40:	a2 e3       	ldi	r26, 0x32	; 50
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e2 e3       	ldi	r30, 0x32	; 50
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8f 7d       	andi	r24, 0xDF	; 223
    1d4c:	8c 93       	st	X, r24
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ed 5b       	subi	r30, 0xBD	; 189
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e8       	ldi	r26, 0x80	; 128
    1d5a:	bf e3       	ldi	r27, 0x3F	; 63
    1d5c:	80 83       	st	Z, r24
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	a2 83       	std	Z+2, r26	; 0x02
    1d62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	8e 01       	movw	r16, r28
    1d66:	01 5c       	subi	r16, 0xC1	; 193
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ed 5b       	subi	r30, 0xBD	; 189
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a ef       	ldi	r20, 0xFA	; 250
    1d7e:	54 e4       	ldi	r21, 0x44	; 68
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	80 83       	st	Z, r24
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	a2 83       	std	Z+2, r26	; 0x02
    1d90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d92:	fe 01       	movw	r30, r28
    1d94:	ff 96       	adiw	r30, 0x3f	; 63
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	5f e3       	ldi	r21, 0x3F	; 63
    1da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1daa:	88 23       	and	r24, r24
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <LCD_putCharacter+0xa8>
		__ticks = 1;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9e af       	std	Y+62, r25	; 0x3e
    1db4:	8d af       	std	Y+61, r24	; 0x3d
    1db6:	46 c0       	rjmp	.+140    	; 0x1e44 <LCD_putCharacter+0x134>
	else if (__tmp > 65535)
    1db8:	fe 01       	movw	r30, r28
    1dba:	ff 96       	adiw	r30, 0x3f	; 63
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	64 f5       	brge	.+88     	; 0x1e2c <LCD_putCharacter+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ed 5b       	subi	r30, 0xBD	; 189
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e af       	std	Y+62, r25	; 0x3e
    1e00:	8d af       	std	Y+61, r24	; 0x3d
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <LCD_putCharacter+0x112>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9c af       	std	Y+60, r25	; 0x3c
    1e0a:	8b af       	std	Y+59, r24	; 0x3b
    1e0c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e0e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_putCharacter+0x100>
    1e14:	9c af       	std	Y+60, r25	; 0x3c
    1e16:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9e af       	std	Y+62, r25	; 0x3e
    1e20:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <LCD_putCharacter+0xf4>
    1e2a:	16 c0       	rjmp	.+44     	; 0x1e58 <LCD_putCharacter+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	ff 96       	adiw	r30, 0x3f	; 63
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9e af       	std	Y+62, r25	; 0x3e
    1e42:	8d af       	std	Y+61, r24	; 0x3d
    1e44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e48:	9a af       	std	Y+58, r25	; 0x3a
    1e4a:	89 af       	std	Y+57, r24	; 0x39
    1e4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_putCharacter+0x140>
    1e54:	9a af       	std	Y+58, r25	; 0x3a
    1e56:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, LCD_EN);
    1e58:	a2 e3       	ldi	r26, 0x32	; 50
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e2 e3       	ldi	r30, 0x32	; 50
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	80 64       	ori	r24, 0x40	; 64
    1e64:	8c 93       	st	X, r24
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e8       	ldi	r26, 0x80	; 128
    1e6c:	bf e3       	ldi	r27, 0x3F	; 63
    1e6e:	8d ab       	std	Y+53, r24	; 0x35
    1e70:	9e ab       	std	Y+54, r25	; 0x36
    1e72:	af ab       	std	Y+55, r26	; 0x37
    1e74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	6d a9       	ldd	r22, Y+53	; 0x35
    1e78:	7e a9       	ldd	r23, Y+54	; 0x36
    1e7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a ef       	ldi	r20, 0xFA	; 250
    1e84:	54 e4       	ldi	r21, 0x44	; 68
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	89 ab       	std	Y+49, r24	; 0x31
    1e90:	9a ab       	std	Y+50, r25	; 0x32
    1e92:	ab ab       	std	Y+51, r26	; 0x33
    1e94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e96:	69 a9       	ldd	r22, Y+49	; 0x31
    1e98:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <LCD_putCharacter+0x1a8>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	98 ab       	std	Y+48, r25	; 0x30
    1eb4:	8f a7       	std	Y+47, r24	; 0x2f
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <LCD_putCharacter+0x226>
	else if (__tmp > 65535)
    1eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eba:	7a a9       	ldd	r23, Y+50	; 0x32
    1ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <LCD_putCharacter+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	98 ab       	std	Y+48, r25	; 0x30
    1ef6:	8f a7       	std	Y+47, r24	; 0x2f
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <LCD_putCharacter+0x208>
    1efa:	88 ec       	ldi	r24, 0xC8	; 200
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9e a7       	std	Y+46, r25	; 0x2e
    1f00:	8d a7       	std	Y+45, r24	; 0x2d
    1f02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_putCharacter+0x1f6>
    1f0a:	9e a7       	std	Y+46, r25	; 0x2e
    1f0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f10:	98 a9       	ldd	r25, Y+48	; 0x30
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	98 ab       	std	Y+48, r25	; 0x30
    1f16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <LCD_putCharacter+0x1ea>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <LCD_putCharacter+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	69 a9       	ldd	r22, Y+49	; 0x31
    1f24:	7a a9       	ldd	r23, Y+50	; 0x32
    1f26:	8b a9       	ldd	r24, Y+51	; 0x33
    1f28:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	98 ab       	std	Y+48, r25	; 0x30
    1f34:	8f a7       	std	Y+47, r24	; 0x2f
    1f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f38:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3a:	9c a7       	std	Y+44, r25	; 0x2c
    1f3c:	8b a7       	std	Y+43, r24	; 0x2b
    1f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_putCharacter+0x232>
    1f46:	9c a7       	std	Y+44, r25	; 0x2c
    1f48:	8b a7       	std	Y+43, r24	; 0x2b
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 e8       	ldi	r26, 0x80	; 128
    1f50:	bf e3       	ldi	r27, 0x3F	; 63
    1f52:	8f a3       	std	Y+39, r24	; 0x27
    1f54:	98 a7       	std	Y+40, r25	; 0x28
    1f56:	a9 a7       	std	Y+41, r26	; 0x29
    1f58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a ef       	ldi	r20, 0xFA	; 250
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8b a3       	std	Y+35, r24	; 0x23
    1f74:	9c a3       	std	Y+36, r25	; 0x24
    1f76:	ad a3       	std	Y+37, r26	; 0x25
    1f78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <LCD_putCharacter+0x28c>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9a a3       	std	Y+34, r25	; 0x22
    1f98:	89 a3       	std	Y+33, r24	; 0x21
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <LCD_putCharacter+0x30a>
	else if (__tmp > 65535)
    1f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <LCD_putCharacter+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9a a3       	std	Y+34, r25	; 0x22
    1fda:	89 a3       	std	Y+33, r24	; 0x21
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_putCharacter+0x2ec>
    1fde:	88 ec       	ldi	r24, 0xC8	; 200
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	98 a3       	std	Y+32, r25	; 0x20
    1fe4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_putCharacter+0x2da>
    1fee:	98 a3       	std	Y+32, r25	; 0x20
    1ff0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <LCD_putCharacter+0x2ce>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <LCD_putCharacter+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6b a1       	ldd	r22, Y+35	; 0x23
    2008:	7c a1       	ldd	r23, Y+36	; 0x24
    200a:	8d a1       	ldd	r24, Y+37	; 0x25
    200c:	9e a1       	ldd	r25, Y+38	; 0x26
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9a a3       	std	Y+34, r25	; 0x22
    2018:	89 a3       	std	Y+33, r24	; 0x21
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	9e 8f       	std	Y+30, r25	; 0x1e
    2020:	8d 8f       	std	Y+29, r24	; 0x1d
    2022:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2024:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_putCharacter+0x316>
    202a:	9e 8f       	std	Y+30, r25	; 0x1e
    202c:	8d 8f       	std	Y+29, r24	; 0x1d
		#endif

		_delay_ms(1);
	#else
	_delay_ms(1);
	LCD_DATA_PORT = ch;
    202e:	a5 e3       	ldi	r26, 0x35	; 53
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	fe 01       	movw	r30, r28
    2034:	e9 5b       	subi	r30, 0xB9	; 185
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	8c 93       	st	X, r24
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e8       	ldi	r26, 0x80	; 128
    2042:	bf e3       	ldi	r27, 0x3F	; 63
    2044:	89 8f       	std	Y+25, r24	; 0x19
    2046:	9a 8f       	std	Y+26, r25	; 0x1a
    2048:	ab 8f       	std	Y+27, r26	; 0x1b
    204a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	69 8d       	ldd	r22, Y+25	; 0x19
    204e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8d 8b       	std	Y+21, r24	; 0x15
    2066:	9e 8b       	std	Y+22, r25	; 0x16
    2068:	af 8b       	std	Y+23, r26	; 0x17
    206a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    206c:	6d 89       	ldd	r22, Y+21	; 0x15
    206e:	7e 89       	ldd	r23, Y+22	; 0x16
    2070:	8f 89       	ldd	r24, Y+23	; 0x17
    2072:	98 8d       	ldd	r25, Y+24	; 0x18
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e8       	ldi	r20, 0x80	; 128
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2080:	88 23       	and	r24, r24
    2082:	2c f4       	brge	.+10     	; 0x208e <LCD_putCharacter+0x37e>
		__ticks = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9c 8b       	std	Y+20, r25	; 0x14
    208a:	8b 8b       	std	Y+19, r24	; 0x13
    208c:	3f c0       	rjmp	.+126    	; 0x210c <LCD_putCharacter+0x3fc>
	else if (__tmp > 65535)
    208e:	6d 89       	ldd	r22, Y+21	; 0x15
    2090:	7e 89       	ldd	r23, Y+22	; 0x16
    2092:	8f 89       	ldd	r24, Y+23	; 0x17
    2094:	98 8d       	ldd	r25, Y+24	; 0x18
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	4c f5       	brge	.+82     	; 0x20f8 <LCD_putCharacter+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	69 8d       	ldd	r22, Y+25	; 0x19
    20a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9c 8b       	std	Y+20, r25	; 0x14
    20cc:	8b 8b       	std	Y+19, r24	; 0x13
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <LCD_putCharacter+0x3de>
    20d0:	88 ec       	ldi	r24, 0xC8	; 200
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9a 8b       	std	Y+18, r25	; 0x12
    20d6:	89 8b       	std	Y+17, r24	; 0x11
    20d8:	89 89       	ldd	r24, Y+17	; 0x11
    20da:	9a 89       	ldd	r25, Y+18	; 0x12
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_putCharacter+0x3cc>
    20e0:	9a 8b       	std	Y+18, r25	; 0x12
    20e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	8b 89       	ldd	r24, Y+19	; 0x13
    20e6:	9c 89       	ldd	r25, Y+20	; 0x14
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9c 8b       	std	Y+20, r25	; 0x14
    20ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	8b 89       	ldd	r24, Y+19	; 0x13
    20f0:	9c 89       	ldd	r25, Y+20	; 0x14
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <LCD_putCharacter+0x3c0>
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <LCD_putCharacter+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	6d 89       	ldd	r22, Y+21	; 0x15
    20fa:	7e 89       	ldd	r23, Y+22	; 0x16
    20fc:	8f 89       	ldd	r24, Y+23	; 0x17
    20fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9c 8b       	std	Y+20, r25	; 0x14
    210a:	8b 8b       	std	Y+19, r24	; 0x13
    210c:	8b 89       	ldd	r24, Y+19	; 0x13
    210e:	9c 89       	ldd	r25, Y+20	; 0x14
    2110:	98 8b       	std	Y+16, r25	; 0x10
    2112:	8f 87       	std	Y+15, r24	; 0x0f
    2114:	8f 85       	ldd	r24, Y+15	; 0x0f
    2116:	98 89       	ldd	r25, Y+16	; 0x10
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_putCharacter+0x408>
    211c:	98 8b       	std	Y+16, r25	; 0x10
    211e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	#endif
	CLEAR_BIT(LCD_CTRL_PORT, LCD_EN);
    2120:	a2 e3       	ldi	r26, 0x32	; 50
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e2 e3       	ldi	r30, 0x32	; 50
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8f 7b       	andi	r24, 0xBF	; 191
    212c:	8c 93       	st	X, r24
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e8       	ldi	r26, 0x80	; 128
    2134:	bf e3       	ldi	r27, 0x3F	; 63
    2136:	8b 87       	std	Y+11, r24	; 0x0b
    2138:	9c 87       	std	Y+12, r25	; 0x0c
    213a:	ad 87       	std	Y+13, r26	; 0x0d
    213c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8f 83       	std	Y+7, r24	; 0x07
    2158:	98 87       	std	Y+8, r25	; 0x08
    215a:	a9 87       	std	Y+9, r26	; 0x09
    215c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <LCD_putCharacter+0x470>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <LCD_putCharacter+0x4ee>
	else if (__tmp > 65535)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <LCD_putCharacter+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6b 85       	ldd	r22, Y+11	; 0x0b
    219a:	7c 85       	ldd	r23, Y+12	; 0x0c
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <LCD_putCharacter+0x4d0>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_putCharacter+0x4be>
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <LCD_putCharacter+0x4b2>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <LCD_putCharacter+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_putCharacter+0x4fa>
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2212:	c9 5b       	subi	r28, 0xB9	; 185
    2214:	df 4f       	sbci	r29, 0xFF	; 255
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	08 95       	ret

0000222a <_LCD_putCharacter>:

void _LCD_putCharacter(const unsigned char ch)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	e9 97       	sbiw	r28, 0x39	; 57
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT, LCD_RS);
    2240:	a2 e3       	ldi	r26, 0x32	; 50
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e2 e3       	ldi	r30, 0x32	; 50
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 61       	ori	r24, 0x10	; 16
    224c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RW);
    224e:	a2 e3       	ldi	r26, 0x32	; 50
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e2 e3       	ldi	r30, 0x32	; 50
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8f 7d       	andi	r24, 0xDF	; 223
    225a:	8c 93       	st	X, r24
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	8d ab       	std	Y+53, r24	; 0x35
    2266:	9e ab       	std	Y+54, r25	; 0x36
    2268:	af ab       	std	Y+55, r26	; 0x37
    226a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6d a9       	ldd	r22, Y+53	; 0x35
    226e:	7e a9       	ldd	r23, Y+54	; 0x36
    2270:	8f a9       	ldd	r24, Y+55	; 0x37
    2272:	98 ad       	ldd	r25, Y+56	; 0x38
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	89 ab       	std	Y+49, r24	; 0x31
    2286:	9a ab       	std	Y+50, r25	; 0x32
    2288:	ab ab       	std	Y+51, r26	; 0x33
    228a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    228c:	69 a9       	ldd	r22, Y+49	; 0x31
    228e:	7a a9       	ldd	r23, Y+50	; 0x32
    2290:	8b a9       	ldd	r24, Y+51	; 0x33
    2292:	9c a9       	ldd	r25, Y+52	; 0x34
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <_LCD_putCharacter+0x84>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	98 ab       	std	Y+48, r25	; 0x30
    22aa:	8f a7       	std	Y+47, r24	; 0x2f
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <_LCD_putCharacter+0x102>
	else if (__tmp > 65535)
    22ae:	69 a9       	ldd	r22, Y+49	; 0x31
    22b0:	7a a9       	ldd	r23, Y+50	; 0x32
    22b2:	8b a9       	ldd	r24, Y+51	; 0x33
    22b4:	9c a9       	ldd	r25, Y+52	; 0x34
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <_LCD_putCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6d a9       	ldd	r22, Y+53	; 0x35
    22c8:	7e a9       	ldd	r23, Y+54	; 0x36
    22ca:	8f a9       	ldd	r24, Y+55	; 0x37
    22cc:	98 ad       	ldd	r25, Y+56	; 0x38
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	98 ab       	std	Y+48, r25	; 0x30
    22ec:	8f a7       	std	Y+47, r24	; 0x2f
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <_LCD_putCharacter+0xe4>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9e a7       	std	Y+46, r25	; 0x2e
    22f6:	8d a7       	std	Y+45, r24	; 0x2d
    22f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <_LCD_putCharacter+0xd2>
    2300:	9e a7       	std	Y+46, r25	; 0x2e
    2302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8f a5       	ldd	r24, Y+47	; 0x2f
    2306:	98 a9       	ldd	r25, Y+48	; 0x30
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	98 ab       	std	Y+48, r25	; 0x30
    230c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2310:	98 a9       	ldd	r25, Y+48	; 0x30
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <_LCD_putCharacter+0xc6>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <_LCD_putCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	69 a9       	ldd	r22, Y+49	; 0x31
    231a:	7a a9       	ldd	r23, Y+50	; 0x32
    231c:	8b a9       	ldd	r24, Y+51	; 0x33
    231e:	9c a9       	ldd	r25, Y+52	; 0x34
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	8f a5       	ldd	r24, Y+47	; 0x2f
    232e:	98 a9       	ldd	r25, Y+48	; 0x30
    2330:	9c a7       	std	Y+44, r25	; 0x2c
    2332:	8b a7       	std	Y+43, r24	; 0x2b
    2334:	8b a5       	ldd	r24, Y+43	; 0x2b
    2336:	9c a5       	ldd	r25, Y+44	; 0x2c
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <_LCD_putCharacter+0x10e>
    233c:	9c a7       	std	Y+44, r25	; 0x2c
    233e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, LCD_EN);
    2340:	a2 e3       	ldi	r26, 0x32	; 50
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e2 e3       	ldi	r30, 0x32	; 50
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	80 64       	ori	r24, 0x40	; 64
    234c:	8c 93       	st	X, r24
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e8       	ldi	r26, 0x80	; 128
    2354:	bf e3       	ldi	r27, 0x3F	; 63
    2356:	8f a3       	std	Y+39, r24	; 0x27
    2358:	98 a7       	std	Y+40, r25	; 0x28
    235a:	a9 a7       	std	Y+41, r26	; 0x29
    235c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6f a1       	ldd	r22, Y+39	; 0x27
    2360:	78 a5       	ldd	r23, Y+40	; 0x28
    2362:	89 a5       	ldd	r24, Y+41	; 0x29
    2364:	9a a5       	ldd	r25, Y+42	; 0x2a
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a ef       	ldi	r20, 0xFA	; 250
    236c:	54 e4       	ldi	r21, 0x44	; 68
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8b a3       	std	Y+35, r24	; 0x23
    2378:	9c a3       	std	Y+36, r25	; 0x24
    237a:	ad a3       	std	Y+37, r26	; 0x25
    237c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    237e:	6b a1       	ldd	r22, Y+35	; 0x23
    2380:	7c a1       	ldd	r23, Y+36	; 0x24
    2382:	8d a1       	ldd	r24, Y+37	; 0x25
    2384:	9e a1       	ldd	r25, Y+38	; 0x26
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <_LCD_putCharacter+0x176>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9a a3       	std	Y+34, r25	; 0x22
    239c:	89 a3       	std	Y+33, r24	; 0x21
    239e:	3f c0       	rjmp	.+126    	; 0x241e <_LCD_putCharacter+0x1f4>
	else if (__tmp > 65535)
    23a0:	6b a1       	ldd	r22, Y+35	; 0x23
    23a2:	7c a1       	ldd	r23, Y+36	; 0x24
    23a4:	8d a1       	ldd	r24, Y+37	; 0x25
    23a6:	9e a1       	ldd	r25, Y+38	; 0x26
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <_LCD_putCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6f a1       	ldd	r22, Y+39	; 0x27
    23ba:	78 a5       	ldd	r23, Y+40	; 0x28
    23bc:	89 a5       	ldd	r24, Y+41	; 0x29
    23be:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9a a3       	std	Y+34, r25	; 0x22
    23de:	89 a3       	std	Y+33, r24	; 0x21
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <_LCD_putCharacter+0x1d6>
    23e2:	88 ec       	ldi	r24, 0xC8	; 200
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	98 a3       	std	Y+32, r25	; 0x20
    23e8:	8f 8f       	std	Y+31, r24	; 0x1f
    23ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ec:	98 a1       	ldd	r25, Y+32	; 0x20
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <_LCD_putCharacter+0x1c4>
    23f2:	98 a3       	std	Y+32, r25	; 0x20
    23f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	89 a1       	ldd	r24, Y+33	; 0x21
    23f8:	9a a1       	ldd	r25, Y+34	; 0x22
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9a a3       	std	Y+34, r25	; 0x22
    23fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	89 a1       	ldd	r24, Y+33	; 0x21
    2402:	9a a1       	ldd	r25, Y+34	; 0x22
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <_LCD_putCharacter+0x1b8>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <_LCD_putCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6b a1       	ldd	r22, Y+35	; 0x23
    240c:	7c a1       	ldd	r23, Y+36	; 0x24
    240e:	8d a1       	ldd	r24, Y+37	; 0x25
    2410:	9e a1       	ldd	r25, Y+38	; 0x26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9a a3       	std	Y+34, r25	; 0x22
    241c:	89 a3       	std	Y+33, r24	; 0x21
    241e:	89 a1       	ldd	r24, Y+33	; 0x21
    2420:	9a a1       	ldd	r25, Y+34	; 0x22
    2422:	9e 8f       	std	Y+30, r25	; 0x1e
    2424:	8d 8f       	std	Y+29, r24	; 0x1d
    2426:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2428:	9e 8d       	ldd	r25, Y+30	; 0x1e
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <_LCD_putCharacter+0x200>
    242e:	9e 8f       	std	Y+30, r25	; 0x1e
    2430:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = ch;
    2432:	e5 e3       	ldi	r30, 0x35	; 53
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	89 ad       	ldd	r24, Y+57	; 0x39
    2438:	80 83       	st	Z, r24
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e8       	ldi	r26, 0x80	; 128
    2440:	bf e3       	ldi	r27, 0x3F	; 63
    2442:	89 8f       	std	Y+25, r24	; 0x19
    2444:	9a 8f       	std	Y+26, r25	; 0x1a
    2446:	ab 8f       	std	Y+27, r26	; 0x1b
    2448:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244a:	69 8d       	ldd	r22, Y+25	; 0x19
    244c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a ef       	ldi	r20, 0xFA	; 250
    2458:	54 e4       	ldi	r21, 0x44	; 68
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8d 8b       	std	Y+21, r24	; 0x15
    2464:	9e 8b       	std	Y+22, r25	; 0x16
    2466:	af 8b       	std	Y+23, r26	; 0x17
    2468:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	2c f4       	brge	.+10     	; 0x248c <_LCD_putCharacter+0x262>
		__ticks = 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	3f c0       	rjmp	.+126    	; 0x250a <_LCD_putCharacter+0x2e0>
	else if (__tmp > 65535)
    248c:	6d 89       	ldd	r22, Y+21	; 0x15
    248e:	7e 89       	ldd	r23, Y+22	; 0x16
    2490:	8f 89       	ldd	r24, Y+23	; 0x17
    2492:	98 8d       	ldd	r25, Y+24	; 0x18
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	3f ef       	ldi	r19, 0xFF	; 255
    2498:	4f e7       	ldi	r20, 0x7F	; 127
    249a:	57 e4       	ldi	r21, 0x47	; 71
    249c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a0:	18 16       	cp	r1, r24
    24a2:	4c f5       	brge	.+82     	; 0x24f6 <_LCD_putCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a4:	69 8d       	ldd	r22, Y+25	; 0x19
    24a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <_LCD_putCharacter+0x2c2>
    24ce:	88 ec       	ldi	r24, 0xC8	; 200
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9a 8b       	std	Y+18, r25	; 0x12
    24d4:	89 8b       	std	Y+17, r24	; 0x11
    24d6:	89 89       	ldd	r24, Y+17	; 0x11
    24d8:	9a 89       	ldd	r25, Y+18	; 0x12
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <_LCD_putCharacter+0x2b0>
    24de:	9a 8b       	std	Y+18, r25	; 0x12
    24e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	9c 8b       	std	Y+20, r25	; 0x14
    24ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	9c 89       	ldd	r25, Y+20	; 0x14
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	69 f7       	brne	.-38     	; 0x24ce <_LCD_putCharacter+0x2a4>
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <_LCD_putCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9c 8b       	std	Y+20, r25	; 0x14
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	8b 89       	ldd	r24, Y+19	; 0x13
    250c:	9c 89       	ldd	r25, Y+20	; 0x14
    250e:	98 8b       	std	Y+16, r25	; 0x10
    2510:	8f 87       	std	Y+15, r24	; 0x0f
    2512:	8f 85       	ldd	r24, Y+15	; 0x0f
    2514:	98 89       	ldd	r25, Y+16	; 0x10
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <_LCD_putCharacter+0x2ec>
    251a:	98 8b       	std	Y+16, r25	; 0x10
    251c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, LCD_EN);
    251e:	a2 e3       	ldi	r26, 0x32	; 50
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e2 e3       	ldi	r30, 0x32	; 50
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8f 7b       	andi	r24, 0xBF	; 191
    252a:	8c 93       	st	X, r24
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a0 e8       	ldi	r26, 0x80	; 128
    2532:	bf e3       	ldi	r27, 0x3F	; 63
    2534:	8b 87       	std	Y+11, r24	; 0x0b
    2536:	9c 87       	std	Y+12, r25	; 0x0c
    2538:	ad 87       	std	Y+13, r26	; 0x0d
    253a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	6b 85       	ldd	r22, Y+11	; 0x0b
    253e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2540:	8d 85       	ldd	r24, Y+13	; 0x0d
    2542:	9e 85       	ldd	r25, Y+14	; 0x0e
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a ef       	ldi	r20, 0xFA	; 250
    254a:	54 e4       	ldi	r21, 0x44	; 68
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8f 83       	std	Y+7, r24	; 0x07
    2556:	98 87       	std	Y+8, r25	; 0x08
    2558:	a9 87       	std	Y+9, r26	; 0x09
    255a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255c:	6f 81       	ldd	r22, Y+7	; 0x07
    255e:	78 85       	ldd	r23, Y+8	; 0x08
    2560:	89 85       	ldd	r24, Y+9	; 0x09
    2562:	9a 85       	ldd	r25, Y+10	; 0x0a
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <_LCD_putCharacter+0x354>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <_LCD_putCharacter+0x3d2>
	else if (__tmp > 65535)
    257e:	6f 81       	ldd	r22, Y+7	; 0x07
    2580:	78 85       	ldd	r23, Y+8	; 0x08
    2582:	89 85       	ldd	r24, Y+9	; 0x09
    2584:	9a 85       	ldd	r25, Y+10	; 0x0a
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <_LCD_putCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	6b 85       	ldd	r22, Y+11	; 0x0b
    2598:	7c 85       	ldd	r23, Y+12	; 0x0c
    259a:	8d 85       	ldd	r24, Y+13	; 0x0d
    259c:	9e 85       	ldd	r25, Y+14	; 0x0e
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
    25be:	0f c0       	rjmp	.+30     	; 0x25de <_LCD_putCharacter+0x3b4>
    25c0:	88 ec       	ldi	r24, 0xC8	; 200
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9c 83       	std	Y+4, r25	; 0x04
    25c6:	8b 83       	std	Y+3, r24	; 0x03
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <_LCD_putCharacter+0x3a2>
    25d0:	9c 83       	std	Y+4, r25	; 0x04
    25d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <_LCD_putCharacter+0x396>
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <_LCD_putCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ea:	78 85       	ldd	r23, Y+8	; 0x08
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <_LCD_putCharacter+0x3de>
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2610:	e9 96       	adiw	r28, 0x39	; 57
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <LCD_putString>:

void LCD_putString(const char *str)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <LCD_putString+0x6>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	0a c0       	rjmp	.+20     	; 0x2646 <LCD_putString+0x24>
	while(*str != '\0'){
		LCD_putCharacter(*str);
    2632:	e9 81       	ldd	r30, Y+1	; 0x01
    2634:	fa 81       	ldd	r31, Y+2	; 0x02
    2636:	80 81       	ld	r24, Z
    2638:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_putCharacter>
		str++;
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void LCD_putString(const char *str)
{
	while(*str != '\0'){
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	80 81       	ld	r24, Z
    264c:	88 23       	and	r24, r24
    264e:	89 f7       	brne	.-30     	; 0x2632 <LCD_putString+0x10>
		LCD_putCharacter(*str);
		str++;
	}
}
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <LCD_clearScreen>:

void LCD_clearScreen()
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCmd(CLEAR_COMMAND);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCmd>
}
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <LCD_goToRowColumn+0x6>
    2674:	00 d0       	rcall	.+0      	; 0x2676 <LCD_goToRowColumn+0x8>
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	8a 83       	std	Y+2, r24	; 0x02
    267e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

		/* first of all calculate the required address */
		switch(row)
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	3d 83       	std	Y+5, r19	; 0x05
    2688:	2c 83       	std	Y+4, r18	; 0x04
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	9d 81       	ldd	r25, Y+5	; 0x05
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	91 05       	cpc	r25, r1
    2692:	c1 f0       	breq	.+48     	; 0x26c4 <LCD_goToRowColumn+0x56>
    2694:	2c 81       	ldd	r18, Y+4	; 0x04
    2696:	3d 81       	ldd	r19, Y+5	; 0x05
    2698:	22 30       	cpi	r18, 0x02	; 2
    269a:	31 05       	cpc	r19, r1
    269c:	2c f4       	brge	.+10     	; 0x26a8 <LCD_goToRowColumn+0x3a>
    269e:	8c 81       	ldd	r24, Y+4	; 0x04
    26a0:	9d 81       	ldd	r25, Y+5	; 0x05
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	61 f0       	breq	.+24     	; 0x26be <LCD_goToRowColumn+0x50>
    26a6:	19 c0       	rjmp	.+50     	; 0x26da <LCD_goToRowColumn+0x6c>
    26a8:	2c 81       	ldd	r18, Y+4	; 0x04
    26aa:	3d 81       	ldd	r19, Y+5	; 0x05
    26ac:	22 30       	cpi	r18, 0x02	; 2
    26ae:	31 05       	cpc	r19, r1
    26b0:	69 f0       	breq	.+26     	; 0x26cc <LCD_goToRowColumn+0x5e>
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	9d 81       	ldd	r25, Y+5	; 0x05
    26b6:	83 30       	cpi	r24, 0x03	; 3
    26b8:	91 05       	cpc	r25, r1
    26ba:	61 f0       	breq	.+24     	; 0x26d4 <LCD_goToRowColumn+0x66>
    26bc:	0e c0       	rjmp	.+28     	; 0x26da <LCD_goToRowColumn+0x6c>
		{
			case 0:
					Address=col;
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	0b c0       	rjmp	.+22     	; 0x26da <LCD_goToRowColumn+0x6c>
					break;
			case 1:
					Address=col+0x40;
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	80 5c       	subi	r24, 0xC0	; 192
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	07 c0       	rjmp	.+14     	; 0x26da <LCD_goToRowColumn+0x6c>
					break;
			case 2:
					Address=col+0x10;
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	80 5f       	subi	r24, 0xF0	; 240
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <LCD_goToRowColumn+0x6c>
					break;
			case 3:
					Address=col+0x50;
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	80 5b       	subi	r24, 0xB0	; 176
    26d8:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
		/* to write to a specific address in the LCD
		 * we need to apply the corresponding command 0b10000000+Address */
		LCD_sendCmd(Address | SET_CURSOR_LOCATION);
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	80 68       	ori	r24, 0x80	; 128
    26de:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCmd>
}
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <LCD_intToStr>:

void LCD_intToStr(const uint16 n)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	28 97       	sbiw	r28, 0x08	; 8
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	98 87       	std	Y+8, r25	; 0x08
    2708:	8f 83       	std	Y+7, r24	; 0x07
	char str[5] = {'\0'};
    270a:	85 e0       	ldi	r24, 0x05	; 5
    270c:	fe 01       	movw	r30, r28
    270e:	32 96       	adiw	r30, 0x02	; 2
    2710:	df 01       	movw	r26, r30
    2712:	98 2f       	mov	r25, r24
    2714:	1d 92       	st	X+, r1
    2716:	9a 95       	dec	r25
    2718:	e9 f7       	brne	.-6      	; 0x2714 <LCD_intToStr+0x22>

	uint8 i = 0;
    271a:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < 5; i++)str[i] = ' ';
    271c:	19 82       	std	Y+1, r1	; 0x01
    271e:	0d c0       	rjmp	.+26     	; 0x273a <LCD_intToStr+0x48>
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	ce 01       	movw	r24, r28
    2728:	02 96       	adiw	r24, 0x02	; 2
    272a:	fc 01       	movw	r30, r24
    272c:	e2 0f       	add	r30, r18
    272e:	f3 1f       	adc	r31, r19
    2730:	80 e2       	ldi	r24, 0x20	; 32
    2732:	80 83       	st	Z, r24
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	85 30       	cpi	r24, 0x05	; 5
    273e:	80 f3       	brcs	.-32     	; 0x2720 <LCD_intToStr+0x2e>
	sprintf(str, "%04u", n);/*read 10 bits only*/
    2740:	00 d0       	rcall	.+0      	; 0x2742 <LCD_intToStr+0x50>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <LCD_intToStr+0x52>
    2744:	00 d0       	rcall	.+0      	; 0x2746 <LCD_intToStr+0x54>
    2746:	ed b7       	in	r30, 0x3d	; 61
    2748:	fe b7       	in	r31, 0x3e	; 62
    274a:	31 96       	adiw	r30, 0x01	; 1
    274c:	ce 01       	movw	r24, r28
    274e:	02 96       	adiw	r24, 0x02	; 2
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	8e ed       	ldi	r24, 0xDE	; 222
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	93 83       	std	Z+3, r25	; 0x03
    275a:	82 83       	std	Z+2, r24	; 0x02
    275c:	8f 81       	ldd	r24, Y+7	; 0x07
    275e:	98 85       	ldd	r25, Y+8	; 0x08
    2760:	95 83       	std	Z+5, r25	; 0x05
    2762:	84 83       	std	Z+4, r24	; 0x04
    2764:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sprintf>
    2768:	ad b7       	in	r26, 0x3d	; 61
    276a:	be b7       	in	r27, 0x3e	; 62
    276c:	16 96       	adiw	r26, 0x06	; 6
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	be bf       	out	0x3e, r27	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	ad bf       	out	0x3d, r26	; 61
	LCD_putString(str);
    2778:	ce 01       	movw	r24, r28
    277a:	02 96       	adiw	r24, 0x02	; 2
    277c:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_putString>
}
    2780:	28 96       	adiw	r28, 0x08	; 8
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <main>:

#include "hmi.h"
#include <stdlib.h>

int main()
{
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	0f 92       	push	r0
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
	CONTROL_COMMAND control_cmd = NEW_PASS;
    279c:	19 82       	std	Y+1, r1	; 0x01

	HMI_init();
    279e:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_init>
	sei();
    27a2:	78 94       	sei

	while(1){
		control_cmd = HMI_recieveCmd();
    27a4:	0e 94 12 06 	call	0xc24	; 0xc24 <HMI_recieveCmd>
    27a8:	89 83       	std	Y+1, r24	; 0x01
		HMI_execCmd(control_cmd);
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	0e 94 1b 06 	call	0xc36	; 0xc36 <HMI_execCmd>
    27b0:	f9 cf       	rjmp	.-14     	; 0x27a4 <main+0x12>

000027b2 <__vector_8>:

/*******************************************************************************
 *                      ISRs				                                   *
 *******************************************************************************/

ISR(TIMER1_OVF_vect){
    27b2:	1f 92       	push	r1
    27b4:	0f 92       	push	r0
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	0f 92       	push	r0
    27ba:	11 24       	eor	r1, r1
    27bc:	2f 93       	push	r18
    27be:	3f 93       	push	r19
    27c0:	4f 93       	push	r20
    27c2:	5f 93       	push	r21
    27c4:	6f 93       	push	r22
    27c6:	7f 93       	push	r23
    27c8:	8f 93       	push	r24
    27ca:	9f 93       	push	r25
    27cc:	af 93       	push	r26
    27ce:	bf 93       	push	r27
    27d0:	ef 93       	push	r30
    27d2:	ff 93       	push	r31
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1NormalCallBackPtr != NULL)
    27dc:	80 91 fb 00 	lds	r24, 0x00FB
    27e0:	90 91 fc 00 	lds	r25, 0x00FC
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	29 f0       	breq	.+10     	; 0x27f2 <__vector_8+0x40>
	{
		(*g_Timer1NormalCallBackPtr)();
    27e8:	e0 91 fb 00 	lds	r30, 0x00FB
    27ec:	f0 91 fc 00 	lds	r31, 0x00FC
    27f0:	09 95       	icall
	}
}
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	ff 91       	pop	r31
    27f8:	ef 91       	pop	r30
    27fa:	bf 91       	pop	r27
    27fc:	af 91       	pop	r26
    27fe:	9f 91       	pop	r25
    2800:	8f 91       	pop	r24
    2802:	7f 91       	pop	r23
    2804:	6f 91       	pop	r22
    2806:	5f 91       	pop	r21
    2808:	4f 91       	pop	r20
    280a:	3f 91       	pop	r19
    280c:	2f 91       	pop	r18
    280e:	0f 90       	pop	r0
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	0f 90       	pop	r0
    2814:	1f 90       	pop	r1
    2816:	18 95       	reti

00002818 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2818:	1f 92       	push	r1
    281a:	0f 92       	push	r0
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	0f 92       	push	r0
    2820:	11 24       	eor	r1, r1
    2822:	2f 93       	push	r18
    2824:	3f 93       	push	r19
    2826:	4f 93       	push	r20
    2828:	5f 93       	push	r21
    282a:	6f 93       	push	r22
    282c:	7f 93       	push	r23
    282e:	8f 93       	push	r24
    2830:	9f 93       	push	r25
    2832:	af 93       	push	r26
    2834:	bf 93       	push	r27
    2836:	ef 93       	push	r30
    2838:	ff 93       	push	r31
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0xFF;
    2842:	e8 e3       	ldi	r30, 0x38	; 56
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	8f ef       	ldi	r24, 0xFF	; 255
    2848:	80 83       	st	Z, r24
	if(g_Timer1CTCCallBackPtr != NULL)
    284a:	80 91 fd 00 	lds	r24, 0x00FD
    284e:	90 91 fe 00 	lds	r25, 0x00FE
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	29 f0       	breq	.+10     	; 0x2860 <__vector_6+0x48>
	{
		(*g_Timer1CTCCallBackPtr)();
    2856:	e0 91 fd 00 	lds	r30, 0x00FD
    285a:	f0 91 fe 00 	lds	r31, 0x00FE
    285e:	09 95       	icall
	}
}
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	ff 91       	pop	r31
    2866:	ef 91       	pop	r30
    2868:	bf 91       	pop	r27
    286a:	af 91       	pop	r26
    286c:	9f 91       	pop	r25
    286e:	8f 91       	pop	r24
    2870:	7f 91       	pop	r23
    2872:	6f 91       	pop	r22
    2874:	5f 91       	pop	r21
    2876:	4f 91       	pop	r20
    2878:	3f 91       	pop	r19
    287a:	2f 91       	pop	r18
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	0f 90       	pop	r0
    2882:	1f 90       	pop	r1
    2884:	18 95       	reti

00002886 <Timer1_init>:


/*
 * Function responsible for initializing Timer1.
 */
void Timer1_init(TIMER1_CONFIG *timer1_config){
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	00 d0       	rcall	.+0      	; 0x288c <Timer1_init+0x6>
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = timer1_config->init_value;
    2894:	ac e4       	ldi	r26, 0x4C	; 76
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e9 81       	ldd	r30, Y+1	; 0x01
    289a:	fa 81       	ldd	r31, Y+2	; 0x02
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	11 96       	adiw	r26, 0x01	; 1
    28a2:	9c 93       	st	X, r25
    28a4:	8e 93       	st	-X, r24
	OCR1A = timer1_config->compare_value;
    28a6:	aa e4       	ldi	r26, 0x4A	; 74
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	84 81       	ldd	r24, Z+4	; 0x04
    28b0:	95 81       	ldd	r25, Z+5	; 0x05
    28b2:	11 96       	adiw	r26, 0x01	; 1
    28b4:	9c 93       	st	X, r25
    28b6:	8e 93       	st	-X, r24

	if(timer1_config->mode == CTC){
    28b8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ba:	fa 81       	ldd	r31, Y+2	; 0x02
    28bc:	80 81       	ld	r24, Z
    28be:	88 30       	cpi	r24, 0x08	; 8
    28c0:	61 f4       	brne	.+24     	; 0x28da <Timer1_init+0x54>
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    28c2:	a9 e5       	ldi	r26, 0x59	; 89
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e9 e5       	ldi	r30, 0x59	; 89
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	80 61       	ori	r24, 0x10	; 16
    28ce:	8c 93       	st	X, r24
		TCCR1B = (1<<WGM12); /*select compare mode*/
    28d0:	ee e4       	ldi	r30, 0x4E	; 78
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	88 e0       	ldi	r24, 0x08	; 8
    28d6:	80 83       	st	Z, r24
    28d8:	07 c0       	rjmp	.+14     	; 0x28e8 <Timer1_init+0x62>
	}else{
		TIMSK |= (1<<TOIE1);
    28da:	a9 e5       	ldi	r26, 0x59	; 89
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e9 e5       	ldi	r30, 0x59	; 89
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	84 60       	ori	r24, 0x04	; 4
    28e6:	8c 93       	st	X, r24
	}

	TCCR1B |= (timer1_config->clock);
    28e8:	ae e4       	ldi	r26, 0x4E	; 78
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	ee e4       	ldi	r30, 0x4E	; 78
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	90 81       	ld	r25, Z
    28f2:	e9 81       	ldd	r30, Y+1	; 0x01
    28f4:	fa 81       	ldd	r31, Y+2	; 0x02
    28f6:	81 81       	ldd	r24, Z+1	; 0x01
    28f8:	89 2b       	or	r24, r25
    28fa:	8c 93       	st	X, r24



}
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <Timer1_start>:
void Timer1_start(TIMER1_PRESCALER clock){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    2912:	ec e4       	ldi	r30, 0x4C	; 76
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	11 82       	std	Z+1, r1	; 0x01
    2918:	10 82       	st	Z, r1
	TCCR1B&=0XF8;
    291a:	ae e4       	ldi	r26, 0x4E	; 78
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	ee e4       	ldi	r30, 0x4E	; 78
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	88 7f       	andi	r24, 0xF8	; 248
    2926:	8c 93       	st	X, r24
	TCCR1B|=clock;
    2928:	ae e4       	ldi	r26, 0x4E	; 78
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	ee e4       	ldi	r30, 0x4E	; 78
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	90 81       	ld	r25, Z
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	89 2b       	or	r24, r25
    2936:	8c 93       	st	X, r24
}
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <Timer1_setCallBackNormal>:
void Timer1_setCallBackNormal(void(*a_ptr)(void))
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <Timer1_setCallBackNormal+0x6>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer1NormalCallBackPtr = a_ptr;
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	90 93 fc 00 	sts	0x00FC, r25
    2956:	80 93 fb 00 	sts	0x00FB, r24
}
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <Timer1_setCallBackCompare>:
void Timer1_setCallBackCompare(void(*a_ptr)(void))
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	00 d0       	rcall	.+0      	; 0x296a <Timer1_setCallBackCompare+0x6>
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer1CTCCallBackPtr = a_ptr;
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	90 93 fe 00 	sts	0x00FE, r25
    297a:	80 93 fd 00 	sts	0x00FD, r24
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <Timer1_Stop>:


void Timer1_Stop(void){
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(0X07);
    2990:	ae e4       	ldi	r26, 0x4E	; 78
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ee e4       	ldi	r30, 0x4E	; 78
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	88 7f       	andi	r24, 0xF8	; 248
    299c:	8c 93       	st	X, r24
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <Timer1_reset>:

void Timer1_reset(void){
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    29ac:	ec e4       	ldi	r30, 0x4C	; 76
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	11 82       	std	Z+1, r1	; 0x01
    29b2:	10 82       	st	Z, r1
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <Timer1_value>:


uint16 Timer1_value(void){
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    29c2:	ec e4       	ldi	r30, 0x4C	; 76
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
}
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_CONF_STRUCT * const uart_config)
{
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <UART_init+0xa>
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
	/*enable uart reception and transmission*/
	UCSRB = (1 << TXEN) | (1 << RXEN);
    29e2:	ea e2       	ldi	r30, 0x2A	; 42
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	88 e1       	ldi	r24, 0x18	; 24
    29e8:	80 83       	st	Z, r24

	/*double speed*/
	SET_BIT(UCSRA, U2X);
    29ea:	ab e2       	ldi	r26, 0x2B	; 43
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	eb e2       	ldi	r30, 0x2B	; 43
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	82 60       	ori	r24, 0x02	; 2
    29f6:	8c 93       	st	X, r24

	/* UCSZ1:0 = 11 For 8-bit data mode*/
	SET_BIT(UCSRC, URSEL);
    29f8:	a0 e4       	ldi	r26, 0x40	; 64
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e0 e4       	ldi	r30, 0x40	; 64
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	80 68       	ori	r24, 0x80	; 128
    2a04:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
    2a06:	a0 e4       	ldi	r26, 0x40	; 64
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e0 e4       	ldi	r30, 0x40	; 64
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	82 60       	ori	r24, 0x02	; 2
    2a12:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
    2a14:	a0 e4       	ldi	r26, 0x40	; 64
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e0 e4       	ldi	r30, 0x40	; 64
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	84 60       	ori	r24, 0x04	; 4
    2a20:	8c 93       	st	X, r24

	if(uart_config){
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <UART_init+0x5c>
    2a2a:	ae c0       	rjmp	.+348    	; 0x2b88 <UART_init+0x1b8>


		/*Enable two stop bits*/
		if(uart_config->two_stop_bits){
    2a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a30:	84 81       	ldd	r24, Z+4	; 0x04
    2a32:	88 23       	and	r24, r24
    2a34:	71 f0       	breq	.+28     	; 0x2a52 <UART_init+0x82>
			SET_BIT(UCSRC, URSEL);
    2a36:	a0 e4       	ldi	r26, 0x40	; 64
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e0 e4       	ldi	r30, 0x40	; 64
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 68       	ori	r24, 0x80	; 128
    2a42:	8c 93       	st	X, r24
			SET_BIT(UCSRC, USBS);
    2a44:	a0 e4       	ldi	r26, 0x40	; 64
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e0 e4       	ldi	r30, 0x40	; 64
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	88 60       	ori	r24, 0x08	; 8
    2a50:	8c 93       	st	X, r24
		}

		/*set number of bits, if 0 default to 8 bits*/
		if(uart_config->num_of_bits){
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	85 81       	ldd	r24, Z+5	; 0x05
    2a58:	88 23       	and	r24, r24
    2a5a:	e9 f0       	breq	.+58     	; 0x2a96 <UART_init+0xc6>
			UCSRC |= (uart_config->num_of_bits & 0x03) << UCSZ0;
    2a5c:	a0 e4       	ldi	r26, 0x40	; 64
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e0 e4       	ldi	r30, 0x40	; 64
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	28 2f       	mov	r18, r24
    2a68:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6c:	85 81       	ldd	r24, Z+5	; 0x05
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	83 70       	andi	r24, 0x03	; 3
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	82 2b       	or	r24, r18
    2a7c:	8c 93       	st	X, r24

			if(uart_config->num_of_bits == NINE_BIT){
    2a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a80:	fa 81       	ldd	r31, Y+2	; 0x02
    2a82:	85 81       	ldd	r24, Z+5	; 0x05
    2a84:	87 30       	cpi	r24, 0x07	; 7
    2a86:	39 f4       	brne	.+14     	; 0x2a96 <UART_init+0xc6>
				SET_BIT(UCSRB, UCSZ2);
    2a88:	aa e2       	ldi	r26, 0x2A	; 42
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	ea e2       	ldi	r30, 0x2A	; 42
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	84 60       	ori	r24, 0x04	; 4
    2a94:	8c 93       	st	X, r24
			}
		}

		/*adjust parity accordingly if parity isn't disabled*/
		if(uart_config->parity){
    2a96:	e9 81       	ldd	r30, Y+1	; 0x01
    2a98:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9a:	86 81       	ldd	r24, Z+6	; 0x06
    2a9c:	88 23       	and	r24, r24
    2a9e:	a9 f0       	breq	.+42     	; 0x2aca <UART_init+0xfa>
					UCSRC |= (uart_config->parity & 0x03) << UPM0;
    2aa0:	a0 e4       	ldi	r26, 0x40	; 64
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e0 e4       	ldi	r30, 0x40	; 64
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	28 2f       	mov	r18, r24
    2aac:	e9 81       	ldd	r30, Y+1	; 0x01
    2aae:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab0:	86 81       	ldd	r24, Z+6	; 0x06
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	83 70       	andi	r24, 0x03	; 3
    2ab8:	90 70       	andi	r25, 0x00	; 0
    2aba:	82 95       	swap	r24
    2abc:	92 95       	swap	r25
    2abe:	90 7f       	andi	r25, 0xF0	; 240
    2ac0:	98 27       	eor	r25, r24
    2ac2:	80 7f       	andi	r24, 0xF0	; 240
    2ac4:	98 27       	eor	r25, r24
    2ac6:	82 2b       	or	r24, r18
    2ac8:	8c 93       	st	X, r24
		}

		/*set baud rate if the specified baud rate is greater than 0*/
		if(uart_config->baud_rate > 0){
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ad4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	a1 05       	cpc	r26, r1
    2ada:	b1 05       	cpc	r27, r1
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <UART_init+0x110>
    2ade:	54 c0       	rjmp	.+168    	; 0x2b88 <UART_init+0x1b8>
					CLEAR_BIT(UCSRC, URSEL);
    2ae0:	a0 e4       	ldi	r26, 0x40	; 64
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e0 e4       	ldi	r30, 0x40	; 64
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	8f 77       	andi	r24, 0x7F	; 127
    2aec:	8c 93       	st	X, r24
					UBRRH = BAUD_PRESCALE_DOUBLE(uart_config->baud_rate) >> 8;
    2aee:	00 e4       	ldi	r16, 0x40	; 64
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	e9 81       	ldd	r30, Y+1	; 0x01
    2af4:	fa 81       	ldd	r31, Y+2	; 0x02
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	a2 81       	ldd	r26, Z+2	; 0x02
    2afc:	b3 81       	ldd	r27, Z+3	; 0x03
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	aa 1f       	adc	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	aa 1f       	adc	r26, r26
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	aa 1f       	adc	r26, r26
    2b14:	bb 1f       	adc	r27, r27
    2b16:	9c 01       	movw	r18, r24
    2b18:	ad 01       	movw	r20, r26
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	92 e1       	ldi	r25, 0x12	; 18
    2b1e:	aa e7       	ldi	r26, 0x7A	; 122
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__udivmodsi4>
    2b2a:	da 01       	movw	r26, r20
    2b2c:	c9 01       	movw	r24, r18
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	a1 09       	sbc	r26, r1
    2b32:	b1 09       	sbc	r27, r1
    2b34:	89 2f       	mov	r24, r25
    2b36:	9a 2f       	mov	r25, r26
    2b38:	ab 2f       	mov	r26, r27
    2b3a:	bb 27       	eor	r27, r27
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	80 83       	st	Z, r24
					UBRRL = BAUD_PRESCALE_DOUBLE(uart_config->baud_rate);
    2b40:	09 e2       	ldi	r16, 0x29	; 41
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	e9 81       	ldd	r30, Y+1	; 0x01
    2b46:	fa 81       	ldd	r31, Y+2	; 0x02
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	a2 81       	ldd	r26, Z+2	; 0x02
    2b4e:	b3 81       	ldd	r27, Z+3	; 0x03
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	aa 1f       	adc	r26, r26
    2b56:	bb 1f       	adc	r27, r27
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	aa 1f       	adc	r26, r26
    2b5e:	bb 1f       	adc	r27, r27
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	aa 1f       	adc	r26, r26
    2b66:	bb 1f       	adc	r27, r27
    2b68:	9c 01       	movw	r18, r24
    2b6a:	ad 01       	movw	r20, r26
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	92 e1       	ldi	r25, 0x12	; 18
    2b70:	aa e7       	ldi	r26, 0x7A	; 122
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__udivmodsi4>
    2b7c:	da 01       	movw	r26, r20
    2b7e:	c9 01       	movw	r24, r18
    2b80:	81 50       	subi	r24, 0x01	; 1
    2b82:	f8 01       	movw	r30, r16
    2b84:	80 83       	st	Z, r24
    2b86:	0e c0       	rjmp	.+28     	; 0x2ba4 <UART_init+0x1d4>
					return;
		}
	}

	/*default settings if a config struct isn't provided*/
	CLEAR_BIT(UCSRC, URSEL);
    2b88:	a0 e4       	ldi	r26, 0x40	; 64
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e0 e4       	ldi	r30, 0x40	; 64
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	8f 77       	andi	r24, 0x7F	; 127
    2b94:	8c 93       	st	X, r24
	UBRRH = BAUD_PRESCALE_DOUBLE(DEFAULT_BAUD_RATE) >> 8;
    2b96:	e0 e4       	ldi	r30, 0x40	; 64
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE_DOUBLE(DEFAULT_BAUD_RATE);
    2b9c:	e9 e2       	ldi	r30, 0x29	; 41
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	87 e6       	ldi	r24, 0x67	; 103
    2ba2:	80 83       	st	Z, r24
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	08 95       	ret

00002bb2 <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	0f 92       	push	r0
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    2bbe:	eb e2       	ldi	r30, 0x2B	; 43
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 2f       	mov	r24, r24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	80 72       	andi	r24, 0x20	; 32
    2bca:	90 70       	andi	r25, 0x00	; 0
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	b9 f3       	breq	.-18     	; 0x2bbe <UART_sendByte+0xc>
	UDR = data;
    2bd0:	ec e2       	ldi	r30, 0x2C	; 44
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	80 83       	st	Z, r24
}
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <UART_recvByte>:


uint8 UART_recvByte(void)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
    2be8:	eb e2       	ldi	r30, 0x2B	; 43
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	88 23       	and	r24, r24
    2bf0:	dc f7       	brge	.-10     	; 0x2be8 <UART_recvByte+0x8>
	return UDR;
    2bf2:	ec e2       	ldi	r30, 0x2C	; 44
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
}
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <UART_sendString>:

void UART_sendString(const char *str, char terminator)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <UART_sendString+0x6>
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <UART_sendString+0x8>
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
    2c0e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    2c10:	19 82       	std	Y+1, r1	; 0x01
    2c12:	0e c0       	rjmp	.+28     	; 0x2c30 <UART_sendString+0x32>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e2 0f       	add	r30, r18
    2c22:	f3 1f       	adc	r31, r19
    2c24:	80 81       	ld	r24, Z
    2c26:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_sendByte>
		i++;
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	8f 5f       	subi	r24, 0xFF	; 255
    2c2e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *str, char terminator)
{
	uint8 i = 0;
	while(str[i] != '\0')
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e2 0f       	add	r30, r18
    2c3e:	f3 1f       	adc	r31, r19
    2c40:	80 81       	ld	r24, Z
    2c42:	88 23       	and	r24, r24
    2c44:	39 f7       	brne	.-50     	; 0x2c14 <UART_sendString+0x16>
	{
		UART_sendByte(str[i]);
		i++;
	}
	UART_sendByte(terminator);
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <UART_sendByte>
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <UART_recvString>:


void UART_recvString(char *str, char terminator)
{
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <UART_recvString+0xa>
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <UART_recvString+0xc>
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	9b 83       	std	Y+3, r25	; 0x03
    2c6c:	8a 83       	std	Y+2, r24	; 0x02
    2c6e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    2c70:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_recvByte();
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7c:	8c 01       	movw	r16, r24
    2c7e:	02 0f       	add	r16, r18
    2c80:	13 1f       	adc	r17, r19
    2c82:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <UART_recvByte>
    2c86:	f8 01       	movw	r30, r16
    2c88:	80 83       	st	Z, r24
    2c8a:	0f c0       	rjmp	.+30     	; 0x2caa <UART_recvString+0x50>
		while(str[i] != terminator)
		{
			i++;
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	8f 5f       	subi	r24, 0xFF	; 255
    2c90:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_recvByte();
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9c:	8c 01       	movw	r16, r24
    2c9e:	02 0f       	add	r16, r18
    2ca0:	13 1f       	adc	r17, r19
    2ca2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <UART_recvByte>
    2ca6:	f8 01       	movw	r30, r16
    2ca8:	80 83       	st	Z, r24

void UART_recvString(char *str, char terminator)
{
	uint8 i = 0;
		str[i] = UART_recvByte();
		while(str[i] != terminator)
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	f3 1f       	adc	r31, r19
    2cba:	90 81       	ld	r25, Z
    2cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbe:	98 17       	cp	r25, r24
    2cc0:	29 f7       	brne	.-54     	; 0x2c8c <UART_recvString+0x32>
		{
			i++;
			str[i] = UART_recvByte();
		}
		str[i] = '\0';
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	28 2f       	mov	r18, r24
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ccc:	fc 01       	movw	r30, r24
    2cce:	e2 0f       	add	r30, r18
    2cd0:	f3 1f       	adc	r31, r19
    2cd2:	10 82       	st	Z, r1
}
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	1f 91       	pop	r17
    2ce2:	0f 91       	pop	r16
    2ce4:	08 95       	ret

00002ce6 <__udivmodsi4>:
    2ce6:	a1 e2       	ldi	r26, 0x21	; 33
    2ce8:	1a 2e       	mov	r1, r26
    2cea:	aa 1b       	sub	r26, r26
    2cec:	bb 1b       	sub	r27, r27
    2cee:	fd 01       	movw	r30, r26
    2cf0:	0d c0       	rjmp	.+26     	; 0x2d0c <__udivmodsi4_ep>

00002cf2 <__udivmodsi4_loop>:
    2cf2:	aa 1f       	adc	r26, r26
    2cf4:	bb 1f       	adc	r27, r27
    2cf6:	ee 1f       	adc	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	a2 17       	cp	r26, r18
    2cfc:	b3 07       	cpc	r27, r19
    2cfe:	e4 07       	cpc	r30, r20
    2d00:	f5 07       	cpc	r31, r21
    2d02:	20 f0       	brcs	.+8      	; 0x2d0c <__udivmodsi4_ep>
    2d04:	a2 1b       	sub	r26, r18
    2d06:	b3 0b       	sbc	r27, r19
    2d08:	e4 0b       	sbc	r30, r20
    2d0a:	f5 0b       	sbc	r31, r21

00002d0c <__udivmodsi4_ep>:
    2d0c:	66 1f       	adc	r22, r22
    2d0e:	77 1f       	adc	r23, r23
    2d10:	88 1f       	adc	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	1a 94       	dec	r1
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <__udivmodsi4_loop>
    2d18:	60 95       	com	r22
    2d1a:	70 95       	com	r23
    2d1c:	80 95       	com	r24
    2d1e:	90 95       	com	r25
    2d20:	9b 01       	movw	r18, r22
    2d22:	ac 01       	movw	r20, r24
    2d24:	bd 01       	movw	r22, r26
    2d26:	cf 01       	movw	r24, r30
    2d28:	08 95       	ret

00002d2a <__prologue_saves__>:
    2d2a:	2f 92       	push	r2
    2d2c:	3f 92       	push	r3
    2d2e:	4f 92       	push	r4
    2d30:	5f 92       	push	r5
    2d32:	6f 92       	push	r6
    2d34:	7f 92       	push	r7
    2d36:	8f 92       	push	r8
    2d38:	9f 92       	push	r9
    2d3a:	af 92       	push	r10
    2d3c:	bf 92       	push	r11
    2d3e:	cf 92       	push	r12
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	ca 1b       	sub	r28, r26
    2d54:	db 0b       	sbc	r29, r27
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	09 94       	ijmp

00002d62 <__epilogue_restores__>:
    2d62:	2a 88       	ldd	r2, Y+18	; 0x12
    2d64:	39 88       	ldd	r3, Y+17	; 0x11
    2d66:	48 88       	ldd	r4, Y+16	; 0x10
    2d68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d74:	b9 84       	ldd	r11, Y+9	; 0x09
    2d76:	c8 84       	ldd	r12, Y+8	; 0x08
    2d78:	df 80       	ldd	r13, Y+7	; 0x07
    2d7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d80:	1b 81       	ldd	r17, Y+3	; 0x03
    2d82:	aa 81       	ldd	r26, Y+2	; 0x02
    2d84:	b9 81       	ldd	r27, Y+1	; 0x01
    2d86:	ce 0f       	add	r28, r30
    2d88:	d1 1d       	adc	r29, r1
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	ed 01       	movw	r28, r26
    2d96:	08 95       	ret

00002d98 <sprintf>:
    2d98:	ae e0       	ldi	r26, 0x0E	; 14
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    2d9e:	f6 e1       	ldi	r31, 0x16	; 22
    2da0:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__prologue_saves__+0x1c>
    2da4:	0d 89       	ldd	r16, Y+21	; 0x15
    2da6:	1e 89       	ldd	r17, Y+22	; 0x16
    2da8:	86 e0       	ldi	r24, 0x06	; 6
    2daa:	8c 83       	std	Y+4, r24	; 0x04
    2dac:	1a 83       	std	Y+2, r17	; 0x02
    2dae:	09 83       	std	Y+1, r16	; 0x01
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	9f e7       	ldi	r25, 0x7F	; 127
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	9e 01       	movw	r18, r28
    2dba:	27 5e       	subi	r18, 0xE7	; 231
    2dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	6f 89       	ldd	r22, Y+23	; 0x17
    2dc4:	78 8d       	ldd	r23, Y+24	; 0x18
    2dc6:	a9 01       	movw	r20, r18
    2dc8:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vfprintf>
    2dcc:	2f 81       	ldd	r18, Y+7	; 0x07
    2dce:	38 85       	ldd	r19, Y+8	; 0x08
    2dd0:	02 0f       	add	r16, r18
    2dd2:	13 1f       	adc	r17, r19
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	10 82       	st	Z, r1
    2dd8:	2e 96       	adiw	r28, 0x0e	; 14
    2dda:	e4 e0       	ldi	r30, 0x04	; 4
    2ddc:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__+0x1c>

00002de0 <vfprintf>:
    2de0:	ab e0       	ldi	r26, 0x0B	; 11
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e6 ef       	ldi	r30, 0xF6	; 246
    2de6:	f6 e1       	ldi	r31, 0x16	; 22
    2de8:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
    2dec:	3c 01       	movw	r6, r24
    2dee:	2b 01       	movw	r4, r22
    2df0:	5a 01       	movw	r10, r20
    2df2:	fc 01       	movw	r30, r24
    2df4:	17 82       	std	Z+7, r1	; 0x07
    2df6:	16 82       	std	Z+6, r1	; 0x06
    2df8:	83 81       	ldd	r24, Z+3	; 0x03
    2dfa:	81 fd       	sbrc	r24, 1
    2dfc:	03 c0       	rjmp	.+6      	; 0x2e04 <vfprintf+0x24>
    2dfe:	6f ef       	ldi	r22, 0xFF	; 255
    2e00:	7f ef       	ldi	r23, 0xFF	; 255
    2e02:	c6 c1       	rjmp	.+908    	; 0x3190 <vfprintf+0x3b0>
    2e04:	9a e0       	ldi	r25, 0x0A	; 10
    2e06:	89 2e       	mov	r8, r25
    2e08:	1e 01       	movw	r2, r28
    2e0a:	08 94       	sec
    2e0c:	21 1c       	adc	r2, r1
    2e0e:	31 1c       	adc	r3, r1
    2e10:	f3 01       	movw	r30, r6
    2e12:	23 81       	ldd	r18, Z+3	; 0x03
    2e14:	f2 01       	movw	r30, r4
    2e16:	23 fd       	sbrc	r18, 3
    2e18:	85 91       	lpm	r24, Z+
    2e1a:	23 ff       	sbrs	r18, 3
    2e1c:	81 91       	ld	r24, Z+
    2e1e:	2f 01       	movw	r4, r30
    2e20:	88 23       	and	r24, r24
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <vfprintf+0x46>
    2e24:	b2 c1       	rjmp	.+868    	; 0x318a <vfprintf+0x3aa>
    2e26:	85 32       	cpi	r24, 0x25	; 37
    2e28:	39 f4       	brne	.+14     	; 0x2e38 <vfprintf+0x58>
    2e2a:	23 fd       	sbrc	r18, 3
    2e2c:	85 91       	lpm	r24, Z+
    2e2e:	23 ff       	sbrs	r18, 3
    2e30:	81 91       	ld	r24, Z+
    2e32:	2f 01       	movw	r4, r30
    2e34:	85 32       	cpi	r24, 0x25	; 37
    2e36:	29 f4       	brne	.+10     	; 0x2e42 <vfprintf+0x62>
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	b3 01       	movw	r22, r6
    2e3c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    2e40:	e7 cf       	rjmp	.-50     	; 0x2e10 <vfprintf+0x30>
    2e42:	98 2f       	mov	r25, r24
    2e44:	ff 24       	eor	r15, r15
    2e46:	ee 24       	eor	r14, r14
    2e48:	99 24       	eor	r9, r9
    2e4a:	ff e1       	ldi	r31, 0x1F	; 31
    2e4c:	ff 15       	cp	r31, r15
    2e4e:	d0 f0       	brcs	.+52     	; 0x2e84 <vfprintf+0xa4>
    2e50:	9b 32       	cpi	r25, 0x2B	; 43
    2e52:	69 f0       	breq	.+26     	; 0x2e6e <vfprintf+0x8e>
    2e54:	9c 32       	cpi	r25, 0x2C	; 44
    2e56:	28 f4       	brcc	.+10     	; 0x2e62 <vfprintf+0x82>
    2e58:	90 32       	cpi	r25, 0x20	; 32
    2e5a:	59 f0       	breq	.+22     	; 0x2e72 <vfprintf+0x92>
    2e5c:	93 32       	cpi	r25, 0x23	; 35
    2e5e:	91 f4       	brne	.+36     	; 0x2e84 <vfprintf+0xa4>
    2e60:	0e c0       	rjmp	.+28     	; 0x2e7e <vfprintf+0x9e>
    2e62:	9d 32       	cpi	r25, 0x2D	; 45
    2e64:	49 f0       	breq	.+18     	; 0x2e78 <vfprintf+0x98>
    2e66:	90 33       	cpi	r25, 0x30	; 48
    2e68:	69 f4       	brne	.+26     	; 0x2e84 <vfprintf+0xa4>
    2e6a:	41 e0       	ldi	r20, 0x01	; 1
    2e6c:	24 c0       	rjmp	.+72     	; 0x2eb6 <vfprintf+0xd6>
    2e6e:	52 e0       	ldi	r21, 0x02	; 2
    2e70:	f5 2a       	or	r15, r21
    2e72:	84 e0       	ldi	r24, 0x04	; 4
    2e74:	f8 2a       	or	r15, r24
    2e76:	28 c0       	rjmp	.+80     	; 0x2ec8 <vfprintf+0xe8>
    2e78:	98 e0       	ldi	r25, 0x08	; 8
    2e7a:	f9 2a       	or	r15, r25
    2e7c:	25 c0       	rjmp	.+74     	; 0x2ec8 <vfprintf+0xe8>
    2e7e:	e0 e1       	ldi	r30, 0x10	; 16
    2e80:	fe 2a       	or	r15, r30
    2e82:	22 c0       	rjmp	.+68     	; 0x2ec8 <vfprintf+0xe8>
    2e84:	f7 fc       	sbrc	r15, 7
    2e86:	29 c0       	rjmp	.+82     	; 0x2eda <vfprintf+0xfa>
    2e88:	89 2f       	mov	r24, r25
    2e8a:	80 53       	subi	r24, 0x30	; 48
    2e8c:	8a 30       	cpi	r24, 0x0A	; 10
    2e8e:	70 f4       	brcc	.+28     	; 0x2eac <vfprintf+0xcc>
    2e90:	f6 fe       	sbrs	r15, 6
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <vfprintf+0xbe>
    2e94:	98 9c       	mul	r9, r8
    2e96:	90 2c       	mov	r9, r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	98 0e       	add	r9, r24
    2e9c:	15 c0       	rjmp	.+42     	; 0x2ec8 <vfprintf+0xe8>
    2e9e:	e8 9c       	mul	r14, r8
    2ea0:	e0 2c       	mov	r14, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	e8 0e       	add	r14, r24
    2ea6:	f0 e2       	ldi	r31, 0x20	; 32
    2ea8:	ff 2a       	or	r15, r31
    2eaa:	0e c0       	rjmp	.+28     	; 0x2ec8 <vfprintf+0xe8>
    2eac:	9e 32       	cpi	r25, 0x2E	; 46
    2eae:	29 f4       	brne	.+10     	; 0x2eba <vfprintf+0xda>
    2eb0:	f6 fc       	sbrc	r15, 6
    2eb2:	6b c1       	rjmp	.+726    	; 0x318a <vfprintf+0x3aa>
    2eb4:	40 e4       	ldi	r20, 0x40	; 64
    2eb6:	f4 2a       	or	r15, r20
    2eb8:	07 c0       	rjmp	.+14     	; 0x2ec8 <vfprintf+0xe8>
    2eba:	9c 36       	cpi	r25, 0x6C	; 108
    2ebc:	19 f4       	brne	.+6      	; 0x2ec4 <vfprintf+0xe4>
    2ebe:	50 e8       	ldi	r21, 0x80	; 128
    2ec0:	f5 2a       	or	r15, r21
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <vfprintf+0xe8>
    2ec4:	98 36       	cpi	r25, 0x68	; 104
    2ec6:	49 f4       	brne	.+18     	; 0x2eda <vfprintf+0xfa>
    2ec8:	f2 01       	movw	r30, r4
    2eca:	23 fd       	sbrc	r18, 3
    2ecc:	95 91       	lpm	r25, Z+
    2ece:	23 ff       	sbrs	r18, 3
    2ed0:	91 91       	ld	r25, Z+
    2ed2:	2f 01       	movw	r4, r30
    2ed4:	99 23       	and	r25, r25
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <vfprintf+0xfa>
    2ed8:	b8 cf       	rjmp	.-144    	; 0x2e4a <vfprintf+0x6a>
    2eda:	89 2f       	mov	r24, r25
    2edc:	85 54       	subi	r24, 0x45	; 69
    2ede:	83 30       	cpi	r24, 0x03	; 3
    2ee0:	18 f0       	brcs	.+6      	; 0x2ee8 <vfprintf+0x108>
    2ee2:	80 52       	subi	r24, 0x20	; 32
    2ee4:	83 30       	cpi	r24, 0x03	; 3
    2ee6:	38 f4       	brcc	.+14     	; 0x2ef6 <vfprintf+0x116>
    2ee8:	44 e0       	ldi	r20, 0x04	; 4
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	a4 0e       	add	r10, r20
    2eee:	b5 1e       	adc	r11, r21
    2ef0:	5f e3       	ldi	r21, 0x3F	; 63
    2ef2:	59 83       	std	Y+1, r21	; 0x01
    2ef4:	0f c0       	rjmp	.+30     	; 0x2f14 <vfprintf+0x134>
    2ef6:	93 36       	cpi	r25, 0x63	; 99
    2ef8:	31 f0       	breq	.+12     	; 0x2f06 <vfprintf+0x126>
    2efa:	93 37       	cpi	r25, 0x73	; 115
    2efc:	79 f0       	breq	.+30     	; 0x2f1c <vfprintf+0x13c>
    2efe:	93 35       	cpi	r25, 0x53	; 83
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <vfprintf+0x124>
    2f02:	56 c0       	rjmp	.+172    	; 0x2fb0 <vfprintf+0x1d0>
    2f04:	20 c0       	rjmp	.+64     	; 0x2f46 <vfprintf+0x166>
    2f06:	f5 01       	movw	r30, r10
    2f08:	80 81       	ld	r24, Z
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	42 e0       	ldi	r20, 0x02	; 2
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	a4 0e       	add	r10, r20
    2f12:	b5 1e       	adc	r11, r21
    2f14:	61 01       	movw	r12, r2
    2f16:	01 e0       	ldi	r16, 0x01	; 1
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	12 c0       	rjmp	.+36     	; 0x2f40 <vfprintf+0x160>
    2f1c:	f5 01       	movw	r30, r10
    2f1e:	c0 80       	ld	r12, Z
    2f20:	d1 80       	ldd	r13, Z+1	; 0x01
    2f22:	f6 fc       	sbrc	r15, 6
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <vfprintf+0x14c>
    2f26:	6f ef       	ldi	r22, 0xFF	; 255
    2f28:	7f ef       	ldi	r23, 0xFF	; 255
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <vfprintf+0x150>
    2f2c:	69 2d       	mov	r22, r9
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	42 e0       	ldi	r20, 0x02	; 2
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	a4 0e       	add	r10, r20
    2f36:	b5 1e       	adc	r11, r21
    2f38:	c6 01       	movw	r24, r12
    2f3a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <strnlen>
    2f3e:	8c 01       	movw	r16, r24
    2f40:	5f e7       	ldi	r21, 0x7F	; 127
    2f42:	f5 22       	and	r15, r21
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <vfprintf+0x18e>
    2f46:	f5 01       	movw	r30, r10
    2f48:	c0 80       	ld	r12, Z
    2f4a:	d1 80       	ldd	r13, Z+1	; 0x01
    2f4c:	f6 fc       	sbrc	r15, 6
    2f4e:	03 c0       	rjmp	.+6      	; 0x2f56 <vfprintf+0x176>
    2f50:	6f ef       	ldi	r22, 0xFF	; 255
    2f52:	7f ef       	ldi	r23, 0xFF	; 255
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <vfprintf+0x17a>
    2f56:	69 2d       	mov	r22, r9
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	42 e0       	ldi	r20, 0x02	; 2
    2f5c:	50 e0       	ldi	r21, 0x00	; 0
    2f5e:	a4 0e       	add	r10, r20
    2f60:	b5 1e       	adc	r11, r21
    2f62:	c6 01       	movw	r24, r12
    2f64:	0e 94 cd 18 	call	0x319a	; 0x319a <strnlen_P>
    2f68:	8c 01       	movw	r16, r24
    2f6a:	50 e8       	ldi	r21, 0x80	; 128
    2f6c:	f5 2a       	or	r15, r21
    2f6e:	f3 fe       	sbrs	r15, 3
    2f70:	07 c0       	rjmp	.+14     	; 0x2f80 <vfprintf+0x1a0>
    2f72:	1a c0       	rjmp	.+52     	; 0x2fa8 <vfprintf+0x1c8>
    2f74:	80 e2       	ldi	r24, 0x20	; 32
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	b3 01       	movw	r22, r6
    2f7a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    2f7e:	ea 94       	dec	r14
    2f80:	8e 2d       	mov	r24, r14
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	08 17       	cp	r16, r24
    2f86:	19 07       	cpc	r17, r25
    2f88:	a8 f3       	brcs	.-22     	; 0x2f74 <vfprintf+0x194>
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <vfprintf+0x1c8>
    2f8c:	f6 01       	movw	r30, r12
    2f8e:	f7 fc       	sbrc	r15, 7
    2f90:	85 91       	lpm	r24, Z+
    2f92:	f7 fe       	sbrs	r15, 7
    2f94:	81 91       	ld	r24, Z+
    2f96:	6f 01       	movw	r12, r30
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	b3 01       	movw	r22, r6
    2f9c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    2fa0:	e1 10       	cpse	r14, r1
    2fa2:	ea 94       	dec	r14
    2fa4:	01 50       	subi	r16, 0x01	; 1
    2fa6:	10 40       	sbci	r17, 0x00	; 0
    2fa8:	01 15       	cp	r16, r1
    2faa:	11 05       	cpc	r17, r1
    2fac:	79 f7       	brne	.-34     	; 0x2f8c <vfprintf+0x1ac>
    2fae:	ea c0       	rjmp	.+468    	; 0x3184 <vfprintf+0x3a4>
    2fb0:	94 36       	cpi	r25, 0x64	; 100
    2fb2:	11 f0       	breq	.+4      	; 0x2fb8 <vfprintf+0x1d8>
    2fb4:	99 36       	cpi	r25, 0x69	; 105
    2fb6:	69 f5       	brne	.+90     	; 0x3012 <vfprintf+0x232>
    2fb8:	f7 fe       	sbrs	r15, 7
    2fba:	08 c0       	rjmp	.+16     	; 0x2fcc <vfprintf+0x1ec>
    2fbc:	f5 01       	movw	r30, r10
    2fbe:	20 81       	ld	r18, Z
    2fc0:	31 81       	ldd	r19, Z+1	; 0x01
    2fc2:	42 81       	ldd	r20, Z+2	; 0x02
    2fc4:	53 81       	ldd	r21, Z+3	; 0x03
    2fc6:	84 e0       	ldi	r24, 0x04	; 4
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0a c0       	rjmp	.+20     	; 0x2fe0 <vfprintf+0x200>
    2fcc:	f5 01       	movw	r30, r10
    2fce:	80 81       	ld	r24, Z
    2fd0:	91 81       	ldd	r25, Z+1	; 0x01
    2fd2:	9c 01       	movw	r18, r24
    2fd4:	44 27       	eor	r20, r20
    2fd6:	37 fd       	sbrc	r19, 7
    2fd8:	40 95       	com	r20
    2fda:	54 2f       	mov	r21, r20
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	a8 0e       	add	r10, r24
    2fe2:	b9 1e       	adc	r11, r25
    2fe4:	9f e6       	ldi	r25, 0x6F	; 111
    2fe6:	f9 22       	and	r15, r25
    2fe8:	57 ff       	sbrs	r21, 7
    2fea:	09 c0       	rjmp	.+18     	; 0x2ffe <vfprintf+0x21e>
    2fec:	50 95       	com	r21
    2fee:	40 95       	com	r20
    2ff0:	30 95       	com	r19
    2ff2:	21 95       	neg	r18
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffa:	e0 e8       	ldi	r30, 0x80	; 128
    2ffc:	fe 2a       	or	r15, r30
    2ffe:	ca 01       	movw	r24, r20
    3000:	b9 01       	movw	r22, r18
    3002:	a1 01       	movw	r20, r2
    3004:	2a e0       	ldi	r18, 0x0A	; 10
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	0e 94 0f 19 	call	0x321e	; 0x321e <__ultoa_invert>
    300c:	d8 2e       	mov	r13, r24
    300e:	d2 18       	sub	r13, r2
    3010:	40 c0       	rjmp	.+128    	; 0x3092 <vfprintf+0x2b2>
    3012:	95 37       	cpi	r25, 0x75	; 117
    3014:	29 f4       	brne	.+10     	; 0x3020 <vfprintf+0x240>
    3016:	1f 2d       	mov	r17, r15
    3018:	1f 7e       	andi	r17, 0xEF	; 239
    301a:	2a e0       	ldi	r18, 0x0A	; 10
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	1d c0       	rjmp	.+58     	; 0x305a <vfprintf+0x27a>
    3020:	1f 2d       	mov	r17, r15
    3022:	19 7f       	andi	r17, 0xF9	; 249
    3024:	9f 36       	cpi	r25, 0x6F	; 111
    3026:	61 f0       	breq	.+24     	; 0x3040 <vfprintf+0x260>
    3028:	90 37       	cpi	r25, 0x70	; 112
    302a:	20 f4       	brcc	.+8      	; 0x3034 <vfprintf+0x254>
    302c:	98 35       	cpi	r25, 0x58	; 88
    302e:	09 f0       	breq	.+2      	; 0x3032 <vfprintf+0x252>
    3030:	ac c0       	rjmp	.+344    	; 0x318a <vfprintf+0x3aa>
    3032:	0f c0       	rjmp	.+30     	; 0x3052 <vfprintf+0x272>
    3034:	90 37       	cpi	r25, 0x70	; 112
    3036:	39 f0       	breq	.+14     	; 0x3046 <vfprintf+0x266>
    3038:	98 37       	cpi	r25, 0x78	; 120
    303a:	09 f0       	breq	.+2      	; 0x303e <vfprintf+0x25e>
    303c:	a6 c0       	rjmp	.+332    	; 0x318a <vfprintf+0x3aa>
    303e:	04 c0       	rjmp	.+8      	; 0x3048 <vfprintf+0x268>
    3040:	28 e0       	ldi	r18, 0x08	; 8
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	0a c0       	rjmp	.+20     	; 0x305a <vfprintf+0x27a>
    3046:	10 61       	ori	r17, 0x10	; 16
    3048:	14 fd       	sbrc	r17, 4
    304a:	14 60       	ori	r17, 0x04	; 4
    304c:	20 e1       	ldi	r18, 0x10	; 16
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	04 c0       	rjmp	.+8      	; 0x305a <vfprintf+0x27a>
    3052:	14 fd       	sbrc	r17, 4
    3054:	16 60       	ori	r17, 0x06	; 6
    3056:	20 e1       	ldi	r18, 0x10	; 16
    3058:	32 e0       	ldi	r19, 0x02	; 2
    305a:	17 ff       	sbrs	r17, 7
    305c:	08 c0       	rjmp	.+16     	; 0x306e <vfprintf+0x28e>
    305e:	f5 01       	movw	r30, r10
    3060:	60 81       	ld	r22, Z
    3062:	71 81       	ldd	r23, Z+1	; 0x01
    3064:	82 81       	ldd	r24, Z+2	; 0x02
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	44 e0       	ldi	r20, 0x04	; 4
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	08 c0       	rjmp	.+16     	; 0x307e <vfprintf+0x29e>
    306e:	f5 01       	movw	r30, r10
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	bc 01       	movw	r22, r24
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	42 e0       	ldi	r20, 0x02	; 2
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	a4 0e       	add	r10, r20
    3080:	b5 1e       	adc	r11, r21
    3082:	a1 01       	movw	r20, r2
    3084:	0e 94 0f 19 	call	0x321e	; 0x321e <__ultoa_invert>
    3088:	d8 2e       	mov	r13, r24
    308a:	d2 18       	sub	r13, r2
    308c:	8f e7       	ldi	r24, 0x7F	; 127
    308e:	f8 2e       	mov	r15, r24
    3090:	f1 22       	and	r15, r17
    3092:	f6 fe       	sbrs	r15, 6
    3094:	0b c0       	rjmp	.+22     	; 0x30ac <vfprintf+0x2cc>
    3096:	5e ef       	ldi	r21, 0xFE	; 254
    3098:	f5 22       	and	r15, r21
    309a:	d9 14       	cp	r13, r9
    309c:	38 f4       	brcc	.+14     	; 0x30ac <vfprintf+0x2cc>
    309e:	f4 fe       	sbrs	r15, 4
    30a0:	07 c0       	rjmp	.+14     	; 0x30b0 <vfprintf+0x2d0>
    30a2:	f2 fc       	sbrc	r15, 2
    30a4:	05 c0       	rjmp	.+10     	; 0x30b0 <vfprintf+0x2d0>
    30a6:	8f ee       	ldi	r24, 0xEF	; 239
    30a8:	f8 22       	and	r15, r24
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <vfprintf+0x2d0>
    30ac:	1d 2d       	mov	r17, r13
    30ae:	01 c0       	rjmp	.+2      	; 0x30b2 <vfprintf+0x2d2>
    30b0:	19 2d       	mov	r17, r9
    30b2:	f4 fe       	sbrs	r15, 4
    30b4:	0d c0       	rjmp	.+26     	; 0x30d0 <vfprintf+0x2f0>
    30b6:	fe 01       	movw	r30, r28
    30b8:	ed 0d       	add	r30, r13
    30ba:	f1 1d       	adc	r31, r1
    30bc:	80 81       	ld	r24, Z
    30be:	80 33       	cpi	r24, 0x30	; 48
    30c0:	19 f4       	brne	.+6      	; 0x30c8 <vfprintf+0x2e8>
    30c2:	99 ee       	ldi	r25, 0xE9	; 233
    30c4:	f9 22       	and	r15, r25
    30c6:	08 c0       	rjmp	.+16     	; 0x30d8 <vfprintf+0x2f8>
    30c8:	1f 5f       	subi	r17, 0xFF	; 255
    30ca:	f2 fe       	sbrs	r15, 2
    30cc:	05 c0       	rjmp	.+10     	; 0x30d8 <vfprintf+0x2f8>
    30ce:	03 c0       	rjmp	.+6      	; 0x30d6 <vfprintf+0x2f6>
    30d0:	8f 2d       	mov	r24, r15
    30d2:	86 78       	andi	r24, 0x86	; 134
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <vfprintf+0x2f8>
    30d6:	1f 5f       	subi	r17, 0xFF	; 255
    30d8:	0f 2d       	mov	r16, r15
    30da:	f3 fc       	sbrc	r15, 3
    30dc:	14 c0       	rjmp	.+40     	; 0x3106 <vfprintf+0x326>
    30de:	f0 fe       	sbrs	r15, 0
    30e0:	0f c0       	rjmp	.+30     	; 0x3100 <vfprintf+0x320>
    30e2:	1e 15       	cp	r17, r14
    30e4:	10 f0       	brcs	.+4      	; 0x30ea <vfprintf+0x30a>
    30e6:	9d 2c       	mov	r9, r13
    30e8:	0b c0       	rjmp	.+22     	; 0x3100 <vfprintf+0x320>
    30ea:	9d 2c       	mov	r9, r13
    30ec:	9e 0c       	add	r9, r14
    30ee:	91 1a       	sub	r9, r17
    30f0:	1e 2d       	mov	r17, r14
    30f2:	06 c0       	rjmp	.+12     	; 0x3100 <vfprintf+0x320>
    30f4:	80 e2       	ldi	r24, 0x20	; 32
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	b3 01       	movw	r22, r6
    30fa:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    30fe:	1f 5f       	subi	r17, 0xFF	; 255
    3100:	1e 15       	cp	r17, r14
    3102:	c0 f3       	brcs	.-16     	; 0x30f4 <vfprintf+0x314>
    3104:	04 c0       	rjmp	.+8      	; 0x310e <vfprintf+0x32e>
    3106:	1e 15       	cp	r17, r14
    3108:	10 f4       	brcc	.+4      	; 0x310e <vfprintf+0x32e>
    310a:	e1 1a       	sub	r14, r17
    310c:	01 c0       	rjmp	.+2      	; 0x3110 <vfprintf+0x330>
    310e:	ee 24       	eor	r14, r14
    3110:	04 ff       	sbrs	r16, 4
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <vfprintf+0x352>
    3114:	80 e3       	ldi	r24, 0x30	; 48
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	b3 01       	movw	r22, r6
    311a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    311e:	02 ff       	sbrs	r16, 2
    3120:	1d c0       	rjmp	.+58     	; 0x315c <vfprintf+0x37c>
    3122:	01 fd       	sbrc	r16, 1
    3124:	03 c0       	rjmp	.+6      	; 0x312c <vfprintf+0x34c>
    3126:	88 e7       	ldi	r24, 0x78	; 120
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e c0       	rjmp	.+28     	; 0x3148 <vfprintf+0x368>
    312c:	88 e5       	ldi	r24, 0x58	; 88
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0b c0       	rjmp	.+22     	; 0x3148 <vfprintf+0x368>
    3132:	80 2f       	mov	r24, r16
    3134:	86 78       	andi	r24, 0x86	; 134
    3136:	91 f0       	breq	.+36     	; 0x315c <vfprintf+0x37c>
    3138:	01 ff       	sbrs	r16, 1
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <vfprintf+0x360>
    313c:	8b e2       	ldi	r24, 0x2B	; 43
    313e:	01 c0       	rjmp	.+2      	; 0x3142 <vfprintf+0x362>
    3140:	80 e2       	ldi	r24, 0x20	; 32
    3142:	f7 fc       	sbrc	r15, 7
    3144:	8d e2       	ldi	r24, 0x2D	; 45
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	b3 01       	movw	r22, r6
    314a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    314e:	06 c0       	rjmp	.+12     	; 0x315c <vfprintf+0x37c>
    3150:	80 e3       	ldi	r24, 0x30	; 48
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	b3 01       	movw	r22, r6
    3156:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    315a:	9a 94       	dec	r9
    315c:	d9 14       	cp	r13, r9
    315e:	c0 f3       	brcs	.-16     	; 0x3150 <vfprintf+0x370>
    3160:	da 94       	dec	r13
    3162:	f1 01       	movw	r30, r2
    3164:	ed 0d       	add	r30, r13
    3166:	f1 1d       	adc	r31, r1
    3168:	80 81       	ld	r24, Z
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	b3 01       	movw	r22, r6
    316e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    3172:	dd 20       	and	r13, r13
    3174:	a9 f7       	brne	.-22     	; 0x3160 <vfprintf+0x380>
    3176:	06 c0       	rjmp	.+12     	; 0x3184 <vfprintf+0x3a4>
    3178:	80 e2       	ldi	r24, 0x20	; 32
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	b3 01       	movw	r22, r6
    317e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <fputc>
    3182:	ea 94       	dec	r14
    3184:	ee 20       	and	r14, r14
    3186:	c1 f7       	brne	.-16     	; 0x3178 <vfprintf+0x398>
    3188:	43 ce       	rjmp	.-890    	; 0x2e10 <vfprintf+0x30>
    318a:	f3 01       	movw	r30, r6
    318c:	66 81       	ldd	r22, Z+6	; 0x06
    318e:	77 81       	ldd	r23, Z+7	; 0x07
    3190:	cb 01       	movw	r24, r22
    3192:	2b 96       	adiw	r28, 0x0b	; 11
    3194:	e2 e1       	ldi	r30, 0x12	; 18
    3196:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

0000319a <strnlen_P>:
    319a:	fc 01       	movw	r30, r24
    319c:	05 90       	lpm	r0, Z+
    319e:	61 50       	subi	r22, 0x01	; 1
    31a0:	70 40       	sbci	r23, 0x00	; 0
    31a2:	01 10       	cpse	r0, r1
    31a4:	d8 f7       	brcc	.-10     	; 0x319c <strnlen_P+0x2>
    31a6:	80 95       	com	r24
    31a8:	90 95       	com	r25
    31aa:	8e 0f       	add	r24, r30
    31ac:	9f 1f       	adc	r25, r31
    31ae:	08 95       	ret

000031b0 <strnlen>:
    31b0:	fc 01       	movw	r30, r24
    31b2:	61 50       	subi	r22, 0x01	; 1
    31b4:	70 40       	sbci	r23, 0x00	; 0
    31b6:	01 90       	ld	r0, Z+
    31b8:	01 10       	cpse	r0, r1
    31ba:	d8 f7       	brcc	.-10     	; 0x31b2 <strnlen+0x2>
    31bc:	80 95       	com	r24
    31be:	90 95       	com	r25
    31c0:	8e 0f       	add	r24, r30
    31c2:	9f 1f       	adc	r25, r31
    31c4:	08 95       	ret

000031c6 <fputc>:
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	8c 01       	movw	r16, r24
    31d0:	eb 01       	movw	r28, r22
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	81 ff       	sbrs	r24, 1
    31d6:	1b c0       	rjmp	.+54     	; 0x320e <fputc+0x48>
    31d8:	82 ff       	sbrs	r24, 2
    31da:	0d c0       	rjmp	.+26     	; 0x31f6 <fputc+0x30>
    31dc:	2e 81       	ldd	r18, Y+6	; 0x06
    31de:	3f 81       	ldd	r19, Y+7	; 0x07
    31e0:	8c 81       	ldd	r24, Y+4	; 0x04
    31e2:	9d 81       	ldd	r25, Y+5	; 0x05
    31e4:	28 17       	cp	r18, r24
    31e6:	39 07       	cpc	r19, r25
    31e8:	64 f4       	brge	.+24     	; 0x3202 <fputc+0x3c>
    31ea:	e8 81       	ld	r30, Y
    31ec:	f9 81       	ldd	r31, Y+1	; 0x01
    31ee:	01 93       	st	Z+, r16
    31f0:	f9 83       	std	Y+1, r31	; 0x01
    31f2:	e8 83       	st	Y, r30
    31f4:	06 c0       	rjmp	.+12     	; 0x3202 <fputc+0x3c>
    31f6:	e8 85       	ldd	r30, Y+8	; 0x08
    31f8:	f9 85       	ldd	r31, Y+9	; 0x09
    31fa:	80 2f       	mov	r24, r16
    31fc:	09 95       	icall
    31fe:	89 2b       	or	r24, r25
    3200:	31 f4       	brne	.+12     	; 0x320e <fputc+0x48>
    3202:	8e 81       	ldd	r24, Y+6	; 0x06
    3204:	9f 81       	ldd	r25, Y+7	; 0x07
    3206:	01 96       	adiw	r24, 0x01	; 1
    3208:	9f 83       	std	Y+7, r25	; 0x07
    320a:	8e 83       	std	Y+6, r24	; 0x06
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <fputc+0x4c>
    320e:	0f ef       	ldi	r16, 0xFF	; 255
    3210:	1f ef       	ldi	r17, 0xFF	; 255
    3212:	c8 01       	movw	r24, r16
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	08 95       	ret

0000321e <__ultoa_invert>:
    321e:	fa 01       	movw	r30, r20
    3220:	aa 27       	eor	r26, r26
    3222:	28 30       	cpi	r18, 0x08	; 8
    3224:	51 f1       	breq	.+84     	; 0x327a <__ultoa_invert+0x5c>
    3226:	20 31       	cpi	r18, 0x10	; 16
    3228:	81 f1       	breq	.+96     	; 0x328a <__ultoa_invert+0x6c>
    322a:	e8 94       	clt
    322c:	6f 93       	push	r22
    322e:	6e 7f       	andi	r22, 0xFE	; 254
    3230:	6e 5f       	subi	r22, 0xFE	; 254
    3232:	7f 4f       	sbci	r23, 0xFF	; 255
    3234:	8f 4f       	sbci	r24, 0xFF	; 255
    3236:	9f 4f       	sbci	r25, 0xFF	; 255
    3238:	af 4f       	sbci	r26, 0xFF	; 255
    323a:	b1 e0       	ldi	r27, 0x01	; 1
    323c:	3e d0       	rcall	.+124    	; 0x32ba <__ultoa_invert+0x9c>
    323e:	b4 e0       	ldi	r27, 0x04	; 4
    3240:	3c d0       	rcall	.+120    	; 0x32ba <__ultoa_invert+0x9c>
    3242:	67 0f       	add	r22, r23
    3244:	78 1f       	adc	r23, r24
    3246:	89 1f       	adc	r24, r25
    3248:	9a 1f       	adc	r25, r26
    324a:	a1 1d       	adc	r26, r1
    324c:	68 0f       	add	r22, r24
    324e:	79 1f       	adc	r23, r25
    3250:	8a 1f       	adc	r24, r26
    3252:	91 1d       	adc	r25, r1
    3254:	a1 1d       	adc	r26, r1
    3256:	6a 0f       	add	r22, r26
    3258:	71 1d       	adc	r23, r1
    325a:	81 1d       	adc	r24, r1
    325c:	91 1d       	adc	r25, r1
    325e:	a1 1d       	adc	r26, r1
    3260:	20 d0       	rcall	.+64     	; 0x32a2 <__ultoa_invert+0x84>
    3262:	09 f4       	brne	.+2      	; 0x3266 <__ultoa_invert+0x48>
    3264:	68 94       	set
    3266:	3f 91       	pop	r19
    3268:	2a e0       	ldi	r18, 0x0A	; 10
    326a:	26 9f       	mul	r18, r22
    326c:	11 24       	eor	r1, r1
    326e:	30 19       	sub	r19, r0
    3270:	30 5d       	subi	r19, 0xD0	; 208
    3272:	31 93       	st	Z+, r19
    3274:	de f6       	brtc	.-74     	; 0x322c <__ultoa_invert+0xe>
    3276:	cf 01       	movw	r24, r30
    3278:	08 95       	ret
    327a:	46 2f       	mov	r20, r22
    327c:	47 70       	andi	r20, 0x07	; 7
    327e:	40 5d       	subi	r20, 0xD0	; 208
    3280:	41 93       	st	Z+, r20
    3282:	b3 e0       	ldi	r27, 0x03	; 3
    3284:	0f d0       	rcall	.+30     	; 0x32a4 <__ultoa_invert+0x86>
    3286:	c9 f7       	brne	.-14     	; 0x327a <__ultoa_invert+0x5c>
    3288:	f6 cf       	rjmp	.-20     	; 0x3276 <__ultoa_invert+0x58>
    328a:	46 2f       	mov	r20, r22
    328c:	4f 70       	andi	r20, 0x0F	; 15
    328e:	40 5d       	subi	r20, 0xD0	; 208
    3290:	4a 33       	cpi	r20, 0x3A	; 58
    3292:	18 f0       	brcs	.+6      	; 0x329a <__ultoa_invert+0x7c>
    3294:	49 5d       	subi	r20, 0xD9	; 217
    3296:	31 fd       	sbrc	r19, 1
    3298:	40 52       	subi	r20, 0x20	; 32
    329a:	41 93       	st	Z+, r20
    329c:	02 d0       	rcall	.+4      	; 0x32a2 <__ultoa_invert+0x84>
    329e:	a9 f7       	brne	.-22     	; 0x328a <__ultoa_invert+0x6c>
    32a0:	ea cf       	rjmp	.-44     	; 0x3276 <__ultoa_invert+0x58>
    32a2:	b4 e0       	ldi	r27, 0x04	; 4
    32a4:	a6 95       	lsr	r26
    32a6:	97 95       	ror	r25
    32a8:	87 95       	ror	r24
    32aa:	77 95       	ror	r23
    32ac:	67 95       	ror	r22
    32ae:	ba 95       	dec	r27
    32b0:	c9 f7       	brne	.-14     	; 0x32a4 <__ultoa_invert+0x86>
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	61 05       	cpc	r22, r1
    32b6:	71 05       	cpc	r23, r1
    32b8:	08 95       	ret
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	0a 2e       	mov	r0, r26
    32c0:	06 94       	lsr	r0
    32c2:	57 95       	ror	r21
    32c4:	47 95       	ror	r20
    32c6:	37 95       	ror	r19
    32c8:	27 95       	ror	r18
    32ca:	ba 95       	dec	r27
    32cc:	c9 f7       	brne	.-14     	; 0x32c0 <__ultoa_invert+0xa2>
    32ce:	62 0f       	add	r22, r18
    32d0:	73 1f       	adc	r23, r19
    32d2:	84 1f       	adc	r24, r20
    32d4:	95 1f       	adc	r25, r21
    32d6:	a0 1d       	adc	r26, r0
    32d8:	08 95       	ret

000032da <_exit>:
    32da:	f8 94       	cli

000032dc <__stop_program>:
    32dc:	ff cf       	rjmp	.-2      	; 0x32dc <__stop_program>
