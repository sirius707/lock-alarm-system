
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002f4e  00002fe2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800074  00800074  00002ff6  2**0
                  ALLOC
  3 .stab         00002b98  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001578  00000000  00000000  00005b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009001  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000adfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b089  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 85 11 	jmp	0x230a	; 0x230a <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <main>
      8a:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:
#include "twi.h"
#include "eeprom.h"


void EEPROM_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	TWI_CONFIG twi_config;
	twi_config.address = 0x01;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	8a 83       	std	Y+2, r24	; 0x02
	twi_config.baud_rate = 0x02;
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	89 83       	std	Y+1, r24	; 0x01

	TWI_init(&twi_config);
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 94 12 	call	0x2528	; 0x2528 <TWI_init>
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 address, uint8 data)
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <EEPROM_writeByte+0x6>
     b70:	00 d0       	rcall	.+0      	; 0xb72 <EEPROM_writeByte+0x8>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     b7c:	0e 94 b4 12 	call	0x2568	; 0x2568 <TWI_start>
	TWI_write(0xA0 | ((address & 0x0700) >> 7));
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	80 70       	andi	r24, 0x00	; 0
     b86:	97 70       	andi	r25, 0x07	; 7
     b88:	88 0f       	add	r24, r24
     b8a:	89 2f       	mov	r24, r25
     b8c:	88 1f       	adc	r24, r24
     b8e:	99 0b       	sbc	r25, r25
     b90:	91 95       	neg	r25
     b92:	80 6a       	ori	r24, 0xA0	; 160
     b94:	0e 94 cf 12 	call	0x259e	; 0x259e <TWI_write>
	TWI_write(address & 0x00FF);
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	0e 94 cf 12 	call	0x259e	; 0x259e <TWI_write>

	TWI_write(data);
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	0e 94 cf 12 	call	0x259e	; 0x259e <TWI_write>

	if(TWI_getStatus() != TWI_M_TRANSMIT_ACK) return FAIL;
     ba4:	0e 94 0c 13 	call	0x2618	; 0x2618 <TWI_getStatus>
     ba8:	88 32       	cpi	r24, 0x28	; 40
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x46>
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <EEPROM_writeByte+0x4e>

	TWI_stop();
     bb0:	0e 94 c4 12 	call	0x2588	; 0x2588 <TWI_stop>
	return SUCCESS;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 83       	std	Y+4, r24	; 0x04
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 address, uint8 *data)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <EEPROM_readByte+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x8>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	7c 83       	std	Y+4, r23	; 0x04
     bdc:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     bde:	0e 94 b4 12 	call	0x2568	; 0x2568 <TWI_start>
	TWI_write(0xA0 | ((address & 0x0700) >> 7));
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	80 70       	andi	r24, 0x00	; 0
     be8:	97 70       	andi	r25, 0x07	; 7
     bea:	88 0f       	add	r24, r24
     bec:	89 2f       	mov	r24, r25
     bee:	88 1f       	adc	r24, r24
     bf0:	99 0b       	sbc	r25, r25
     bf2:	91 95       	neg	r25
     bf4:	80 6a       	ori	r24, 0xA0	; 160
     bf6:	0e 94 cf 12 	call	0x259e	; 0x259e <TWI_write>
	TWI_write(address & 0x00FF);
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	0e 94 cf 12 	call	0x259e	; 0x259e <TWI_write>

	TWI_start();
     c00:	0e 94 b4 12 	call	0x2568	; 0x2568 <TWI_start>
	TWI_write(0xA0 | ((address & 0x0700) >> 7) | 1);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	80 70       	andi	r24, 0x00	; 0
     c0a:	97 70       	andi	r25, 0x07	; 7
     c0c:	88 0f       	add	r24, r24
     c0e:	89 2f       	mov	r24, r25
     c10:	88 1f       	adc	r24, r24
     c12:	99 0b       	sbc	r25, r25
     c14:	91 95       	neg	r25
     c16:	81 6a       	ori	r24, 0xA1	; 161
     c18:	0e 94 cf 12 	call	0x259e	; 0x259e <TWI_write>

	*data = TWI_readWithNACK();
     c1c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <TWI_readWithNACK>
     c20:	eb 81       	ldd	r30, Y+3	; 0x03
     c22:	fc 81       	ldd	r31, Y+4	; 0x04
     c24:	80 83       	st	Z, r24
	if(TWI_getStatus() != TWI_M_RCV_NACK) return FAIL;
     c26:	0e 94 0c 13 	call	0x2618	; 0x2618 <TWI_getStatus>
     c2a:	88 35       	cpi	r24, 0x58	; 88
     c2c:	11 f0       	breq	.+4      	; 0xc32 <EEPROM_readByte+0x6a>
     c2e:	1d 82       	std	Y+5, r1	; 0x05
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <EEPROM_readByte+0x72>

	TWI_stop();
     c32:	0e 94 c4 12 	call	0x2588	; 0x2588 <TWI_stop>
	return SUCCESS;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LCD_init()
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
	/*make control pins output port*/
	SET_BIT(LCD_CTRL_PORT_DIR, LCD_RS);
     c54:	a1 e3       	ldi	r26, 0x31	; 49
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e1 e3       	ldi	r30, 0x31	; 49
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	80 61       	ori	r24, 0x10	; 16
     c60:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT_DIR, LCD_EN);
     c62:	a1 e3       	ldi	r26, 0x31	; 49
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e1 e3       	ldi	r30, 0x31	; 49
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	80 64       	ori	r24, 0x40	; 64
     c6e:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT_DIR, LCD_RW);
     c70:	a1 e3       	ldi	r26, 0x31	; 49
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e1 e3       	ldi	r30, 0x31	; 49
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 62       	ori	r24, 0x20	; 32
     c7c:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR =  0x0F;
		#endif
		LCD_sendCmd(FOUR_BITS_DATA_MODE);
		LCD_sendCmd(TWO_LINE_LCD_4_BIT);
	#else
			LCD_DATA_PORT_DIR = 0xFF;
     c7e:	e4 e3       	ldi	r30, 0x34	; 52
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	80 83       	st	Z, r24
			LCD_sendCmd(TWO_LINE_LCD_8_BIT);
     c86:	88 e3       	ldi	r24, 0x38	; 56
     c88:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_sendCmd>
	#endif

	LCD_sendCmd(CURSOR_OFF);/*turn off cursor*/
     c8c:	8c e0       	ldi	r24, 0x0C	; 12
     c8e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_sendCmd>
	LCD_sendCmd(CLEAR_COMMAND);/*clear LCD*/
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_sendCmd>


}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <LCD_sendCmd>:

void LCD_sendCmd(uint8_t cmd)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	c7 54       	subi	r28, 0x47	; 71
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	fe 01       	movw	r30, r28
     cba:	e9 5b       	subi	r30, 0xB9	; 185
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RS);
     cc0:	a2 e3       	ldi	r26, 0x32	; 50
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e2 e3       	ldi	r30, 0x32	; 50
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8f 7e       	andi	r24, 0xEF	; 239
     ccc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RW);
     cce:	a2 e3       	ldi	r26, 0x32	; 50
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e2 e3       	ldi	r30, 0x32	; 50
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 7d       	andi	r24, 0xDF	; 223
     cda:	8c 93       	st	X, r24
     cdc:	fe 01       	movw	r30, r28
     cde:	ed 5b       	subi	r30, 0xBD	; 189
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e8       	ldi	r26, 0x80	; 128
     ce8:	bf e3       	ldi	r27, 0x3F	; 63
     cea:	80 83       	st	Z, r24
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	a2 83       	std	Z+2, r26	; 0x02
     cf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	8e 01       	movw	r16, r28
     cf4:	01 5c       	subi	r16, 0xC1	; 193
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	fe 01       	movw	r30, r28
     cfa:	ed 5b       	subi	r30, 0xBD	; 189
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	60 81       	ld	r22, Z
     d00:	71 81       	ldd	r23, Z+1	; 0x01
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a ef       	ldi	r20, 0xFA	; 250
     d0c:	54 e4       	ldi	r21, 0x44	; 68
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	f8 01       	movw	r30, r16
     d18:	80 83       	st	Z, r24
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	a2 83       	std	Z+2, r26	; 0x02
     d1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d20:	fe 01       	movw	r30, r28
     d22:	ff 96       	adiw	r30, 0x3f	; 63
     d24:	60 81       	ld	r22, Z
     d26:	71 81       	ldd	r23, Z+1	; 0x01
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d38:	88 23       	and	r24, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <LCD_sendCmd+0xa8>
		__ticks = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9e af       	std	Y+62, r25	; 0x3e
     d42:	8d af       	std	Y+61, r24	; 0x3d
     d44:	46 c0       	rjmp	.+140    	; 0xdd2 <LCD_sendCmd+0x134>
	else if (__tmp > 65535)
     d46:	fe 01       	movw	r30, r28
     d48:	ff 96       	adiw	r30, 0x3f	; 63
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	4f e7       	ldi	r20, 0x7F	; 127
     d58:	57 e4       	ldi	r21, 0x47	; 71
     d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5e:	18 16       	cp	r1, r24
     d60:	64 f5       	brge	.+88     	; 0xdba <LCD_sendCmd+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d62:	fe 01       	movw	r30, r28
     d64:	ed 5b       	subi	r30, 0xBD	; 189
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e2       	ldi	r20, 0x20	; 32
     d76:	51 e4       	ldi	r21, 0x41	; 65
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9e af       	std	Y+62, r25	; 0x3e
     d8e:	8d af       	std	Y+61, r24	; 0x3d
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <LCD_sendCmd+0x112>
     d92:	88 ec       	ldi	r24, 0xC8	; 200
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9c af       	std	Y+60, r25	; 0x3c
     d98:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9a:	8b ad       	ldd	r24, Y+59	; 0x3b
     d9c:	9c ad       	ldd	r25, Y+60	; 0x3c
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <LCD_sendCmd+0x100>
     da2:	9c af       	std	Y+60, r25	; 0x3c
     da4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da6:	8d ad       	ldd	r24, Y+61	; 0x3d
     da8:	9e ad       	ldd	r25, Y+62	; 0x3e
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	9e af       	std	Y+62, r25	; 0x3e
     dae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db0:	8d ad       	ldd	r24, Y+61	; 0x3d
     db2:	9e ad       	ldd	r25, Y+62	; 0x3e
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	69 f7       	brne	.-38     	; 0xd92 <LCD_sendCmd+0xf4>
     db8:	16 c0       	rjmp	.+44     	; 0xde6 <LCD_sendCmd+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dba:	fe 01       	movw	r30, r28
     dbc:	ff 96       	adiw	r30, 0x3f	; 63
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e af       	std	Y+62, r25	; 0x3e
     dd0:	8d af       	std	Y+61, r24	; 0x3d
     dd2:	8d ad       	ldd	r24, Y+61	; 0x3d
     dd4:	9e ad       	ldd	r25, Y+62	; 0x3e
     dd6:	9a af       	std	Y+58, r25	; 0x3a
     dd8:	89 af       	std	Y+57, r24	; 0x39
     dda:	89 ad       	ldd	r24, Y+57	; 0x39
     ddc:	9a ad       	ldd	r25, Y+58	; 0x3a
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <LCD_sendCmd+0x140>
     de2:	9a af       	std	Y+58, r25	; 0x3a
     de4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, LCD_EN);
     de6:	a2 e3       	ldi	r26, 0x32	; 50
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e2 e3       	ldi	r30, 0x32	; 50
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 64       	ori	r24, 0x40	; 64
     df2:	8c 93       	st	X, r24
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	a0 e8       	ldi	r26, 0x80	; 128
     dfa:	bf e3       	ldi	r27, 0x3F	; 63
     dfc:	8d ab       	std	Y+53, r24	; 0x35
     dfe:	9e ab       	std	Y+54, r25	; 0x36
     e00:	af ab       	std	Y+55, r26	; 0x37
     e02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e04:	6d a9       	ldd	r22, Y+53	; 0x35
     e06:	7e a9       	ldd	r23, Y+54	; 0x36
     e08:	8f a9       	ldd	r24, Y+55	; 0x37
     e0a:	98 ad       	ldd	r25, Y+56	; 0x38
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	4a ef       	ldi	r20, 0xFA	; 250
     e12:	54 e4       	ldi	r21, 0x44	; 68
     e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	89 ab       	std	Y+49, r24	; 0x31
     e1e:	9a ab       	std	Y+50, r25	; 0x32
     e20:	ab ab       	std	Y+51, r26	; 0x33
     e22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e24:	69 a9       	ldd	r22, Y+49	; 0x31
     e26:	7a a9       	ldd	r23, Y+50	; 0x32
     e28:	8b a9       	ldd	r24, Y+51	; 0x33
     e2a:	9c a9       	ldd	r25, Y+52	; 0x34
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e8       	ldi	r20, 0x80	; 128
     e32:	5f e3       	ldi	r21, 0x3F	; 63
     e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e38:	88 23       	and	r24, r24
     e3a:	2c f4       	brge	.+10     	; 0xe46 <LCD_sendCmd+0x1a8>
		__ticks = 1;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	98 ab       	std	Y+48, r25	; 0x30
     e42:	8f a7       	std	Y+47, r24	; 0x2f
     e44:	3f c0       	rjmp	.+126    	; 0xec4 <LCD_sendCmd+0x226>
	else if (__tmp > 65535)
     e46:	69 a9       	ldd	r22, Y+49	; 0x31
     e48:	7a a9       	ldd	r23, Y+50	; 0x32
     e4a:	8b a9       	ldd	r24, Y+51	; 0x33
     e4c:	9c a9       	ldd	r25, Y+52	; 0x34
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	3f ef       	ldi	r19, 0xFF	; 255
     e52:	4f e7       	ldi	r20, 0x7F	; 127
     e54:	57 e4       	ldi	r21, 0x47	; 71
     e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e5a:	18 16       	cp	r1, r24
     e5c:	4c f5       	brge	.+82     	; 0xeb0 <LCD_sendCmd+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5e:	6d a9       	ldd	r22, Y+53	; 0x35
     e60:	7e a9       	ldd	r23, Y+54	; 0x36
     e62:	8f a9       	ldd	r24, Y+55	; 0x37
     e64:	98 ad       	ldd	r25, Y+56	; 0x38
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e2       	ldi	r20, 0x20	; 32
     e6c:	51 e4       	ldi	r21, 0x41	; 65
     e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	bc 01       	movw	r22, r24
     e78:	cd 01       	movw	r24, r26
     e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	98 ab       	std	Y+48, r25	; 0x30
     e84:	8f a7       	std	Y+47, r24	; 0x2f
     e86:	0f c0       	rjmp	.+30     	; 0xea6 <LCD_sendCmd+0x208>
     e88:	88 ec       	ldi	r24, 0xC8	; 200
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	9e a7       	std	Y+46, r25	; 0x2e
     e8e:	8d a7       	std	Y+45, r24	; 0x2d
     e90:	8d a5       	ldd	r24, Y+45	; 0x2d
     e92:	9e a5       	ldd	r25, Y+46	; 0x2e
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <LCD_sendCmd+0x1f6>
     e98:	9e a7       	std	Y+46, r25	; 0x2e
     e9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e9e:	98 a9       	ldd	r25, Y+48	; 0x30
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	98 ab       	std	Y+48, r25	; 0x30
     ea4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea8:	98 a9       	ldd	r25, Y+48	; 0x30
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	69 f7       	brne	.-38     	; 0xe88 <LCD_sendCmd+0x1ea>
     eae:	14 c0       	rjmp	.+40     	; 0xed8 <LCD_sendCmd+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb0:	69 a9       	ldd	r22, Y+49	; 0x31
     eb2:	7a a9       	ldd	r23, Y+50	; 0x32
     eb4:	8b a9       	ldd	r24, Y+51	; 0x33
     eb6:	9c a9       	ldd	r25, Y+52	; 0x34
     eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	98 ab       	std	Y+48, r25	; 0x30
     ec2:	8f a7       	std	Y+47, r24	; 0x2f
     ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec6:	98 a9       	ldd	r25, Y+48	; 0x30
     ec8:	9c a7       	std	Y+44, r25	; 0x2c
     eca:	8b a7       	std	Y+43, r24	; 0x2b
     ecc:	8b a5       	ldd	r24, Y+43	; 0x2b
     ece:	9c a5       	ldd	r25, Y+44	; 0x2c
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <LCD_sendCmd+0x232>
     ed4:	9c a7       	std	Y+44, r25	; 0x2c
     ed6:	8b a7       	std	Y+43, r24	; 0x2b
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a0 e8       	ldi	r26, 0x80	; 128
     ede:	bf e3       	ldi	r27, 0x3F	; 63
     ee0:	8f a3       	std	Y+39, r24	; 0x27
     ee2:	98 a7       	std	Y+40, r25	; 0x28
     ee4:	a9 a7       	std	Y+41, r26	; 0x29
     ee6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	6f a1       	ldd	r22, Y+39	; 0x27
     eea:	78 a5       	ldd	r23, Y+40	; 0x28
     eec:	89 a5       	ldd	r24, Y+41	; 0x29
     eee:	9a a5       	ldd	r25, Y+42	; 0x2a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a ef       	ldi	r20, 0xFA	; 250
     ef6:	54 e4       	ldi	r21, 0x44	; 68
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8b a3       	std	Y+35, r24	; 0x23
     f02:	9c a3       	std	Y+36, r25	; 0x24
     f04:	ad a3       	std	Y+37, r26	; 0x25
     f06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f08:	6b a1       	ldd	r22, Y+35	; 0x23
     f0a:	7c a1       	ldd	r23, Y+36	; 0x24
     f0c:	8d a1       	ldd	r24, Y+37	; 0x25
     f0e:	9e a1       	ldd	r25, Y+38	; 0x26
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <LCD_sendCmd+0x28c>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9a a3       	std	Y+34, r25	; 0x22
     f26:	89 a3       	std	Y+33, r24	; 0x21
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <LCD_sendCmd+0x30a>
	else if (__tmp > 65535)
     f2a:	6b a1       	ldd	r22, Y+35	; 0x23
     f2c:	7c a1       	ldd	r23, Y+36	; 0x24
     f2e:	8d a1       	ldd	r24, Y+37	; 0x25
     f30:	9e a1       	ldd	r25, Y+38	; 0x26
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <LCD_sendCmd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	6f a1       	ldd	r22, Y+39	; 0x27
     f44:	78 a5       	ldd	r23, Y+40	; 0x28
     f46:	89 a5       	ldd	r24, Y+41	; 0x29
     f48:	9a a5       	ldd	r25, Y+42	; 0x2a
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9a a3       	std	Y+34, r25	; 0x22
     f68:	89 a3       	std	Y+33, r24	; 0x21
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <LCD_sendCmd+0x2ec>
     f6c:	88 ec       	ldi	r24, 0xC8	; 200
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	98 a3       	std	Y+32, r25	; 0x20
     f72:	8f 8f       	std	Y+31, r24	; 0x1f
     f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f76:	98 a1       	ldd	r25, Y+32	; 0x20
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCmd+0x2da>
     f7c:	98 a3       	std	Y+32, r25	; 0x20
     f7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	89 a1       	ldd	r24, Y+33	; 0x21
     f82:	9a a1       	ldd	r25, Y+34	; 0x22
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9a a3       	std	Y+34, r25	; 0x22
     f88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	89 a1       	ldd	r24, Y+33	; 0x21
     f8c:	9a a1       	ldd	r25, Y+34	; 0x22
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <LCD_sendCmd+0x2ce>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <LCD_sendCmd+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	6b a1       	ldd	r22, Y+35	; 0x23
     f96:	7c a1       	ldd	r23, Y+36	; 0x24
     f98:	8d a1       	ldd	r24, Y+37	; 0x25
     f9a:	9e a1       	ldd	r25, Y+38	; 0x26
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9a a3       	std	Y+34, r25	; 0x22
     fa6:	89 a3       	std	Y+33, r24	; 0x21
     fa8:	89 a1       	ldd	r24, Y+33	; 0x21
     faa:	9a a1       	ldd	r25, Y+34	; 0x22
     fac:	9e 8f       	std	Y+30, r25	; 0x1e
     fae:	8d 8f       	std	Y+29, r24	; 0x1d
     fb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <LCD_sendCmd+0x316>
     fb8:	9e 8f       	std	Y+30, r25	; 0x1e
     fba:	8d 8f       	std	Y+29, r24	; 0x1d
		#endif

		_delay_ms(1);
	#else
	_delay_ms(1);
	LCD_DATA_PORT = cmd;
     fbc:	a5 e3       	ldi	r26, 0x35	; 53
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	fe 01       	movw	r30, r28
     fc2:	e9 5b       	subi	r30, 0xB9	; 185
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	8c 93       	st	X, r24
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e8       	ldi	r26, 0x80	; 128
     fd0:	bf e3       	ldi	r27, 0x3F	; 63
     fd2:	89 8f       	std	Y+25, r24	; 0x19
     fd4:	9a 8f       	std	Y+26, r25	; 0x1a
     fd6:	ab 8f       	std	Y+27, r26	; 0x1b
     fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	69 8d       	ldd	r22, Y+25	; 0x19
     fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a ef       	ldi	r20, 0xFA	; 250
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8d 8b       	std	Y+21, r24	; 0x15
     ff4:	9e 8b       	std	Y+22, r25	; 0x16
     ff6:	af 8b       	std	Y+23, r26	; 0x17
     ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ffa:	6d 89       	ldd	r22, Y+21	; 0x15
     ffc:	7e 89       	ldd	r23, Y+22	; 0x16
     ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    1000:	98 8d       	ldd	r25, Y+24	; 0x18
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <LCD_sendCmd+0x37e>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	3f c0       	rjmp	.+126    	; 0x109a <LCD_sendCmd+0x3fc>
	else if (__tmp > 65535)
    101c:	6d 89       	ldd	r22, Y+21	; 0x15
    101e:	7e 89       	ldd	r23, Y+22	; 0x16
    1020:	8f 89       	ldd	r24, Y+23	; 0x17
    1022:	98 8d       	ldd	r25, Y+24	; 0x18
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <LCD_sendCmd+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	69 8d       	ldd	r22, Y+25	; 0x19
    1036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9c 8b       	std	Y+20, r25	; 0x14
    105a:	8b 8b       	std	Y+19, r24	; 0x13
    105c:	0f c0       	rjmp	.+30     	; 0x107c <LCD_sendCmd+0x3de>
    105e:	88 ec       	ldi	r24, 0xC8	; 200
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9a 8b       	std	Y+18, r25	; 0x12
    1064:	89 8b       	std	Y+17, r24	; 0x11
    1066:	89 89       	ldd	r24, Y+17	; 0x11
    1068:	9a 89       	ldd	r25, Y+18	; 0x12
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCD_sendCmd+0x3cc>
    106e:	9a 8b       	std	Y+18, r25	; 0x12
    1070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	8b 89       	ldd	r24, Y+19	; 0x13
    1074:	9c 89       	ldd	r25, Y+20	; 0x14
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9c 8b       	std	Y+20, r25	; 0x14
    107a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <LCD_sendCmd+0x3c0>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <LCD_sendCmd+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9c 8b       	std	Y+20, r25	; 0x14
    1098:	8b 8b       	std	Y+19, r24	; 0x13
    109a:	8b 89       	ldd	r24, Y+19	; 0x13
    109c:	9c 89       	ldd	r25, Y+20	; 0x14
    109e:	98 8b       	std	Y+16, r25	; 0x10
    10a0:	8f 87       	std	Y+15, r24	; 0x0f
    10a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a4:	98 89       	ldd	r25, Y+16	; 0x10
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <LCD_sendCmd+0x408>
    10aa:	98 8b       	std	Y+16, r25	; 0x10
    10ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	#endif
	CLEAR_BIT(LCD_CTRL_PORT, LCD_EN);
    10ae:	a2 e3       	ldi	r26, 0x32	; 50
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e2 e3       	ldi	r30, 0x32	; 50
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7b       	andi	r24, 0xBF	; 191
    10ba:	8c 93       	st	X, r24
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a0 e8       	ldi	r26, 0x80	; 128
    10c2:	bf e3       	ldi	r27, 0x3F	; 63
    10c4:	8b 87       	std	Y+11, r24	; 0x0b
    10c6:	9c 87       	std	Y+12, r25	; 0x0c
    10c8:	ad 87       	std	Y+13, r26	; 0x0d
    10ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	4a ef       	ldi	r20, 0xFA	; 250
    10da:	54 e4       	ldi	r21, 0x44	; 68
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	8f 83       	std	Y+7, r24	; 0x07
    10e6:	98 87       	std	Y+8, r25	; 0x08
    10e8:	a9 87       	std	Y+9, r26	; 0x09
    10ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ec:	6f 81       	ldd	r22, Y+7	; 0x07
    10ee:	78 85       	ldd	r23, Y+8	; 0x08
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e8       	ldi	r20, 0x80	; 128
    10fa:	5f e3       	ldi	r21, 0x3F	; 63
    10fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1100:	88 23       	and	r24, r24
    1102:	2c f4       	brge	.+10     	; 0x110e <LCD_sendCmd+0x470>
		__ticks = 1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	3f c0       	rjmp	.+126    	; 0x118c <LCD_sendCmd+0x4ee>
	else if (__tmp > 65535)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	57 e4       	ldi	r21, 0x47	; 71
    111e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1122:	18 16       	cp	r1, r24
    1124:	4c f5       	brge	.+82     	; 0x1178 <LCD_sendCmd+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	6b 85       	ldd	r22, Y+11	; 0x0b
    1128:	7c 85       	ldd	r23, Y+12	; 0x0c
    112a:	8d 85       	ldd	r24, Y+13	; 0x0d
    112c:	9e 85       	ldd	r25, Y+14	; 0x0e
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e2       	ldi	r20, 0x20	; 32
    1134:	51 e4       	ldi	r21, 0x41	; 65
    1136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9e 83       	std	Y+6, r25	; 0x06
    114c:	8d 83       	std	Y+5, r24	; 0x05
    114e:	0f c0       	rjmp	.+30     	; 0x116e <LCD_sendCmd+0x4d0>
    1150:	88 ec       	ldi	r24, 0xC8	; 200
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9c 83       	std	Y+4, r25	; 0x04
    1156:	8b 83       	std	Y+3, r24	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <LCD_sendCmd+0x4be>
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	69 f7       	brne	.-38     	; 0x1150 <LCD_sendCmd+0x4b2>
    1176:	14 c0       	rjmp	.+40     	; 0x11a0 <LCD_sendCmd+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <LCD_sendCmd+0x4fa>
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    11a0:	c9 5b       	subi	r28, 0xB9	; 185
    11a2:	df 4f       	sbci	r29, 0xFF	; 255
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	08 95       	ret

000011b8 <LCD_putCharacter>:

void LCD_putCharacter(const unsigned char ch)
{
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	c7 54       	subi	r28, 0x47	; 71
    11c6:	d0 40       	sbci	r29, 0x00	; 0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	fe 01       	movw	r30, r28
    11d4:	e9 5b       	subi	r30, 0xB9	; 185
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT, LCD_RS);
    11da:	a2 e3       	ldi	r26, 0x32	; 50
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 61       	ori	r24, 0x10	; 16
    11e6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RW);
    11e8:	a2 e3       	ldi	r26, 0x32	; 50
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e2 e3       	ldi	r30, 0x32	; 50
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8f 7d       	andi	r24, 0xDF	; 223
    11f4:	8c 93       	st	X, r24
    11f6:	fe 01       	movw	r30, r28
    11f8:	ed 5b       	subi	r30, 0xBD	; 189
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e8       	ldi	r26, 0x80	; 128
    1202:	bf e3       	ldi	r27, 0x3F	; 63
    1204:	80 83       	st	Z, r24
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	a2 83       	std	Z+2, r26	; 0x02
    120a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	8e 01       	movw	r16, r28
    120e:	01 5c       	subi	r16, 0xC1	; 193
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	fe 01       	movw	r30, r28
    1214:	ed 5b       	subi	r30, 0xBD	; 189
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4a ef       	ldi	r20, 0xFA	; 250
    1226:	54 e4       	ldi	r21, 0x44	; 68
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <LCD_putCharacter+0xa8>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e af       	std	Y+62, r25	; 0x3e
    125c:	8d af       	std	Y+61, r24	; 0x3d
    125e:	46 c0       	rjmp	.+140    	; 0x12ec <LCD_putCharacter+0x134>
	else if (__tmp > 65535)
    1260:	fe 01       	movw	r30, r28
    1262:	ff 96       	adiw	r30, 0x3f	; 63
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	64 f5       	brge	.+88     	; 0x12d4 <LCD_putCharacter+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	fe 01       	movw	r30, r28
    127e:	ed 5b       	subi	r30, 0xBD	; 189
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e af       	std	Y+62, r25	; 0x3e
    12a8:	8d af       	std	Y+61, r24	; 0x3d
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <LCD_putCharacter+0x112>
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c af       	std	Y+60, r25	; 0x3c
    12b2:	8b af       	std	Y+59, r24	; 0x3b
    12b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    12b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <LCD_putCharacter+0x100>
    12bc:	9c af       	std	Y+60, r25	; 0x3c
    12be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9e af       	std	Y+62, r25	; 0x3e
    12c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    12cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <LCD_putCharacter+0xf4>
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <LCD_putCharacter+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	fe 01       	movw	r30, r28
    12d6:	ff 96       	adiw	r30, 0x3f	; 63
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e af       	std	Y+62, r25	; 0x3e
    12ea:	8d af       	std	Y+61, r24	; 0x3d
    12ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    12f0:	9a af       	std	Y+58, r25	; 0x3a
    12f2:	89 af       	std	Y+57, r24	; 0x39
    12f4:	89 ad       	ldd	r24, Y+57	; 0x39
    12f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <LCD_putCharacter+0x140>
    12fc:	9a af       	std	Y+58, r25	; 0x3a
    12fe:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, LCD_EN);
    1300:	a2 e3       	ldi	r26, 0x32	; 50
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 64       	ori	r24, 0x40	; 64
    130c:	8c 93       	st	X, r24
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e8       	ldi	r26, 0x80	; 128
    1314:	bf e3       	ldi	r27, 0x3F	; 63
    1316:	8d ab       	std	Y+53, r24	; 0x35
    1318:	9e ab       	std	Y+54, r25	; 0x36
    131a:	af ab       	std	Y+55, r26	; 0x37
    131c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131e:	6d a9       	ldd	r22, Y+53	; 0x35
    1320:	7e a9       	ldd	r23, Y+54	; 0x36
    1322:	8f a9       	ldd	r24, Y+55	; 0x37
    1324:	98 ad       	ldd	r25, Y+56	; 0x38
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4a ef       	ldi	r20, 0xFA	; 250
    132c:	54 e4       	ldi	r21, 0x44	; 68
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	89 ab       	std	Y+49, r24	; 0x31
    1338:	9a ab       	std	Y+50, r25	; 0x32
    133a:	ab ab       	std	Y+51, r26	; 0x33
    133c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    133e:	69 a9       	ldd	r22, Y+49	; 0x31
    1340:	7a a9       	ldd	r23, Y+50	; 0x32
    1342:	8b a9       	ldd	r24, Y+51	; 0x33
    1344:	9c a9       	ldd	r25, Y+52	; 0x34
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1352:	88 23       	and	r24, r24
    1354:	2c f4       	brge	.+10     	; 0x1360 <LCD_putCharacter+0x1a8>
		__ticks = 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	98 ab       	std	Y+48, r25	; 0x30
    135c:	8f a7       	std	Y+47, r24	; 0x2f
    135e:	3f c0       	rjmp	.+126    	; 0x13de <LCD_putCharacter+0x226>
	else if (__tmp > 65535)
    1360:	69 a9       	ldd	r22, Y+49	; 0x31
    1362:	7a a9       	ldd	r23, Y+50	; 0x32
    1364:	8b a9       	ldd	r24, Y+51	; 0x33
    1366:	9c a9       	ldd	r25, Y+52	; 0x34
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	4f e7       	ldi	r20, 0x7F	; 127
    136e:	57 e4       	ldi	r21, 0x47	; 71
    1370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1374:	18 16       	cp	r1, r24
    1376:	4c f5       	brge	.+82     	; 0x13ca <LCD_putCharacter+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	6d a9       	ldd	r22, Y+53	; 0x35
    137a:	7e a9       	ldd	r23, Y+54	; 0x36
    137c:	8f a9       	ldd	r24, Y+55	; 0x37
    137e:	98 ad       	ldd	r25, Y+56	; 0x38
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	98 ab       	std	Y+48, r25	; 0x30
    139e:	8f a7       	std	Y+47, r24	; 0x2f
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <LCD_putCharacter+0x208>
    13a2:	88 ec       	ldi	r24, 0xC8	; 200
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9e a7       	std	Y+46, r25	; 0x2e
    13a8:	8d a7       	std	Y+45, r24	; 0x2d
    13aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_putCharacter+0x1f6>
    13b2:	9e a7       	std	Y+46, r25	; 0x2e
    13b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b8:	98 a9       	ldd	r25, Y+48	; 0x30
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	98 ab       	std	Y+48, r25	; 0x30
    13be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c2:	98 a9       	ldd	r25, Y+48	; 0x30
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	69 f7       	brne	.-38     	; 0x13a2 <LCD_putCharacter+0x1ea>
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <LCD_putCharacter+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ca:	69 a9       	ldd	r22, Y+49	; 0x31
    13cc:	7a a9       	ldd	r23, Y+50	; 0x32
    13ce:	8b a9       	ldd	r24, Y+51	; 0x33
    13d0:	9c a9       	ldd	r25, Y+52	; 0x34
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	98 ab       	std	Y+48, r25	; 0x30
    13dc:	8f a7       	std	Y+47, r24	; 0x2f
    13de:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e0:	98 a9       	ldd	r25, Y+48	; 0x30
    13e2:	9c a7       	std	Y+44, r25	; 0x2c
    13e4:	8b a7       	std	Y+43, r24	; 0x2b
    13e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <LCD_putCharacter+0x232>
    13ee:	9c a7       	std	Y+44, r25	; 0x2c
    13f0:	8b a7       	std	Y+43, r24	; 0x2b
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e8       	ldi	r26, 0x80	; 128
    13f8:	bf e3       	ldi	r27, 0x3F	; 63
    13fa:	8f a3       	std	Y+39, r24	; 0x27
    13fc:	98 a7       	std	Y+40, r25	; 0x28
    13fe:	a9 a7       	std	Y+41, r26	; 0x29
    1400:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1402:	6f a1       	ldd	r22, Y+39	; 0x27
    1404:	78 a5       	ldd	r23, Y+40	; 0x28
    1406:	89 a5       	ldd	r24, Y+41	; 0x29
    1408:	9a a5       	ldd	r25, Y+42	; 0x2a
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4a ef       	ldi	r20, 0xFA	; 250
    1410:	54 e4       	ldi	r21, 0x44	; 68
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	8b a3       	std	Y+35, r24	; 0x23
    141c:	9c a3       	std	Y+36, r25	; 0x24
    141e:	ad a3       	std	Y+37, r26	; 0x25
    1420:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1422:	6b a1       	ldd	r22, Y+35	; 0x23
    1424:	7c a1       	ldd	r23, Y+36	; 0x24
    1426:	8d a1       	ldd	r24, Y+37	; 0x25
    1428:	9e a1       	ldd	r25, Y+38	; 0x26
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	5f e3       	ldi	r21, 0x3F	; 63
    1432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1436:	88 23       	and	r24, r24
    1438:	2c f4       	brge	.+10     	; 0x1444 <LCD_putCharacter+0x28c>
		__ticks = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9a a3       	std	Y+34, r25	; 0x22
    1440:	89 a3       	std	Y+33, r24	; 0x21
    1442:	3f c0       	rjmp	.+126    	; 0x14c2 <LCD_putCharacter+0x30a>
	else if (__tmp > 65535)
    1444:	6b a1       	ldd	r22, Y+35	; 0x23
    1446:	7c a1       	ldd	r23, Y+36	; 0x24
    1448:	8d a1       	ldd	r24, Y+37	; 0x25
    144a:	9e a1       	ldd	r25, Y+38	; 0x26
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	4c f5       	brge	.+82     	; 0x14ae <LCD_putCharacter+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145c:	6f a1       	ldd	r22, Y+39	; 0x27
    145e:	78 a5       	ldd	r23, Y+40	; 0x28
    1460:	89 a5       	ldd	r24, Y+41	; 0x29
    1462:	9a a5       	ldd	r25, Y+42	; 0x2a
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e2       	ldi	r20, 0x20	; 32
    146a:	51 e4       	ldi	r21, 0x41	; 65
    146c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9a a3       	std	Y+34, r25	; 0x22
    1482:	89 a3       	std	Y+33, r24	; 0x21
    1484:	0f c0       	rjmp	.+30     	; 0x14a4 <LCD_putCharacter+0x2ec>
    1486:	88 ec       	ldi	r24, 0xC8	; 200
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	98 a3       	std	Y+32, r25	; 0x20
    148c:	8f 8f       	std	Y+31, r24	; 0x1f
    148e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1490:	98 a1       	ldd	r25, Y+32	; 0x20
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <LCD_putCharacter+0x2da>
    1496:	98 a3       	std	Y+32, r25	; 0x20
    1498:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149a:	89 a1       	ldd	r24, Y+33	; 0x21
    149c:	9a a1       	ldd	r25, Y+34	; 0x22
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	9a a3       	std	Y+34, r25	; 0x22
    14a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	89 a1       	ldd	r24, Y+33	; 0x21
    14a6:	9a a1       	ldd	r25, Y+34	; 0x22
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	69 f7       	brne	.-38     	; 0x1486 <LCD_putCharacter+0x2ce>
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <LCD_putCharacter+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ae:	6b a1       	ldd	r22, Y+35	; 0x23
    14b0:	7c a1       	ldd	r23, Y+36	; 0x24
    14b2:	8d a1       	ldd	r24, Y+37	; 0x25
    14b4:	9e a1       	ldd	r25, Y+38	; 0x26
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9a a3       	std	Y+34, r25	; 0x22
    14c0:	89 a3       	std	Y+33, r24	; 0x21
    14c2:	89 a1       	ldd	r24, Y+33	; 0x21
    14c4:	9a a1       	ldd	r25, Y+34	; 0x22
    14c6:	9e 8f       	std	Y+30, r25	; 0x1e
    14c8:	8d 8f       	std	Y+29, r24	; 0x1d
    14ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <LCD_putCharacter+0x316>
    14d2:	9e 8f       	std	Y+30, r25	; 0x1e
    14d4:	8d 8f       	std	Y+29, r24	; 0x1d
		#endif

		_delay_ms(1);
	#else
	_delay_ms(1);
	LCD_DATA_PORT = ch;
    14d6:	a5 e3       	ldi	r26, 0x35	; 53
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	fe 01       	movw	r30, r28
    14dc:	e9 5b       	subi	r30, 0xB9	; 185
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	8c 93       	st	X, r24
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e8       	ldi	r26, 0x80	; 128
    14ea:	bf e3       	ldi	r27, 0x3F	; 63
    14ec:	89 8f       	std	Y+25, r24	; 0x19
    14ee:	9a 8f       	std	Y+26, r25	; 0x1a
    14f0:	ab 8f       	std	Y+27, r26	; 0x1b
    14f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f4:	69 8d       	ldd	r22, Y+25	; 0x19
    14f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	4a ef       	ldi	r20, 0xFA	; 250
    1502:	54 e4       	ldi	r21, 0x44	; 68
    1504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	8d 8b       	std	Y+21, r24	; 0x15
    150e:	9e 8b       	std	Y+22, r25	; 0x16
    1510:	af 8b       	std	Y+23, r26	; 0x17
    1512:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1514:	6d 89       	ldd	r22, Y+21	; 0x15
    1516:	7e 89       	ldd	r23, Y+22	; 0x16
    1518:	8f 89       	ldd	r24, Y+23	; 0x17
    151a:	98 8d       	ldd	r25, Y+24	; 0x18
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	5f e3       	ldi	r21, 0x3F	; 63
    1524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1528:	88 23       	and	r24, r24
    152a:	2c f4       	brge	.+10     	; 0x1536 <LCD_putCharacter+0x37e>
		__ticks = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
    1534:	3f c0       	rjmp	.+126    	; 0x15b4 <LCD_putCharacter+0x3fc>
	else if (__tmp > 65535)
    1536:	6d 89       	ldd	r22, Y+21	; 0x15
    1538:	7e 89       	ldd	r23, Y+22	; 0x16
    153a:	8f 89       	ldd	r24, Y+23	; 0x17
    153c:	98 8d       	ldd	r25, Y+24	; 0x18
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	4f e7       	ldi	r20, 0x7F	; 127
    1544:	57 e4       	ldi	r21, 0x47	; 71
    1546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154a:	18 16       	cp	r1, r24
    154c:	4c f5       	brge	.+82     	; 0x15a0 <LCD_putCharacter+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154e:	69 8d       	ldd	r22, Y+25	; 0x19
    1550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e2       	ldi	r20, 0x20	; 32
    155c:	51 e4       	ldi	r21, 0x41	; 65
    155e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9c 8b       	std	Y+20, r25	; 0x14
    1574:	8b 8b       	std	Y+19, r24	; 0x13
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <LCD_putCharacter+0x3de>
    1578:	88 ec       	ldi	r24, 0xC8	; 200
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9a 8b       	std	Y+18, r25	; 0x12
    157e:	89 8b       	std	Y+17, r24	; 0x11
    1580:	89 89       	ldd	r24, Y+17	; 0x11
    1582:	9a 89       	ldd	r25, Y+18	; 0x12
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <LCD_putCharacter+0x3cc>
    1588:	9a 8b       	std	Y+18, r25	; 0x12
    158a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158c:	8b 89       	ldd	r24, Y+19	; 0x13
    158e:	9c 89       	ldd	r25, Y+20	; 0x14
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	9c 8b       	std	Y+20, r25	; 0x14
    1594:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1596:	8b 89       	ldd	r24, Y+19	; 0x13
    1598:	9c 89       	ldd	r25, Y+20	; 0x14
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	69 f7       	brne	.-38     	; 0x1578 <LCD_putCharacter+0x3c0>
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <LCD_putCharacter+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a0:	6d 89       	ldd	r22, Y+21	; 0x15
    15a2:	7e 89       	ldd	r23, Y+22	; 0x16
    15a4:	8f 89       	ldd	r24, Y+23	; 0x17
    15a6:	98 8d       	ldd	r25, Y+24	; 0x18
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9c 8b       	std	Y+20, r25	; 0x14
    15b2:	8b 8b       	std	Y+19, r24	; 0x13
    15b4:	8b 89       	ldd	r24, Y+19	; 0x13
    15b6:	9c 89       	ldd	r25, Y+20	; 0x14
    15b8:	98 8b       	std	Y+16, r25	; 0x10
    15ba:	8f 87       	std	Y+15, r24	; 0x0f
    15bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15be:	98 89       	ldd	r25, Y+16	; 0x10
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <LCD_putCharacter+0x408>
    15c4:	98 8b       	std	Y+16, r25	; 0x10
    15c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	#endif
	CLEAR_BIT(LCD_CTRL_PORT, LCD_EN);
    15c8:	a2 e3       	ldi	r26, 0x32	; 50
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e2 e3       	ldi	r30, 0x32	; 50
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 7b       	andi	r24, 0xBF	; 191
    15d4:	8c 93       	st	X, r24
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e8       	ldi	r26, 0x80	; 128
    15dc:	bf e3       	ldi	r27, 0x3F	; 63
    15de:	8b 87       	std	Y+11, r24	; 0x0b
    15e0:	9c 87       	std	Y+12, r25	; 0x0c
    15e2:	ad 87       	std	Y+13, r26	; 0x0d
    15e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a ef       	ldi	r20, 0xFA	; 250
    15f4:	54 e4       	ldi	r21, 0x44	; 68
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8f 83       	std	Y+7, r24	; 0x07
    1600:	98 87       	std	Y+8, r25	; 0x08
    1602:	a9 87       	std	Y+9, r26	; 0x09
    1604:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	2c f4       	brge	.+10     	; 0x1628 <LCD_putCharacter+0x470>
		__ticks = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <LCD_putCharacter+0x4ee>
	else if (__tmp > 65535)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f5       	brge	.+82     	; 0x1692 <LCD_putCharacter+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	6b 85       	ldd	r22, Y+11	; 0x0b
    1642:	7c 85       	ldd	r23, Y+12	; 0x0c
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <LCD_putCharacter+0x4d0>
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <LCD_putCharacter+0x4be>
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f7       	brne	.-38     	; 0x166a <LCD_putCharacter+0x4b2>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <LCD_putCharacter+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <LCD_putCharacter+0x4fa>
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    16ba:	c9 5b       	subi	r28, 0xB9	; 185
    16bc:	df 4f       	sbci	r29, 0xFF	; 255
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	08 95       	ret

000016d2 <_LCD_putCharacter>:

void _LCD_putCharacter(const unsigned char ch)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	e9 97       	sbiw	r28, 0x39	; 57
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT, LCD_RS);
    16e8:	a2 e3       	ldi	r26, 0x32	; 50
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e2 e3       	ldi	r30, 0x32	; 50
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	80 61       	ori	r24, 0x10	; 16
    16f4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, LCD_RW);
    16f6:	a2 e3       	ldi	r26, 0x32	; 50
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e2 e3       	ldi	r30, 0x32	; 50
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 7d       	andi	r24, 0xDF	; 223
    1702:	8c 93       	st	X, r24
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e8       	ldi	r26, 0x80	; 128
    170a:	bf e3       	ldi	r27, 0x3F	; 63
    170c:	8d ab       	std	Y+53, r24	; 0x35
    170e:	9e ab       	std	Y+54, r25	; 0x36
    1710:	af ab       	std	Y+55, r26	; 0x37
    1712:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1714:	6d a9       	ldd	r22, Y+53	; 0x35
    1716:	7e a9       	ldd	r23, Y+54	; 0x36
    1718:	8f a9       	ldd	r24, Y+55	; 0x37
    171a:	98 ad       	ldd	r25, Y+56	; 0x38
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a ef       	ldi	r20, 0xFA	; 250
    1722:	54 e4       	ldi	r21, 0x44	; 68
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	89 ab       	std	Y+49, r24	; 0x31
    172e:	9a ab       	std	Y+50, r25	; 0x32
    1730:	ab ab       	std	Y+51, r26	; 0x33
    1732:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1734:	69 a9       	ldd	r22, Y+49	; 0x31
    1736:	7a a9       	ldd	r23, Y+50	; 0x32
    1738:	8b a9       	ldd	r24, Y+51	; 0x33
    173a:	9c a9       	ldd	r25, Y+52	; 0x34
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	2c f4       	brge	.+10     	; 0x1756 <_LCD_putCharacter+0x84>
		__ticks = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	98 ab       	std	Y+48, r25	; 0x30
    1752:	8f a7       	std	Y+47, r24	; 0x2f
    1754:	3f c0       	rjmp	.+126    	; 0x17d4 <_LCD_putCharacter+0x102>
	else if (__tmp > 65535)
    1756:	69 a9       	ldd	r22, Y+49	; 0x31
    1758:	7a a9       	ldd	r23, Y+50	; 0x32
    175a:	8b a9       	ldd	r24, Y+51	; 0x33
    175c:	9c a9       	ldd	r25, Y+52	; 0x34
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	57 e4       	ldi	r21, 0x47	; 71
    1766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176a:	18 16       	cp	r1, r24
    176c:	4c f5       	brge	.+82     	; 0x17c0 <_LCD_putCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176e:	6d a9       	ldd	r22, Y+53	; 0x35
    1770:	7e a9       	ldd	r23, Y+54	; 0x36
    1772:	8f a9       	ldd	r24, Y+55	; 0x37
    1774:	98 ad       	ldd	r25, Y+56	; 0x38
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e2       	ldi	r20, 0x20	; 32
    177c:	51 e4       	ldi	r21, 0x41	; 65
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	98 ab       	std	Y+48, r25	; 0x30
    1794:	8f a7       	std	Y+47, r24	; 0x2f
    1796:	0f c0       	rjmp	.+30     	; 0x17b6 <_LCD_putCharacter+0xe4>
    1798:	88 ec       	ldi	r24, 0xC8	; 200
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9e a7       	std	Y+46, r25	; 0x2e
    179e:	8d a7       	std	Y+45, r24	; 0x2d
    17a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <_LCD_putCharacter+0xd2>
    17a8:	9e a7       	std	Y+46, r25	; 0x2e
    17aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ae:	98 a9       	ldd	r25, Y+48	; 0x30
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	98 ab       	std	Y+48, r25	; 0x30
    17b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	69 f7       	brne	.-38     	; 0x1798 <_LCD_putCharacter+0xc6>
    17be:	14 c0       	rjmp	.+40     	; 0x17e8 <_LCD_putCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c0:	69 a9       	ldd	r22, Y+49	; 0x31
    17c2:	7a a9       	ldd	r23, Y+50	; 0x32
    17c4:	8b a9       	ldd	r24, Y+51	; 0x33
    17c6:	9c a9       	ldd	r25, Y+52	; 0x34
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	98 ab       	std	Y+48, r25	; 0x30
    17d2:	8f a7       	std	Y+47, r24	; 0x2f
    17d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d6:	98 a9       	ldd	r25, Y+48	; 0x30
    17d8:	9c a7       	std	Y+44, r25	; 0x2c
    17da:	8b a7       	std	Y+43, r24	; 0x2b
    17dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17de:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <_LCD_putCharacter+0x10e>
    17e4:	9c a7       	std	Y+44, r25	; 0x2c
    17e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, LCD_EN);
    17e8:	a2 e3       	ldi	r26, 0x32	; 50
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e2 e3       	ldi	r30, 0x32	; 50
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	80 64       	ori	r24, 0x40	; 64
    17f4:	8c 93       	st	X, r24
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e8       	ldi	r26, 0x80	; 128
    17fc:	bf e3       	ldi	r27, 0x3F	; 63
    17fe:	8f a3       	std	Y+39, r24	; 0x27
    1800:	98 a7       	std	Y+40, r25	; 0x28
    1802:	a9 a7       	std	Y+41, r26	; 0x29
    1804:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6f a1       	ldd	r22, Y+39	; 0x27
    1808:	78 a5       	ldd	r23, Y+40	; 0x28
    180a:	89 a5       	ldd	r24, Y+41	; 0x29
    180c:	9a a5       	ldd	r25, Y+42	; 0x2a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a ef       	ldi	r20, 0xFA	; 250
    1814:	54 e4       	ldi	r21, 0x44	; 68
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8b a3       	std	Y+35, r24	; 0x23
    1820:	9c a3       	std	Y+36, r25	; 0x24
    1822:	ad a3       	std	Y+37, r26	; 0x25
    1824:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1826:	6b a1       	ldd	r22, Y+35	; 0x23
    1828:	7c a1       	ldd	r23, Y+36	; 0x24
    182a:	8d a1       	ldd	r24, Y+37	; 0x25
    182c:	9e a1       	ldd	r25, Y+38	; 0x26
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <_LCD_putCharacter+0x176>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9a a3       	std	Y+34, r25	; 0x22
    1844:	89 a3       	std	Y+33, r24	; 0x21
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <_LCD_putCharacter+0x1f4>
	else if (__tmp > 65535)
    1848:	6b a1       	ldd	r22, Y+35	; 0x23
    184a:	7c a1       	ldd	r23, Y+36	; 0x24
    184c:	8d a1       	ldd	r24, Y+37	; 0x25
    184e:	9e a1       	ldd	r25, Y+38	; 0x26
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <_LCD_putCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6f a1       	ldd	r22, Y+39	; 0x27
    1862:	78 a5       	ldd	r23, Y+40	; 0x28
    1864:	89 a5       	ldd	r24, Y+41	; 0x29
    1866:	9a a5       	ldd	r25, Y+42	; 0x2a
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9a a3       	std	Y+34, r25	; 0x22
    1886:	89 a3       	std	Y+33, r24	; 0x21
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <_LCD_putCharacter+0x1d6>
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	98 a3       	std	Y+32, r25	; 0x20
    1890:	8f 8f       	std	Y+31, r24	; 0x1f
    1892:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1894:	98 a1       	ldd	r25, Y+32	; 0x20
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <_LCD_putCharacter+0x1c4>
    189a:	98 a3       	std	Y+32, r25	; 0x20
    189c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	89 a1       	ldd	r24, Y+33	; 0x21
    18a0:	9a a1       	ldd	r25, Y+34	; 0x22
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9a a3       	std	Y+34, r25	; 0x22
    18a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <_LCD_putCharacter+0x1b8>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <_LCD_putCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6b a1       	ldd	r22, Y+35	; 0x23
    18b4:	7c a1       	ldd	r23, Y+36	; 0x24
    18b6:	8d a1       	ldd	r24, Y+37	; 0x25
    18b8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9a a3       	std	Y+34, r25	; 0x22
    18c4:	89 a3       	std	Y+33, r24	; 0x21
    18c6:	89 a1       	ldd	r24, Y+33	; 0x21
    18c8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ca:	9e 8f       	std	Y+30, r25	; 0x1e
    18cc:	8d 8f       	std	Y+29, r24	; 0x1d
    18ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <_LCD_putCharacter+0x200>
    18d6:	9e 8f       	std	Y+30, r25	; 0x1e
    18d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = ch;
    18da:	e5 e3       	ldi	r30, 0x35	; 53
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	89 ad       	ldd	r24, Y+57	; 0x39
    18e0:	80 83       	st	Z, r24
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 e8       	ldi	r26, 0x80	; 128
    18e8:	bf e3       	ldi	r27, 0x3F	; 63
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	69 8d       	ldd	r22, Y+25	; 0x19
    18f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a ef       	ldi	r20, 0xFA	; 250
    1900:	54 e4       	ldi	r21, 0x44	; 68
    1902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8d 8b       	std	Y+21, r24	; 0x15
    190c:	9e 8b       	std	Y+22, r25	; 0x16
    190e:	af 8b       	std	Y+23, r26	; 0x17
    1910:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1912:	6d 89       	ldd	r22, Y+21	; 0x15
    1914:	7e 89       	ldd	r23, Y+22	; 0x16
    1916:	8f 89       	ldd	r24, Y+23	; 0x17
    1918:	98 8d       	ldd	r25, Y+24	; 0x18
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1926:	88 23       	and	r24, r24
    1928:	2c f4       	brge	.+10     	; 0x1934 <_LCD_putCharacter+0x262>
		__ticks = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9c 8b       	std	Y+20, r25	; 0x14
    1930:	8b 8b       	std	Y+19, r24	; 0x13
    1932:	3f c0       	rjmp	.+126    	; 0x19b2 <_LCD_putCharacter+0x2e0>
	else if (__tmp > 65535)
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	4c f5       	brge	.+82     	; 0x199e <_LCD_putCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	69 8d       	ldd	r22, Y+25	; 0x19
    194e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <_LCD_putCharacter+0x2c2>
    1976:	88 ec       	ldi	r24, 0xC8	; 200
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9a 8b       	std	Y+18, r25	; 0x12
    197c:	89 8b       	std	Y+17, r24	; 0x11
    197e:	89 89       	ldd	r24, Y+17	; 0x11
    1980:	9a 89       	ldd	r25, Y+18	; 0x12
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <_LCD_putCharacter+0x2b0>
    1986:	9a 8b       	std	Y+18, r25	; 0x12
    1988:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	8b 89       	ldd	r24, Y+19	; 0x13
    198c:	9c 89       	ldd	r25, Y+20	; 0x14
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9c 8b       	std	Y+20, r25	; 0x14
    1992:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	8b 89       	ldd	r24, Y+19	; 0x13
    1996:	9c 89       	ldd	r25, Y+20	; 0x14
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <_LCD_putCharacter+0x2a4>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <_LCD_putCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	6d 89       	ldd	r22, Y+21	; 0x15
    19a0:	7e 89       	ldd	r23, Y+22	; 0x16
    19a2:	8f 89       	ldd	r24, Y+23	; 0x17
    19a4:	98 8d       	ldd	r25, Y+24	; 0x18
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9c 8b       	std	Y+20, r25	; 0x14
    19b0:	8b 8b       	std	Y+19, r24	; 0x13
    19b2:	8b 89       	ldd	r24, Y+19	; 0x13
    19b4:	9c 89       	ldd	r25, Y+20	; 0x14
    19b6:	98 8b       	std	Y+16, r25	; 0x10
    19b8:	8f 87       	std	Y+15, r24	; 0x0f
    19ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    19bc:	98 89       	ldd	r25, Y+16	; 0x10
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <_LCD_putCharacter+0x2ec>
    19c2:	98 8b       	std	Y+16, r25	; 0x10
    19c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, LCD_EN);
    19c6:	a2 e3       	ldi	r26, 0x32	; 50
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e2 e3       	ldi	r30, 0x32	; 50
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 7b       	andi	r24, 0xBF	; 191
    19d2:	8c 93       	st	X, r24
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	bf e3       	ldi	r27, 0x3F	; 63
    19dc:	8b 87       	std	Y+11, r24	; 0x0b
    19de:	9c 87       	std	Y+12, r25	; 0x0c
    19e0:	ad 87       	std	Y+13, r26	; 0x0d
    19e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a ef       	ldi	r20, 0xFA	; 250
    19f2:	54 e4       	ldi	r21, 0x44	; 68
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	8f 83       	std	Y+7, r24	; 0x07
    19fe:	98 87       	std	Y+8, r25	; 0x08
    1a00:	a9 87       	std	Y+9, r26	; 0x09
    1a02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a04:	6f 81       	ldd	r22, Y+7	; 0x07
    1a06:	78 85       	ldd	r23, Y+8	; 0x08
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <_LCD_putCharacter+0x354>
		__ticks = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <_LCD_putCharacter+0x3d2>
	else if (__tmp > 65535)
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	4c f5       	brge	.+82     	; 0x1a90 <_LCD_putCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <_LCD_putCharacter+0x3b4>
    1a68:	88 ec       	ldi	r24, 0xC8	; 200
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <_LCD_putCharacter+0x3a2>
    1a78:	9c 83       	std	Y+4, r25	; 0x04
    1a7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <_LCD_putCharacter+0x396>
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <_LCD_putCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	6f 81       	ldd	r22, Y+7	; 0x07
    1a92:	78 85       	ldd	r23, Y+8	; 0x08
    1a94:	89 85       	ldd	r24, Y+9	; 0x09
    1a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <_LCD_putCharacter+0x3de>
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ab8:	e9 96       	adiw	r28, 0x39	; 57
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <LCD_putString>:

void LCD_putString(const char *str)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <LCD_putString+0x6>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <LCD_putString+0x24>
	while(*str != '\0'){
		LCD_putCharacter(*str);
    1ada:	e9 81       	ldd	r30, Y+1	; 0x01
    1adc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ade:	80 81       	ld	r24, Z
    1ae0:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <LCD_putCharacter>
		str++;
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void LCD_putString(const char *str)
{
	while(*str != '\0'){
    1aee:	e9 81       	ldd	r30, Y+1	; 0x01
    1af0:	fa 81       	ldd	r31, Y+2	; 0x02
    1af2:	80 81       	ld	r24, Z
    1af4:	88 23       	and	r24, r24
    1af6:	89 f7       	brne	.-30     	; 0x1ada <LCD_putString+0x10>
		LCD_putCharacter(*str);
		str++;
	}
}
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <LCD_clearScreen>:

void LCD_clearScreen()
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCmd(CLEAR_COMMAND);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_sendCmd>
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <LCD_goToRowColumn+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <LCD_goToRowColumn+0x8>
    1b1e:	0f 92       	push	r0
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	8a 83       	std	Y+2, r24	; 0x02
    1b26:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

		/* first of all calculate the required address */
		switch(row)
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3d 83       	std	Y+5, r19	; 0x05
    1b30:	2c 83       	std	Y+4, r18	; 0x04
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	9d 81       	ldd	r25, Y+5	; 0x05
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	c1 f0       	breq	.+48     	; 0x1b6c <LCD_goToRowColumn+0x56>
    1b3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <LCD_goToRowColumn+0x3a>
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <LCD_goToRowColumn+0x50>
    1b4e:	19 c0       	rjmp	.+50     	; 0x1b82 <LCD_goToRowColumn+0x6c>
    1b50:	2c 81       	ldd	r18, Y+4	; 0x04
    1b52:	3d 81       	ldd	r19, Y+5	; 0x05
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	69 f0       	breq	.+26     	; 0x1b74 <LCD_goToRowColumn+0x5e>
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	91 05       	cpc	r25, r1
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <LCD_goToRowColumn+0x66>
    1b64:	0e c0       	rjmp	.+28     	; 0x1b82 <LCD_goToRowColumn+0x6c>
		{
			case 0:
					Address=col;
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	0b c0       	rjmp	.+22     	; 0x1b82 <LCD_goToRowColumn+0x6c>
					break;
			case 1:
					Address=col+0x40;
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	80 5c       	subi	r24, 0xC0	; 192
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <LCD_goToRowColumn+0x6c>
					break;
			case 2:
					Address=col+0x10;
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	80 5f       	subi	r24, 0xF0	; 240
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <LCD_goToRowColumn+0x6c>
					break;
			case 3:
					Address=col+0x50;
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	80 5b       	subi	r24, 0xB0	; 176
    1b80:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
		/* to write to a specific address in the LCD
		 * we need to apply the corresponding command 0b10000000+Address */
		LCD_sendCmd(Address | SET_CURSOR_LOCATION);
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	80 68       	ori	r24, 0x80	; 128
    1b86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_sendCmd>
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <LCD_intToStr>:

void LCD_intToStr(const uint16 n)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	28 97       	sbiw	r28, 0x08	; 8
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	98 87       	std	Y+8, r25	; 0x08
    1bb0:	8f 83       	std	Y+7, r24	; 0x07
	char str[5] = {'\0'};
    1bb2:	85 e0       	ldi	r24, 0x05	; 5
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	32 96       	adiw	r30, 0x02	; 2
    1bb8:	df 01       	movw	r26, r30
    1bba:	98 2f       	mov	r25, r24
    1bbc:	1d 92       	st	X+, r1
    1bbe:	9a 95       	dec	r25
    1bc0:	e9 f7       	brne	.-6      	; 0x1bbc <LCD_intToStr+0x22>

	uint8 i = 0;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < 5; i++)str[i] = ' ';
    1bc4:	19 82       	std	Y+1, r1	; 0x01
    1bc6:	0d c0       	rjmp	.+26     	; 0x1be2 <LCD_intToStr+0x48>
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	ce 01       	movw	r24, r28
    1bd0:	02 96       	adiw	r24, 0x02	; 2
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	e2 0f       	add	r30, r18
    1bd6:	f3 1f       	adc	r31, r19
    1bd8:	80 e2       	ldi	r24, 0x20	; 32
    1bda:	80 83       	st	Z, r24
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	8f 5f       	subi	r24, 0xFF	; 255
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	85 30       	cpi	r24, 0x05	; 5
    1be6:	80 f3       	brcs	.-32     	; 0x1bc8 <LCD_intToStr+0x2e>
	sprintf(str, "%04u", n);/*read 10 bits only*/
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <LCD_intToStr+0x50>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <LCD_intToStr+0x52>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <LCD_intToStr+0x54>
    1bee:	ed b7       	in	r30, 0x3d	; 61
    1bf0:	fe b7       	in	r31, 0x3e	; 62
    1bf2:	31 96       	adiw	r30, 0x01	; 1
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	02 96       	adiw	r24, 0x02	; 2
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	80 83       	st	Z, r24
    1bfc:	80 e6       	ldi	r24, 0x60	; 96
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	93 83       	std	Z+3, r25	; 0x03
    1c02:	82 83       	std	Z+2, r24	; 0x02
    1c04:	8f 81       	ldd	r24, Y+7	; 0x07
    1c06:	98 85       	ldd	r25, Y+8	; 0x08
    1c08:	95 83       	std	Z+5, r25	; 0x05
    1c0a:	84 83       	std	Z+4, r24	; 0x04
    1c0c:	0e 94 04 15 	call	0x2a08	; 0x2a08 <sprintf>
    1c10:	ad b7       	in	r26, 0x3d	; 61
    1c12:	be b7       	in	r27, 0x3e	; 62
    1c14:	16 96       	adiw	r26, 0x06	; 6
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	be bf       	out	0x3e, r27	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	ad bf       	out	0x3d, r26	; 61
	LCD_putString(str);
    1c20:	ce 01       	movw	r24, r28
    1c22:	02 96       	adiw	r24, 0x02	; 2
    1c24:	0e 94 65 0d 	call	0x1aca	; 0x1aca <LCD_putString>
}
    1c28:	28 96       	adiw	r28, 0x08	; 8
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <main>:


void CONTROL_callbackUpdateGTick();

int main()
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	6d 97       	sbiw	r28, 0x1d	; 29
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61

	/*uart initialization*/
	UART_CONF_STRUCT uart_config;
	uart_config.baud_rate = 9600;
    1c4e:	80 e8       	ldi	r24, 0x80	; 128
    1c50:	95 e2       	ldi	r25, 0x25	; 37
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	8f 87       	std	Y+15, r24	; 0x0f
    1c58:	98 8b       	std	Y+16, r25	; 0x10
    1c5a:	a9 8b       	std	Y+17, r26	; 0x11
    1c5c:	ba 8b       	std	Y+18, r27	; 0x12
	uart_config.two_stop_bits = FALSE;
    1c5e:	1b 8a       	std	Y+19, r1	; 0x13
	uart_config.parity = DISABLED;
    1c60:	1d 8a       	std	Y+21, r1	; 0x15
	uart_config.num_of_bits = EIGHT_BIT;
    1c62:	81 e1       	ldi	r24, 0x11	; 17
    1c64:	8c 8b       	std	Y+20, r24	; 0x14
	UART_init(&uart_config);
    1c66:	ce 01       	movw	r24, r28
    1c68:	0f 96       	adiw	r24, 0x0f	; 15
    1c6a:	0e 94 17 13 	call	0x262e	; 0x262e <UART_init>

	/*timer1 initialization*/
	TIMER1_CONFIG timer1_config;
	timer1_config.clock = FCPU_256;
    1c6e:	84 e0       	ldi	r24, 0x04	; 4
    1c70:	8f 8b       	std	Y+23, r24	; 0x17
	timer1_config.mode = CTC;
    1c72:	88 e0       	ldi	r24, 0x08	; 8
    1c74:	8e 8b       	std	Y+22, r24	; 0x16
	timer1_config.init_value = 0;
    1c76:	19 8e       	std	Y+25, r1	; 0x19
    1c78:	18 8e       	std	Y+24, r1	; 0x18
	timer1_config.compare_value = 31250;/*generate interrupt every second*/
    1c7a:	82 e1       	ldi	r24, 0x12	; 18
    1c7c:	9a e7       	ldi	r25, 0x7A	; 122
    1c7e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c80:	8a 8f       	std	Y+26, r24	; 0x1a
	Timer1_setCallBackCompare(CONTROL_callbackUpdateGTick);
    1c82:	89 e1       	ldi	r24, 0x19	; 25
    1c84:	91 e1       	ldi	r25, 0x11	; 17
    1c86:	0e 94 5e 12 	call	0x24bc	; 0x24bc <Timer1_setCallBackCompare>
	Timer1_init(&timer1_config);
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	46 96       	adiw	r24, 0x16	; 22
    1c8e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <Timer1_init>
	Timer1_Stop();
    1c92:	0e 94 70 12 	call	0x24e0	; 0x24e0 <Timer1_Stop>

	/*eeprom initialization*/
	EEPROM_init();
    1c96:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_init>

	DDRD |= 0x0C;//motor, make pins 2 and 3 output
    1c9a:	a1 e3       	ldi	r26, 0x31	; 49
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e1 e3       	ldi	r30, 0x31	; 49
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8c 60       	ori	r24, 0x0C	; 12
    1ca6:	8c 93       	st	X, r24
	DDRB |= 0x01;//buzzer, make pin 0 output
    1ca8:	a7 e3       	ldi	r26, 0x37	; 55
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e7 e3       	ldi	r30, 0x37	; 55
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	81 60       	ori	r24, 0x01	; 1
    1cb4:	8c 93       	st	X, r24
	DDRA = 0xff;
    1cb6:	ea e3       	ldi	r30, 0x3A	; 58
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	80 83       	st	Z, r24
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	aa ef       	ldi	r26, 0xFA	; 250
    1cc4:	b3 e4       	ldi	r27, 0x43	; 67
    1cc6:	8b 87       	std	Y+11, r24	; 0x0b
    1cc8:	9c 87       	std	Y+12, r25	; 0x0c
    1cca:	ad 87       	std	Y+13, r26	; 0x0d
    1ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8f 83       	std	Y+7, r24	; 0x07
    1ce8:	98 87       	std	Y+8, r25	; 0x08
    1cea:	a9 87       	std	Y+9, r26	; 0x09
    1cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <main+0xd6>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <main+0x154>
	else if (__tmp > 65535)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <main+0x136>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <main+0x124>
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <main+0x118>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <main+0x160>
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);/*wait for LCD in HMI*/
	sei();
    1da2:	78 94       	sei

	CONTROL_newPassword();
    1da4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <CONTROL_newPassword>
	control_state = CTRL_OPTIONS;
    1da8:	10 92 73 00 	sts	0x0073, r1

	while(1){

		switch(control_state){
    1dac:	80 91 73 00 	lds	r24, 0x0073
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	3d 8f       	std	Y+29, r19	; 0x1d
    1db6:	2c 8f       	std	Y+28, r18	; 0x1c
    1db8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	61 f0       	breq	.+24     	; 0x1dda <main+0x1a0>
    1dc2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1dc4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	51 f0       	breq	.+20     	; 0x1de0 <main+0x1a6>
    1dcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	61 f7       	brne	.-40     	; 0x1dac <main+0x172>
			case CTRL_OPTIONS:
				CONTROL_stateOptions();
    1dd4:	0e 94 98 10 	call	0x2130	; 0x2130 <CONTROL_stateOptions>
    1dd8:	e9 cf       	rjmp	.-46     	; 0x1dac <main+0x172>
			break;
			case CTRL_OPEN_DOOR:
				CONTROL_stateOpenDoor();
    1dda:	0e 94 b4 10 	call	0x2168	; 0x2168 <CONTROL_stateOpenDoor>
    1dde:	e6 cf       	rjmp	.-52     	; 0x1dac <main+0x172>
			break;
			case CTRL_CHANGE_PASSWORD:
				CONTROL_stateChangePass();
    1de0:	0e 94 0a 11 	call	0x2214	; 0x2214 <CONTROL_stateChangePass>
    1de4:	e3 cf       	rjmp	.-58     	; 0x1dac <main+0x172>

00001de6 <CONTROL_newPassword>:
	}
}


void CONTROL_newPassword()
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	6d 97       	sbiw	r28, 0x1d	; 29
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASS_LEN];
	uint8 password_confirm[PASS_LEN];
	uint8 i;/*loop counter*/

	do{
		UART_sendByte(NEW_PASS);
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		UART_recvString(password, '#');
    1e00:	ce 01       	movw	r24, r28
    1e02:	40 96       	adiw	r24, 0x10	; 16
    1e04:	63 e2       	ldi	r22, 0x23	; 35
    1e06:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <UART_recvString>

		UART_sendByte(CONFIRM_PASS);
    1e0a:	86 e0       	ldi	r24, 0x06	; 6
    1e0c:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		UART_recvString(password_confirm, '#');
    1e10:	ce 01       	movw	r24, r28
    1e12:	47 96       	adiw	r24, 0x17	; 23
    1e14:	63 e2       	ldi	r22, 0x23	; 35
    1e16:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <UART_recvString>
	}while(strcmp(password, password_confirm));
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	40 96       	adiw	r24, 0x10	; 16
    1e1e:	9e 01       	movw	r18, r28
    1e20:	29 5e       	subi	r18, 0xE9	; 233
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	b9 01       	movw	r22, r18
    1e26:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <strcmp>
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	31 f7       	brne	.-52     	; 0x1dfa <CONTROL_newPassword+0x14>

	/*STORE PASSWORD IN EEPROM*/
	for(i = 0; i < PASS_LEN - 1; i++){
    1e2e:	1f 86       	std	Y+15, r1	; 0x0f
    1e30:	85 c0       	rjmp	.+266    	; 0x1f3c <CONTROL_newPassword+0x156>
		EEPROM_writeByte(i, password[i]);
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e34:	48 2f       	mov	r20, r24
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	ce 01       	movw	r24, r28
    1e40:	40 96       	adiw	r24, 0x10	; 16
    1e42:	fc 01       	movw	r30, r24
    1e44:	e2 0f       	add	r30, r18
    1e46:	f3 1f       	adc	r31, r19
    1e48:	20 81       	ld	r18, Z
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	62 2f       	mov	r22, r18
    1e4e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <EEPROM_writeByte>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e2       	ldi	r26, 0x20	; 32
    1e58:	b1 e4       	ldi	r27, 0x41	; 65
    1e5a:	8b 87       	std	Y+11, r24	; 0x0b
    1e5c:	9c 87       	std	Y+12, r25	; 0x0c
    1e5e:	ad 87       	std	Y+13, r26	; 0x0d
    1e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a ef       	ldi	r20, 0xFA	; 250
    1e70:	54 e4       	ldi	r21, 0x44	; 68
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8f 83       	std	Y+7, r24	; 0x07
    1e7c:	98 87       	std	Y+8, r25	; 0x08
    1e7e:	a9 87       	std	Y+9, r26	; 0x09
    1e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e8       	ldi	r20, 0x80	; 128
    1e90:	5f e3       	ldi	r21, 0x3F	; 63
    1e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	2c f4       	brge	.+10     	; 0x1ea4 <CONTROL_newPassword+0xbe>
		__ticks = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	3f c0       	rjmp	.+126    	; 0x1f22 <CONTROL_newPassword+0x13c>
	else if (__tmp > 65535)
    1ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea6:	78 85       	ldd	r23, Y+8	; 0x08
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	4c f5       	brge	.+82     	; 0x1f0e <CONTROL_newPassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <CONTROL_newPassword+0x11e>
    1ee6:	88 ec       	ldi	r24, 0xC8	; 200
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <CONTROL_newPassword+0x10c>
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <CONTROL_newPassword+0x100>
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <CONTROL_newPassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <CONTROL_newPassword+0x148>
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(CONFIRM_PASS);
		UART_recvString(password_confirm, '#');
	}while(strcmp(password, password_confirm));

	/*STORE PASSWORD IN EEPROM*/
	for(i = 0; i < PASS_LEN - 1; i++){
    1f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	86 30       	cpi	r24, 0x06	; 6
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <CONTROL_newPassword+0x15e>
    1f42:	77 cf       	rjmp	.-274    	; 0x1e32 <CONTROL_newPassword+0x4c>
		EEPROM_writeByte(i, password[i]);
		_delay_ms(EEPROM_DELAY);
	}
}
    1f44:	6d 96       	adiw	r28, 0x1d	; 29
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <CONTROL_validatePassword>:

/*get current password and return true if it's correct*/
bool CONTROL_validatePassword()
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASS_LEN];
	uint8 stored_password[PASS_LEN];
	uint8 i = 0;/*loop counter*/
    1f6a:	1f 86       	std	Y+15, r1	; 0x0f

	/*read PASSWORD from EEPROM*/
	for(i = 0; i < PASS_LEN - 1; i++){
    1f6c:	1f 86       	std	Y+15, r1	; 0x0f
    1f6e:	84 c0       	rjmp	.+264    	; 0x2078 <CONTROL_validatePassword+0x122>
		EEPROM_readByte(i, &(stored_password[i]));
    1f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f72:	48 2f       	mov	r20, r24
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e 01       	movw	r18, r28
    1f7e:	29 5e       	subi	r18, 0xE9	; 233
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	28 0f       	add	r18, r24
    1f84:	39 1f       	adc	r19, r25
    1f86:	ca 01       	movw	r24, r20
    1f88:	b9 01       	movw	r22, r18
    1f8a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_readByte>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e2       	ldi	r26, 0x20	; 32
    1f94:	b1 e4       	ldi	r27, 0x41	; 65
    1f96:	8b 87       	std	Y+11, r24	; 0x0b
    1f98:	9c 87       	std	Y+12, r25	; 0x0c
    1f9a:	ad 87       	std	Y+13, r26	; 0x0d
    1f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8f 83       	std	Y+7, r24	; 0x07
    1fb8:	98 87       	std	Y+8, r25	; 0x08
    1fba:	a9 87       	std	Y+9, r26	; 0x09
    1fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <CONTROL_validatePassword+0x8a>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <CONTROL_validatePassword+0x108>
	else if (__tmp > 65535)
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <CONTROL_validatePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <CONTROL_validatePassword+0xea>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 83       	std	Y+4, r25	; 0x04
    2028:	8b 83       	std	Y+3, r24	; 0x03
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <CONTROL_validatePassword+0xd8>
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <CONTROL_validatePassword+0xcc>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <CONTROL_validatePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6f 81       	ldd	r22, Y+7	; 0x07
    204c:	78 85       	ldd	r23, Y+8	; 0x08
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	9a 85       	ldd	r25, Y+10	; 0x0a
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <CONTROL_validatePassword+0x114>
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
	uint8 password[PASS_LEN];
	uint8 stored_password[PASS_LEN];
	uint8 i = 0;/*loop counter*/

	/*read PASSWORD from EEPROM*/
	for(i = 0; i < PASS_LEN - 1; i++){
    2072:	8f 85       	ldd	r24, Y+15	; 0x0f
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	8f 87       	std	Y+15, r24	; 0x0f
    2078:	8f 85       	ldd	r24, Y+15	; 0x0f
    207a:	86 30       	cpi	r24, 0x06	; 6
    207c:	08 f4       	brcc	.+2      	; 0x2080 <CONTROL_validatePassword+0x12a>
    207e:	78 cf       	rjmp	.-272    	; 0x1f70 <CONTROL_validatePassword+0x1a>
		EEPROM_readByte(i, &(stored_password[i]));
		_delay_ms(EEPROM_DELAY);
	}
	password[i] = '\0';
    2080:	8f 85       	ldd	r24, Y+15	; 0x0f
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	ce 01       	movw	r24, r28
    2088:	40 96       	adiw	r24, 0x10	; 16
    208a:	fc 01       	movw	r30, r24
    208c:	e2 0f       	add	r30, r18
    208e:	f3 1f       	adc	r31, r19
    2090:	10 82       	st	Z, r1

	if(!strcmp(stored_password, "44444")){
    2092:	ce 01       	movw	r24, r28
    2094:	47 96       	adiw	r24, 0x17	; 23
    2096:	25 e6       	ldi	r18, 0x65	; 101
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	b9 01       	movw	r22, r18
    209c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <strcmp>
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	41 f4       	brne	.+16     	; 0x20b4 <CONTROL_validatePassword+0x15e>
		DDRA = 0xff;
    20a4:	ea e3       	ldi	r30, 0x3A	; 58
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	80 83       	st	Z, r24
		PORTA = 0xff;
    20ac:	eb e3       	ldi	r30, 0x3B	; 59
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	8f ef       	ldi	r24, 0xFF	; 255
    20b2:	80 83       	st	Z, r24
	}
	UART_sendByte(ENTER_PASS);
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>

	/*
	 * dbg
	 */
	UART_sendString(stored_password, '#');
    20ba:	ce 01       	movw	r24, r28
    20bc:	47 96       	adiw	r24, 0x17	; 23
    20be:	63 e2       	ldi	r22, 0x23	; 35
    20c0:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendString>
	UART_recvString(password, '#');
    20c4:	ce 01       	movw	r24, r28
    20c6:	40 96       	adiw	r24, 0x10	; 16
    20c8:	63 e2       	ldi	r22, 0x23	; 35
    20ca:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <UART_recvString>

		/*compare to eeprom*/
	if(!strcmp(password, stored_password)){/*match*/
    20ce:	ce 01       	movw	r24, r28
    20d0:	40 96       	adiw	r24, 0x10	; 16
    20d2:	9e 01       	movw	r18, r28
    20d4:	29 5e       	subi	r18, 0xE9	; 233
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
    20d8:	b9 01       	movw	r22, r18
    20da:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <strcmp>
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	19 f4       	brne	.+6      	; 0x20e8 <CONTROL_validatePassword+0x192>
		return TRUE;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	8e 8f       	std	Y+30, r24	; 0x1e
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <CONTROL_validatePassword+0x194>
	}

	return FALSE;
    20e8:	1e 8e       	std	Y+30, r1	; 0x1e
    20ea:	8e 8d       	ldd	r24, Y+30	; 0x1e

}
    20ec:	6e 96       	adiw	r28, 0x1e	; 30
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <CONTROL_alarm>:

void CONTROL_alarm()
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(ALARM);
    2106:	84 e0       	ldi	r24, 0x04	; 4
    2108:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
	buzzer_on();
    210c:	0e 94 2a 11 	call	0x2254	; 0x2254 <buzzer_on>

	g_tick = 0;
    2110:	10 92 74 00 	sts	0x0074, r1
	Timer1_start(FCPU_256);
    2114:	84 e0       	ldi	r24, 0x04	; 4
    2116:	0e 94 2f 12 	call	0x245e	; 0x245e <Timer1_start>
	while(g_tick < ALARM_PERIOD);//wait for door opening
    211a:	80 91 74 00 	lds	r24, 0x0074
    211e:	8c 33       	cpi	r24, 0x3C	; 60
    2120:	e0 f3       	brcs	.-8      	; 0x211a <CONTROL_alarm+0x1c>
	Timer1_Stop();
    2122:	0e 94 70 12 	call	0x24e0	; 0x24e0 <Timer1_Stop>

	buzzer_off();
    2126:	0e 94 38 11 	call	0x2270	; 0x2270 <buzzer_off>
}
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <CONTROL_stateOptions>:

void CONTROL_stateOptions()
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(OPTIONS);/*send options command to HMI*/
    213a:	85 e0       	ldi	r24, 0x05	; 5
    213c:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>

	uint8 data = UART_recvByte();/*recieve option from HMI*/
    2140:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recvByte>
    2144:	89 83       	std	Y+1, r24	; 0x01

	if(data == '+'){
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	8b 32       	cpi	r24, 0x2B	; 43
    214a:	21 f4       	brne	.+8      	; 0x2154 <CONTROL_stateOptions+0x24>
		control_state = CTRL_CHANGE_PASSWORD;
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	80 93 73 00 	sts	0x0073, r24
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <CONTROL_stateOptions+0x30>
		return;
	}
	if(data == '-'){
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	8d 32       	cpi	r24, 0x2D	; 45
    2158:	19 f4       	brne	.+6      	; 0x2160 <CONTROL_stateOptions+0x30>
		control_state = CTRL_OPEN_DOOR;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	80 93 73 00 	sts	0x0073, r24
		return;
	}

}
    2160:	0f 90       	pop	r0
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <CONTROL_stateOpenDoor>:


void CONTROL_stateOpenDoor()
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	0f 92       	push	r0
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
	uint8 number_of_attempts = 0;/*number of attempts to enter password*/
    2172:	19 82       	std	Y+1, r1	; 0x01
    2174:	03 c0       	rjmp	.+6      	; 0x217c <CONTROL_stateOpenDoor+0x14>

	while((number_of_attempts < MAX_PASS_ATTEMPTS) && !(CONTROL_validatePassword())){
		number_of_attempts++;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	8f 5f       	subi	r24, 0xFF	; 255
    217a:	89 83       	std	Y+1, r24	; 0x01

void CONTROL_stateOpenDoor()
{
	uint8 number_of_attempts = 0;/*number of attempts to enter password*/

	while((number_of_attempts < MAX_PASS_ATTEMPTS) && !(CONTROL_validatePassword())){
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	83 30       	cpi	r24, 0x03	; 3
    2180:	20 f4       	brcc	.+8      	; 0x218a <CONTROL_stateOpenDoor+0x22>
    2182:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <CONTROL_validatePassword>
    2186:	88 23       	and	r24, r24
    2188:	b1 f3       	breq	.-20     	; 0x2176 <CONTROL_stateOpenDoor+0xe>
		number_of_attempts++;
	}

	if(number_of_attempts >= MAX_PASS_ATTEMPTS){
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	28 f0       	brcs	.+10     	; 0x219a <CONTROL_stateOpenDoor+0x32>
		CONTROL_alarm();
    2190:	0e 94 7f 10 	call	0x20fe	; 0x20fe <CONTROL_alarm>
		control_state = CTRL_OPTIONS;
    2194:	10 92 73 00 	sts	0x0073, r1
    2198:	39 c0       	rjmp	.+114    	; 0x220c <CONTROL_stateOpenDoor+0xa4>
		return;
	}


	/*open door*/
	UART_sendByte(OPENING);
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
	motor_clockwise();
    21a0:	0e 94 46 11 	call	0x228c	; 0x228c <motor_clockwise>
	g_tick = 0;
    21a4:	10 92 74 00 	sts	0x0074, r1
	Timer1_start(FCPU_256);
    21a8:	84 e0       	ldi	r24, 0x04	; 4
    21aa:	0e 94 2f 12 	call	0x245e	; 0x245e <Timer1_start>
	while(g_tick < LOCK_PERIOD);//wait for door opening
    21ae:	80 91 74 00 	lds	r24, 0x0074
    21b2:	8f 30       	cpi	r24, 0x0F	; 15
    21b4:	e0 f3       	brcs	.-8      	; 0x21ae <CONTROL_stateOpenDoor+0x46>
	Timer1_Stop();
    21b6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <Timer1_Stop>

	DDRA = 0xFF;
    21ba:	ea e3       	ldi	r30, 0x3A	; 58
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	80 83       	st	Z, r24
	PORTA = 0xff;
    21c2:	eb e3       	ldi	r30, 0x3B	; 59
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	80 83       	st	Z, r24

	/*keep door open for a while(3 seconds)*/
	motor_stop();
    21ca:	0e 94 70 11 	call	0x22e0	; 0x22e0 <motor_stop>
	g_tick = 0;
    21ce:	10 92 74 00 	sts	0x0074, r1
	Timer1_start(FCPU_256);
    21d2:	84 e0       	ldi	r24, 0x04	; 4
    21d4:	0e 94 2f 12 	call	0x245e	; 0x245e <Timer1_start>
	while(g_tick < WAIT_PERIOD);//wait
    21d8:	80 91 74 00 	lds	r24, 0x0074
    21dc:	83 30       	cpi	r24, 0x03	; 3
    21de:	e0 f3       	brcs	.-8      	; 0x21d8 <CONTROL_stateOpenDoor+0x70>
	Timer1_Stop();
    21e0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <Timer1_Stop>

	/*lock door*/
	UART_sendByte(LOCKING);
    21e4:	83 e0       	ldi	r24, 0x03	; 3
    21e6:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
	motor_counterclockwise();
    21ea:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <motor_counterclockwise>
	g_tick = 0;
    21ee:	10 92 74 00 	sts	0x0074, r1
	Timer1_start(FCPU_256);
    21f2:	84 e0       	ldi	r24, 0x04	; 4
    21f4:	0e 94 2f 12 	call	0x245e	; 0x245e <Timer1_start>
	while(g_tick < LOCK_PERIOD);//wait for door locking
    21f8:	80 91 74 00 	lds	r24, 0x0074
    21fc:	8f 30       	cpi	r24, 0x0F	; 15
    21fe:	e0 f3       	brcs	.-8      	; 0x21f8 <CONTROL_stateOpenDoor+0x90>
	Timer1_Stop();
    2200:	0e 94 70 12 	call	0x24e0	; 0x24e0 <Timer1_Stop>
	motor_stop();
    2204:	0e 94 70 11 	call	0x22e0	; 0x22e0 <motor_stop>

	control_state = CTRL_OPTIONS;
    2208:	10 92 73 00 	sts	0x0073, r1
}
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <CONTROL_stateChangePass>:



void CONTROL_stateChangePass()
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62

	while(!CONTROL_validatePassword());/*don't break this loop until user enters correct password*/
    221c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <CONTROL_validatePassword>
    2220:	88 23       	and	r24, r24
    2222:	e1 f3       	breq	.-8      	; 0x221c <CONTROL_stateChangePass+0x8>
	CONTROL_newPassword();
    2224:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <CONTROL_newPassword>
	control_state = CTRL_OPTIONS;
    2228:	10 92 73 00 	sts	0x0073, r1

}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <CONTROL_callbackUpdateGTick>:

void CONTROL_callbackUpdateGTick()
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    223a:	80 91 74 00 	lds	r24, 0x0074
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	80 93 74 00 	sts	0x0074, r24
	PORTA = g_tick;
    2244:	eb e3       	ldi	r30, 0x3B	; 59
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 91 74 00 	lds	r24, 0x0074
    224c:	80 83       	st	Z, r24
}
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <buzzer_on>:

void buzzer_on()
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	PORTB |= 0x01;
    225c:	a8 e3       	ldi	r26, 0x38	; 56
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e8 e3       	ldi	r30, 0x38	; 56
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	81 60       	ori	r24, 0x01	; 1
    2268:	8c 93       	st	X, r24
}
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <buzzer_off>:

void buzzer_off()
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(0x01);
    2278:	a8 e3       	ldi	r26, 0x38	; 56
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e8 e3       	ldi	r30, 0x38	; 56
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8e 7f       	andi	r24, 0xFE	; 254
    2284:	8c 93       	st	X, r24
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <motor_clockwise>:


void motor_clockwise()
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	PORTD |= 1 << 3;
    2294:	a2 e3       	ldi	r26, 0x32	; 50
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e2 e3       	ldi	r30, 0x32	; 50
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	88 60       	ori	r24, 0x08	; 8
    22a0:	8c 93       	st	X, r24
	PORTD &= ~(1 << 2);
    22a2:	a2 e3       	ldi	r26, 0x32	; 50
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e2 e3       	ldi	r30, 0x32	; 50
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	8b 7f       	andi	r24, 0xFB	; 251
    22ae:	8c 93       	st	X, r24
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <motor_counterclockwise>:

void motor_counterclockwise()
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	PORTD |= 1 << 2;
    22be:	a2 e3       	ldi	r26, 0x32	; 50
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e2 e3       	ldi	r30, 0x32	; 50
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	84 60       	ori	r24, 0x04	; 4
    22ca:	8c 93       	st	X, r24
	PORTD &= ~(1 << 3);
    22cc:	a2 e3       	ldi	r26, 0x32	; 50
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e2 e3       	ldi	r30, 0x32	; 50
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	87 7f       	andi	r24, 0xF7	; 247
    22d8:	8c 93       	st	X, r24
}
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <motor_stop>:

void motor_stop()
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~(1 << 2);
    22e8:	a2 e3       	ldi	r26, 0x32	; 50
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e2 e3       	ldi	r30, 0x32	; 50
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	8b 7f       	andi	r24, 0xFB	; 251
    22f4:	8c 93       	st	X, r24
	PORTD &= ~(1 << 3);
    22f6:	a2 e3       	ldi	r26, 0x32	; 50
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e2 e3       	ldi	r30, 0x32	; 50
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	87 7f       	andi	r24, 0xF7	; 247
    2302:	8c 93       	st	X, r24
}
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <__vector_8>:

/*******************************************************************************
 *                      ISRs				                                   *
 *******************************************************************************/

ISR(TIMER1_OVF_vect){
    230a:	1f 92       	push	r1
    230c:	0f 92       	push	r0
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	0f 92       	push	r0
    2312:	11 24       	eor	r1, r1
    2314:	2f 93       	push	r18
    2316:	3f 93       	push	r19
    2318:	4f 93       	push	r20
    231a:	5f 93       	push	r21
    231c:	6f 93       	push	r22
    231e:	7f 93       	push	r23
    2320:	8f 93       	push	r24
    2322:	9f 93       	push	r25
    2324:	af 93       	push	r26
    2326:	bf 93       	push	r27
    2328:	ef 93       	push	r30
    232a:	ff 93       	push	r31
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1NormalCallBackPtr != NULL)
    2334:	80 91 75 00 	lds	r24, 0x0075
    2338:	90 91 76 00 	lds	r25, 0x0076
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	29 f0       	breq	.+10     	; 0x234a <__vector_8+0x40>
	{
/* Call the Call Back function  when there are unread data in the receive buffer */
		(*g_Timer1NormalCallBackPtr)();
    2340:	e0 91 75 00 	lds	r30, 0x0075
    2344:	f0 91 76 00 	lds	r31, 0x0076
    2348:	09 95       	icall
	}
}
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	ff 91       	pop	r31
    2350:	ef 91       	pop	r30
    2352:	bf 91       	pop	r27
    2354:	af 91       	pop	r26
    2356:	9f 91       	pop	r25
    2358:	8f 91       	pop	r24
    235a:	7f 91       	pop	r23
    235c:	6f 91       	pop	r22
    235e:	5f 91       	pop	r21
    2360:	4f 91       	pop	r20
    2362:	3f 91       	pop	r19
    2364:	2f 91       	pop	r18
    2366:	0f 90       	pop	r0
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	0f 90       	pop	r0
    236c:	1f 90       	pop	r1
    236e:	18 95       	reti

00002370 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2370:	1f 92       	push	r1
    2372:	0f 92       	push	r0
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	0f 92       	push	r0
    2378:	11 24       	eor	r1, r1
    237a:	2f 93       	push	r18
    237c:	3f 93       	push	r19
    237e:	4f 93       	push	r20
    2380:	5f 93       	push	r21
    2382:	6f 93       	push	r22
    2384:	7f 93       	push	r23
    2386:	8f 93       	push	r24
    2388:	9f 93       	push	r25
    238a:	af 93       	push	r26
    238c:	bf 93       	push	r27
    238e:	ef 93       	push	r30
    2390:	ff 93       	push	r31
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1CTCCallBackPtr != NULL)
    239a:	80 91 77 00 	lds	r24, 0x0077
    239e:	90 91 78 00 	lds	r25, 0x0078
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	29 f0       	breq	.+10     	; 0x23b0 <__vector_6+0x40>
	{
		/* Call the Call Back function  when the transmit buffer is ready to receive new data */
		(*g_Timer1CTCCallBackPtr)();
    23a6:	e0 91 77 00 	lds	r30, 0x0077
    23aa:	f0 91 78 00 	lds	r31, 0x0078
    23ae:	09 95       	icall
	}
}
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	ff 91       	pop	r31
    23b6:	ef 91       	pop	r30
    23b8:	bf 91       	pop	r27
    23ba:	af 91       	pop	r26
    23bc:	9f 91       	pop	r25
    23be:	8f 91       	pop	r24
    23c0:	7f 91       	pop	r23
    23c2:	6f 91       	pop	r22
    23c4:	5f 91       	pop	r21
    23c6:	4f 91       	pop	r20
    23c8:	3f 91       	pop	r19
    23ca:	2f 91       	pop	r18
    23cc:	0f 90       	pop	r0
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	0f 90       	pop	r0
    23d2:	1f 90       	pop	r1
    23d4:	18 95       	reti

000023d6 <Timer1_init>:


/*
 * Function responsible for initializing Timer1.
 */
void Timer1_init(TIMER1_CONFIG *timer1_config){
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <Timer1_init+0x6>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = timer1_config->init_value;
    23e4:	ac e4       	ldi	r26, 0x4C	; 76
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ea:	fa 81       	ldd	r31, Y+2	; 0x02
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	11 96       	adiw	r26, 0x01	; 1
    23f2:	9c 93       	st	X, r25
    23f4:	8e 93       	st	-X, r24
	OCR1A = timer1_config->compare_value;
    23f6:	aa e4       	ldi	r26, 0x4A	; 74
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e9 81       	ldd	r30, Y+1	; 0x01
    23fc:	fa 81       	ldd	r31, Y+2	; 0x02
    23fe:	84 81       	ldd	r24, Z+4	; 0x04
    2400:	95 81       	ldd	r25, Z+5	; 0x05
    2402:	11 96       	adiw	r26, 0x01	; 1
    2404:	9c 93       	st	X, r25
    2406:	8e 93       	st	-X, r24

	if(timer1_config->mode == CTC){
    2408:	e9 81       	ldd	r30, Y+1	; 0x01
    240a:	fa 81       	ldd	r31, Y+2	; 0x02
    240c:	80 81       	ld	r24, Z
    240e:	88 30       	cpi	r24, 0x08	; 8
    2410:	81 f4       	brne	.+32     	; 0x2432 <Timer1_init+0x5c>
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2412:	a9 e5       	ldi	r26, 0x59	; 89
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e9 e5       	ldi	r30, 0x59	; 89
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	80 61       	ori	r24, 0x10	; 16
    241e:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A);
    2420:	ef e4       	ldi	r30, 0x4F	; 79
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	88 e0       	ldi	r24, 0x08	; 8
    2426:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12);
    2428:	ee e4       	ldi	r30, 0x4E	; 78
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	88 e0       	ldi	r24, 0x08	; 8
    242e:	80 83       	st	Z, r24
    2430:	07 c0       	rjmp	.+14     	; 0x2440 <Timer1_init+0x6a>
	}else{
		TIMSK |= (1<<TOIE1);
    2432:	a9 e5       	ldi	r26, 0x59	; 89
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e9 e5       	ldi	r30, 0x59	; 89
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	84 60       	ori	r24, 0x04	; 4
    243e:	8c 93       	st	X, r24
	}

	TCCR1B |= (timer1_config->clock);
    2440:	ae e4       	ldi	r26, 0x4E	; 78
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ee e4       	ldi	r30, 0x4E	; 78
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	90 81       	ld	r25, Z
    244a:	e9 81       	ldd	r30, Y+1	; 0x01
    244c:	fa 81       	ldd	r31, Y+2	; 0x02
    244e:	81 81       	ldd	r24, Z+1	; 0x01
    2450:	89 2b       	or	r24, r25
    2452:	8c 93       	st	X, r24



}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <Timer1_start>:
void Timer1_start(TIMER1_PRESCALER clock){
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	0f 92       	push	r0
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    246a:	ec e4       	ldi	r30, 0x4C	; 76
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	11 82       	std	Z+1, r1	; 0x01
    2470:	10 82       	st	Z, r1
	TCCR1B&=0XF8;
    2472:	ae e4       	ldi	r26, 0x4E	; 78
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ee e4       	ldi	r30, 0x4E	; 78
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	88 7f       	andi	r24, 0xF8	; 248
    247e:	8c 93       	st	X, r24
	TCCR1B|=clock;
    2480:	ae e4       	ldi	r26, 0x4E	; 78
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	ee e4       	ldi	r30, 0x4E	; 78
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	90 81       	ld	r25, Z
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	89 2b       	or	r24, r25
    248e:	8c 93       	st	X, r24
}
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <Timer1_setCallBackNormal>:
void Timer1_setCallBackNormal(void(*a_ptr)(void))
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <Timer1_setCallBackNormal+0x6>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer1NormalCallBackPtr = a_ptr;
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	90 93 76 00 	sts	0x0076, r25
    24ae:	80 93 75 00 	sts	0x0075, r24
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <Timer1_setCallBackCompare>:
void Timer1_setCallBackCompare(void(*a_ptr)(void))
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <Timer1_setCallBackCompare+0x6>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer1CTCCallBackPtr = a_ptr;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	90 93 78 00 	sts	0x0078, r25
    24d2:	80 93 77 00 	sts	0x0077, r24
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <Timer1_Stop>:


void Timer1_Stop(void){
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(0X07);
    24e8:	ae e4       	ldi	r26, 0x4E	; 78
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ee e4       	ldi	r30, 0x4E	; 78
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	88 7f       	andi	r24, 0xF8	; 248
    24f4:	8c 93       	st	X, r24
}
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <Timer1_reset>:

void Timer1_reset(void){
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2504:	ec e4       	ldi	r30, 0x4C	; 76
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	11 82       	std	Z+1, r1	; 0x01
    250a:	10 82       	st	Z, r1
}
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <Timer1_value>:


uint16 Timer1_value(void){
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    251a:	ec e4       	ldi	r30, 0x4C	; 76
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
}
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <TWI_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void TWI_init(const TWI_CONFIG const *config)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <TWI_init+0x6>
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
	TWSR = 0x00;/*no pre scaler*/
    2536:	e1 e2       	ldi	r30, 0x21	; 33
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	10 82       	st	Z, r1
    TWBR = config->baud_rate;
    253c:	a0 e2       	ldi	r26, 0x20	; 32
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e9 81       	ldd	r30, Y+1	; 0x01
    2542:	fa 81       	ldd	r31, Y+2	; 0x02
    2544:	80 81       	ld	r24, Z
    2546:	8c 93       	st	X, r24
	TWAR = (config->address) << 1;/*address*/
    2548:	a2 e2       	ldi	r26, 0x22	; 34
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e9 81       	ldd	r30, Y+1	; 0x01
    254e:	fa 81       	ldd	r31, Y+2	; 0x02
    2550:	81 81       	ldd	r24, Z+1	; 0x01
    2552:	88 0f       	add	r24, r24
    2554:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /*enable twi */
    2556:	e6 e5       	ldi	r30, 0x56	; 86
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	84 e0       	ldi	r24, 0x04	; 4
    255c:	80 83       	st	Z, r24
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <TWI_start>:

void TWI_start(void)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);/*clear twint, entable start, enable twi*/
    2570:	e6 e5       	ldi	r30, 0x56	; 86
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	84 ea       	ldi	r24, 0xA4	; 164
    2576:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));/*wait until start bit is sent*/
    2578:	e6 e5       	ldi	r30, 0x56	; 86
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	88 23       	and	r24, r24
    2580:	dc f7       	brge	.-10     	; 0x2578 <TWI_start+0x10>
}
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <TWI_stop>:

void TWI_stop(void)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);/*clear twint, entable stop, enable twi*/
    2590:	e6 e5       	ldi	r30, 0x56	; 86
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	84 e9       	ldi	r24, 0x94	; 148
    2596:	80 83       	st	Z, r24
}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <TWI_write>:

void TWI_write(uint8 data)
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;/*store data in twi data register*/
    25aa:	e3 e2       	ldi	r30, 0x23	; 35
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);/*clear twint, enable twi*/
    25b2:	e6 e5       	ldi	r30, 0x56	; 86
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	84 e8       	ldi	r24, 0x84	; 132
    25b8:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));/*wait until data is sent*/
    25ba:	e6 e5       	ldi	r30, 0x56	; 86
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	88 23       	and	r24, r24
    25c2:	dc f7       	brge	.-10     	; 0x25ba <TWI_write+0x1c>
}
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);/*clear twint, enable twi, enable ack*/
    25d4:	e6 e5       	ldi	r30, 0x56	; 86
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	84 ec       	ldi	r24, 0xC4	; 196
    25da:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));/*wait until data is recieved*/
    25dc:	e6 e5       	ldi	r30, 0x56	; 86
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	88 23       	and	r24, r24
    25e4:	dc f7       	brge	.-10     	; 0x25dc <TWI_readWithACK+0x10>

    return TWDR;
    25e6:	e3 e2       	ldi	r30, 0x23	; 35
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
}
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWEN);/*clear twint, enable twi*/
    25fa:	e6 e5       	ldi	r30, 0x56	; 86
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	84 e8       	ldi	r24, 0x84	; 132
    2600:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));/*wait until data is recieved*/
    2602:	e6 e5       	ldi	r30, 0x56	; 86
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	88 23       	and	r24, r24
    260a:	dc f7       	brge	.-10     	; 0x2602 <TWI_readWithNACK+0x10>

    return TWDR;
    260c:	e3 e2       	ldi	r30, 0x23	; 35
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    return (TWSR & 0xF8);
    2620:	e1 e2       	ldi	r30, 0x21	; 33
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	88 7f       	andi	r24, 0xF8	; 248
}
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_CONF_STRUCT * const uart_config)
{
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <UART_init+0xa>
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
	/*enable uart reception and transmission*/
	UCSRB = (1 << TXEN) | (1 << RXEN);
    2640:	ea e2       	ldi	r30, 0x2A	; 42
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	88 e1       	ldi	r24, 0x18	; 24
    2646:	80 83       	st	Z, r24

	/*double speed*/
	SET_BIT(UCSRA, U2X);
    2648:	ab e2       	ldi	r26, 0x2B	; 43
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	eb e2       	ldi	r30, 0x2B	; 43
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	8c 93       	st	X, r24

	/* UCSZ1:0 = 11 For 8-bit data mode*/
	SET_BIT(UCSRC, URSEL);
    2656:	a0 e4       	ldi	r26, 0x40	; 64
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e0 e4       	ldi	r30, 0x40	; 64
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	80 68       	ori	r24, 0x80	; 128
    2662:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
    2664:	a0 e4       	ldi	r26, 0x40	; 64
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e0 e4       	ldi	r30, 0x40	; 64
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	82 60       	ori	r24, 0x02	; 2
    2670:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
    2672:	a0 e4       	ldi	r26, 0x40	; 64
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e0 e4       	ldi	r30, 0x40	; 64
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	84 60       	ori	r24, 0x04	; 4
    267e:	8c 93       	st	X, r24

	if(uart_config){
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	09 f4       	brne	.+2      	; 0x268a <UART_init+0x5c>
    2688:	ae c0       	rjmp	.+348    	; 0x27e6 <UART_init+0x1b8>


		/*Enable two stop bits*/
		if(uart_config->two_stop_bits){
    268a:	e9 81       	ldd	r30, Y+1	; 0x01
    268c:	fa 81       	ldd	r31, Y+2	; 0x02
    268e:	84 81       	ldd	r24, Z+4	; 0x04
    2690:	88 23       	and	r24, r24
    2692:	71 f0       	breq	.+28     	; 0x26b0 <UART_init+0x82>
			SET_BIT(UCSRC, URSEL);
    2694:	a0 e4       	ldi	r26, 0x40	; 64
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e0 e4       	ldi	r30, 0x40	; 64
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	80 68       	ori	r24, 0x80	; 128
    26a0:	8c 93       	st	X, r24
			SET_BIT(UCSRC, USBS);
    26a2:	a0 e4       	ldi	r26, 0x40	; 64
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e0 e4       	ldi	r30, 0x40	; 64
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	88 60       	ori	r24, 0x08	; 8
    26ae:	8c 93       	st	X, r24
		}

		/*set number of bits, if 0 default to 8 bits*/
		if(uart_config->num_of_bits){
    26b0:	e9 81       	ldd	r30, Y+1	; 0x01
    26b2:	fa 81       	ldd	r31, Y+2	; 0x02
    26b4:	85 81       	ldd	r24, Z+5	; 0x05
    26b6:	88 23       	and	r24, r24
    26b8:	e9 f0       	breq	.+58     	; 0x26f4 <UART_init+0xc6>
			UCSRC |= (uart_config->num_of_bits & 0x03) << UCSZ0;
    26ba:	a0 e4       	ldi	r26, 0x40	; 64
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	e0 e4       	ldi	r30, 0x40	; 64
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	28 2f       	mov	r18, r24
    26c6:	e9 81       	ldd	r30, Y+1	; 0x01
    26c8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ca:	85 81       	ldd	r24, Z+5	; 0x05
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	83 70       	andi	r24, 0x03	; 3
    26d2:	90 70       	andi	r25, 0x00	; 0
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	82 2b       	or	r24, r18
    26da:	8c 93       	st	X, r24

			if(uart_config->num_of_bits == NINE_BIT){
    26dc:	e9 81       	ldd	r30, Y+1	; 0x01
    26de:	fa 81       	ldd	r31, Y+2	; 0x02
    26e0:	85 81       	ldd	r24, Z+5	; 0x05
    26e2:	87 30       	cpi	r24, 0x07	; 7
    26e4:	39 f4       	brne	.+14     	; 0x26f4 <UART_init+0xc6>
				SET_BIT(UCSRB, UCSZ2);
    26e6:	aa e2       	ldi	r26, 0x2A	; 42
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ea e2       	ldi	r30, 0x2A	; 42
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	84 60       	ori	r24, 0x04	; 4
    26f2:	8c 93       	st	X, r24
			}
		}

		/*adjust parity accordingly if parity isn't disabled*/
		if(uart_config->parity){
    26f4:	e9 81       	ldd	r30, Y+1	; 0x01
    26f6:	fa 81       	ldd	r31, Y+2	; 0x02
    26f8:	86 81       	ldd	r24, Z+6	; 0x06
    26fa:	88 23       	and	r24, r24
    26fc:	a9 f0       	breq	.+42     	; 0x2728 <UART_init+0xfa>
					UCSRC |= (uart_config->parity & 0x03) << UPM0;
    26fe:	a0 e4       	ldi	r26, 0x40	; 64
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e0 e4       	ldi	r30, 0x40	; 64
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	28 2f       	mov	r18, r24
    270a:	e9 81       	ldd	r30, Y+1	; 0x01
    270c:	fa 81       	ldd	r31, Y+2	; 0x02
    270e:	86 81       	ldd	r24, Z+6	; 0x06
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	83 70       	andi	r24, 0x03	; 3
    2716:	90 70       	andi	r25, 0x00	; 0
    2718:	82 95       	swap	r24
    271a:	92 95       	swap	r25
    271c:	90 7f       	andi	r25, 0xF0	; 240
    271e:	98 27       	eor	r25, r24
    2720:	80 7f       	andi	r24, 0xF0	; 240
    2722:	98 27       	eor	r25, r24
    2724:	82 2b       	or	r24, r18
    2726:	8c 93       	st	X, r24
		}

		/*set baud rate if the specified baud rate is greater than 0*/
		if(uart_config->baud_rate > 0){
    2728:	e9 81       	ldd	r30, Y+1	; 0x01
    272a:	fa 81       	ldd	r31, Y+2	; 0x02
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	a2 81       	ldd	r26, Z+2	; 0x02
    2732:	b3 81       	ldd	r27, Z+3	; 0x03
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	a1 05       	cpc	r26, r1
    2738:	b1 05       	cpc	r27, r1
    273a:	09 f4       	brne	.+2      	; 0x273e <UART_init+0x110>
    273c:	54 c0       	rjmp	.+168    	; 0x27e6 <UART_init+0x1b8>
					CLEAR_BIT(UCSRC, URSEL);
    273e:	a0 e4       	ldi	r26, 0x40	; 64
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e0 e4       	ldi	r30, 0x40	; 64
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 77       	andi	r24, 0x7F	; 127
    274a:	8c 93       	st	X, r24
					UBRRH = BAUD_PRESCALE_DOUBLE(uart_config->baud_rate) >> 8;
    274c:	00 e4       	ldi	r16, 0x40	; 64
    274e:	10 e0       	ldi	r17, 0x00	; 0
    2750:	e9 81       	ldd	r30, Y+1	; 0x01
    2752:	fa 81       	ldd	r31, Y+2	; 0x02
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	a2 81       	ldd	r26, Z+2	; 0x02
    275a:	b3 81       	ldd	r27, Z+3	; 0x03
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	aa 1f       	adc	r26, r26
    2762:	bb 1f       	adc	r27, r27
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	aa 1f       	adc	r26, r26
    276a:	bb 1f       	adc	r27, r27
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	aa 1f       	adc	r26, r26
    2772:	bb 1f       	adc	r27, r27
    2774:	9c 01       	movw	r18, r24
    2776:	ad 01       	movw	r20, r26
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	92 e1       	ldi	r25, 0x12	; 18
    277c:	aa e7       	ldi	r26, 0x7A	; 122
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
    2788:	da 01       	movw	r26, r20
    278a:	c9 01       	movw	r24, r18
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	a1 09       	sbc	r26, r1
    2790:	b1 09       	sbc	r27, r1
    2792:	89 2f       	mov	r24, r25
    2794:	9a 2f       	mov	r25, r26
    2796:	ab 2f       	mov	r26, r27
    2798:	bb 27       	eor	r27, r27
    279a:	f8 01       	movw	r30, r16
    279c:	80 83       	st	Z, r24
					UBRRL = BAUD_PRESCALE_DOUBLE(uart_config->baud_rate);
    279e:	09 e2       	ldi	r16, 0x29	; 41
    27a0:	10 e0       	ldi	r17, 0x00	; 0
    27a2:	e9 81       	ldd	r30, Y+1	; 0x01
    27a4:	fa 81       	ldd	r31, Y+2	; 0x02
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	a2 81       	ldd	r26, Z+2	; 0x02
    27ac:	b3 81       	ldd	r27, Z+3	; 0x03
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	aa 1f       	adc	r26, r26
    27b4:	bb 1f       	adc	r27, r27
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	aa 1f       	adc	r26, r26
    27c4:	bb 1f       	adc	r27, r27
    27c6:	9c 01       	movw	r18, r24
    27c8:	ad 01       	movw	r20, r26
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	92 e1       	ldi	r25, 0x12	; 18
    27ce:	aa e7       	ldi	r26, 0x7A	; 122
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
    27da:	da 01       	movw	r26, r20
    27dc:	c9 01       	movw	r24, r18
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	f8 01       	movw	r30, r16
    27e2:	80 83       	st	Z, r24
    27e4:	0e c0       	rjmp	.+28     	; 0x2802 <UART_init+0x1d4>
					return;
		}
	}

	/*default settings if a config struct isn't provided*/
	CLEAR_BIT(UCSRC, URSEL);
    27e6:	a0 e4       	ldi	r26, 0x40	; 64
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e0 e4       	ldi	r30, 0x40	; 64
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 77       	andi	r24, 0x7F	; 127
    27f2:	8c 93       	st	X, r24
	UBRRH = BAUD_PRESCALE_DOUBLE(DEFAULT_BAUD_RATE) >> 8;
    27f4:	e0 e4       	ldi	r30, 0x40	; 64
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE_DOUBLE(DEFAULT_BAUD_RATE);
    27fa:	e9 e2       	ldi	r30, 0x29	; 41
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	87 e6       	ldi	r24, 0x67	; 103
    2800:	80 83       	st	Z, r24
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	08 95       	ret

00002810 <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	0f 92       	push	r0
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    281c:	eb e2       	ldi	r30, 0x2B	; 43
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	88 2f       	mov	r24, r24
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	80 72       	andi	r24, 0x20	; 32
    2828:	90 70       	andi	r25, 0x00	; 0
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	b9 f3       	breq	.-18     	; 0x281c <UART_sendByte+0xc>
	UDR = data;
    282e:	ec e2       	ldi	r30, 0x2C	; 44
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	80 83       	st	Z, r24
}
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <UART_recvByte>:


uint8 UART_recvByte(void)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
    2846:	eb e2       	ldi	r30, 0x2B	; 43
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	88 23       	and	r24, r24
    284e:	dc f7       	brge	.-10     	; 0x2846 <UART_recvByte+0x8>
	return UDR;
    2850:	ec e2       	ldi	r30, 0x2C	; 44
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <UART_sendString>:

void UART_sendString(const char *str, char terminator)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <UART_sendString+0x6>
    2862:	00 d0       	rcall	.+0      	; 0x2864 <UART_sendString+0x8>
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	9b 83       	std	Y+3, r25	; 0x03
    286a:	8a 83       	std	Y+2, r24	; 0x02
    286c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    286e:	19 82       	std	Y+1, r1	; 0x01
    2870:	0e c0       	rjmp	.+28     	; 0x288e <UART_sendString+0x32>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	9b 81       	ldd	r25, Y+3	; 0x03
    287c:	fc 01       	movw	r30, r24
    287e:	e2 0f       	add	r30, r18
    2880:	f3 1f       	adc	r31, r19
    2882:	80 81       	ld	r24, Z
    2884:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		i++;
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *str, char terminator)
{
	uint8 i = 0;
	while(str[i] != '\0')
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	fc 01       	movw	r30, r24
    289a:	e2 0f       	add	r30, r18
    289c:	f3 1f       	adc	r31, r19
    289e:	80 81       	ld	r24, Z
    28a0:	88 23       	and	r24, r24
    28a2:	39 f7       	brne	.-50     	; 0x2872 <UART_sendString+0x16>
	{
		UART_sendByte(str[i]);
		i++;
	}
	UART_sendByte(terminator);
    28a4:	8c 81       	ldd	r24, Y+4	; 0x04
    28a6:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <UART_recvString>:


void UART_recvString(char *str, char terminator)
{
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <UART_recvString+0xa>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <UART_recvString+0xc>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	9b 83       	std	Y+3, r25	; 0x03
    28ca:	8a 83       	std	Y+2, r24	; 0x02
    28cc:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    28ce:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_recvByte();
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	8c 01       	movw	r16, r24
    28dc:	02 0f       	add	r16, r18
    28de:	13 1f       	adc	r17, r19
    28e0:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recvByte>
    28e4:	f8 01       	movw	r30, r16
    28e6:	80 83       	st	Z, r24
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <UART_recvString+0x50>
		while(str[i] != terminator)
		{
			i++;
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_recvByte();
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	8c 01       	movw	r16, r24
    28fc:	02 0f       	add	r16, r18
    28fe:	13 1f       	adc	r17, r19
    2900:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recvByte>
    2904:	f8 01       	movw	r30, r16
    2906:	80 83       	st	Z, r24

void UART_recvString(char *str, char terminator)
{
	uint8 i = 0;
		str[i] = UART_recvByte();
		while(str[i] != terminator)
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	8a 81       	ldd	r24, Y+2	; 0x02
    2910:	9b 81       	ldd	r25, Y+3	; 0x03
    2912:	fc 01       	movw	r30, r24
    2914:	e2 0f       	add	r30, r18
    2916:	f3 1f       	adc	r31, r19
    2918:	90 81       	ld	r25, Z
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	98 17       	cp	r25, r24
    291e:	29 f7       	brne	.-54     	; 0x28ea <UART_recvString+0x32>
		{
			i++;
			str[i] = UART_recvByte();
		}
		str[i] = '\0';
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	9b 81       	ldd	r25, Y+3	; 0x03
    292a:	fc 01       	movw	r30, r24
    292c:	e2 0f       	add	r30, r18
    292e:	f3 1f       	adc	r31, r19
    2930:	10 82       	st	Z, r1
}
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	08 95       	ret

00002944 <__udivmodsi4>:
    2944:	a1 e2       	ldi	r26, 0x21	; 33
    2946:	1a 2e       	mov	r1, r26
    2948:	aa 1b       	sub	r26, r26
    294a:	bb 1b       	sub	r27, r27
    294c:	fd 01       	movw	r30, r26
    294e:	0d c0       	rjmp	.+26     	; 0x296a <__udivmodsi4_ep>

00002950 <__udivmodsi4_loop>:
    2950:	aa 1f       	adc	r26, r26
    2952:	bb 1f       	adc	r27, r27
    2954:	ee 1f       	adc	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	a2 17       	cp	r26, r18
    295a:	b3 07       	cpc	r27, r19
    295c:	e4 07       	cpc	r30, r20
    295e:	f5 07       	cpc	r31, r21
    2960:	20 f0       	brcs	.+8      	; 0x296a <__udivmodsi4_ep>
    2962:	a2 1b       	sub	r26, r18
    2964:	b3 0b       	sbc	r27, r19
    2966:	e4 0b       	sbc	r30, r20
    2968:	f5 0b       	sbc	r31, r21

0000296a <__udivmodsi4_ep>:
    296a:	66 1f       	adc	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	88 1f       	adc	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	1a 94       	dec	r1
    2974:	69 f7       	brne	.-38     	; 0x2950 <__udivmodsi4_loop>
    2976:	60 95       	com	r22
    2978:	70 95       	com	r23
    297a:	80 95       	com	r24
    297c:	90 95       	com	r25
    297e:	9b 01       	movw	r18, r22
    2980:	ac 01       	movw	r20, r24
    2982:	bd 01       	movw	r22, r26
    2984:	cf 01       	movw	r24, r30
    2986:	08 95       	ret

00002988 <__prologue_saves__>:
    2988:	2f 92       	push	r2
    298a:	3f 92       	push	r3
    298c:	4f 92       	push	r4
    298e:	5f 92       	push	r5
    2990:	6f 92       	push	r6
    2992:	7f 92       	push	r7
    2994:	8f 92       	push	r8
    2996:	9f 92       	push	r9
    2998:	af 92       	push	r10
    299a:	bf 92       	push	r11
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	ca 1b       	sub	r28, r26
    29b2:	db 0b       	sbc	r29, r27
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	09 94       	ijmp

000029c0 <__epilogue_restores__>:
    29c0:	2a 88       	ldd	r2, Y+18	; 0x12
    29c2:	39 88       	ldd	r3, Y+17	; 0x11
    29c4:	48 88       	ldd	r4, Y+16	; 0x10
    29c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    29cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d2:	b9 84       	ldd	r11, Y+9	; 0x09
    29d4:	c8 84       	ldd	r12, Y+8	; 0x08
    29d6:	df 80       	ldd	r13, Y+7	; 0x07
    29d8:	ee 80       	ldd	r14, Y+6	; 0x06
    29da:	fd 80       	ldd	r15, Y+5	; 0x05
    29dc:	0c 81       	ldd	r16, Y+4	; 0x04
    29de:	1b 81       	ldd	r17, Y+3	; 0x03
    29e0:	aa 81       	ldd	r26, Y+2	; 0x02
    29e2:	b9 81       	ldd	r27, Y+1	; 0x01
    29e4:	ce 0f       	add	r28, r30
    29e6:	d1 1d       	adc	r29, r1
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	ed 01       	movw	r28, r26
    29f4:	08 95       	ret

000029f6 <strcmp>:
    29f6:	fb 01       	movw	r30, r22
    29f8:	dc 01       	movw	r26, r24
    29fa:	8d 91       	ld	r24, X+
    29fc:	01 90       	ld	r0, Z+
    29fe:	80 19       	sub	r24, r0
    2a00:	01 10       	cpse	r0, r1
    2a02:	d9 f3       	breq	.-10     	; 0x29fa <strcmp+0x4>
    2a04:	99 0b       	sbc	r25, r25
    2a06:	08 95       	ret

00002a08 <sprintf>:
    2a08:	ae e0       	ldi	r26, 0x0E	; 14
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	ea e0       	ldi	r30, 0x0A	; 10
    2a0e:	f5 e1       	ldi	r31, 0x15	; 21
    2a10:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__+0x1c>
    2a14:	0d 89       	ldd	r16, Y+21	; 0x15
    2a16:	1e 89       	ldd	r17, Y+22	; 0x16
    2a18:	86 e0       	ldi	r24, 0x06	; 6
    2a1a:	8c 83       	std	Y+4, r24	; 0x04
    2a1c:	1a 83       	std	Y+2, r17	; 0x02
    2a1e:	09 83       	std	Y+1, r16	; 0x01
    2a20:	8f ef       	ldi	r24, 0xFF	; 255
    2a22:	9f e7       	ldi	r25, 0x7F	; 127
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	9e 01       	movw	r18, r28
    2a2a:	27 5e       	subi	r18, 0xE7	; 231
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	6f 89       	ldd	r22, Y+23	; 0x17
    2a34:	78 8d       	ldd	r23, Y+24	; 0x18
    2a36:	a9 01       	movw	r20, r18
    2a38:	0e 94 28 15 	call	0x2a50	; 0x2a50 <vfprintf>
    2a3c:	2f 81       	ldd	r18, Y+7	; 0x07
    2a3e:	38 85       	ldd	r19, Y+8	; 0x08
    2a40:	02 0f       	add	r16, r18
    2a42:	13 1f       	adc	r17, r19
    2a44:	f8 01       	movw	r30, r16
    2a46:	10 82       	st	Z, r1
    2a48:	2e 96       	adiw	r28, 0x0e	; 14
    2a4a:	e4 e0       	ldi	r30, 0x04	; 4
    2a4c:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__+0x1c>

00002a50 <vfprintf>:
    2a50:	ab e0       	ldi	r26, 0x0B	; 11
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	ee e2       	ldi	r30, 0x2E	; 46
    2a56:	f5 e1       	ldi	r31, 0x15	; 21
    2a58:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__>
    2a5c:	3c 01       	movw	r6, r24
    2a5e:	2b 01       	movw	r4, r22
    2a60:	5a 01       	movw	r10, r20
    2a62:	fc 01       	movw	r30, r24
    2a64:	17 82       	std	Z+7, r1	; 0x07
    2a66:	16 82       	std	Z+6, r1	; 0x06
    2a68:	83 81       	ldd	r24, Z+3	; 0x03
    2a6a:	81 fd       	sbrc	r24, 1
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <vfprintf+0x24>
    2a6e:	6f ef       	ldi	r22, 0xFF	; 255
    2a70:	7f ef       	ldi	r23, 0xFF	; 255
    2a72:	c6 c1       	rjmp	.+908    	; 0x2e00 <vfprintf+0x3b0>
    2a74:	9a e0       	ldi	r25, 0x0A	; 10
    2a76:	89 2e       	mov	r8, r25
    2a78:	1e 01       	movw	r2, r28
    2a7a:	08 94       	sec
    2a7c:	21 1c       	adc	r2, r1
    2a7e:	31 1c       	adc	r3, r1
    2a80:	f3 01       	movw	r30, r6
    2a82:	23 81       	ldd	r18, Z+3	; 0x03
    2a84:	f2 01       	movw	r30, r4
    2a86:	23 fd       	sbrc	r18, 3
    2a88:	85 91       	lpm	r24, Z+
    2a8a:	23 ff       	sbrs	r18, 3
    2a8c:	81 91       	ld	r24, Z+
    2a8e:	2f 01       	movw	r4, r30
    2a90:	88 23       	and	r24, r24
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <vfprintf+0x46>
    2a94:	b2 c1       	rjmp	.+868    	; 0x2dfa <vfprintf+0x3aa>
    2a96:	85 32       	cpi	r24, 0x25	; 37
    2a98:	39 f4       	brne	.+14     	; 0x2aa8 <vfprintf+0x58>
    2a9a:	23 fd       	sbrc	r18, 3
    2a9c:	85 91       	lpm	r24, Z+
    2a9e:	23 ff       	sbrs	r18, 3
    2aa0:	81 91       	ld	r24, Z+
    2aa2:	2f 01       	movw	r4, r30
    2aa4:	85 32       	cpi	r24, 0x25	; 37
    2aa6:	29 f4       	brne	.+10     	; 0x2ab2 <vfprintf+0x62>
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	b3 01       	movw	r22, r6
    2aac:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2ab0:	e7 cf       	rjmp	.-50     	; 0x2a80 <vfprintf+0x30>
    2ab2:	98 2f       	mov	r25, r24
    2ab4:	ff 24       	eor	r15, r15
    2ab6:	ee 24       	eor	r14, r14
    2ab8:	99 24       	eor	r9, r9
    2aba:	ff e1       	ldi	r31, 0x1F	; 31
    2abc:	ff 15       	cp	r31, r15
    2abe:	d0 f0       	brcs	.+52     	; 0x2af4 <vfprintf+0xa4>
    2ac0:	9b 32       	cpi	r25, 0x2B	; 43
    2ac2:	69 f0       	breq	.+26     	; 0x2ade <vfprintf+0x8e>
    2ac4:	9c 32       	cpi	r25, 0x2C	; 44
    2ac6:	28 f4       	brcc	.+10     	; 0x2ad2 <vfprintf+0x82>
    2ac8:	90 32       	cpi	r25, 0x20	; 32
    2aca:	59 f0       	breq	.+22     	; 0x2ae2 <vfprintf+0x92>
    2acc:	93 32       	cpi	r25, 0x23	; 35
    2ace:	91 f4       	brne	.+36     	; 0x2af4 <vfprintf+0xa4>
    2ad0:	0e c0       	rjmp	.+28     	; 0x2aee <vfprintf+0x9e>
    2ad2:	9d 32       	cpi	r25, 0x2D	; 45
    2ad4:	49 f0       	breq	.+18     	; 0x2ae8 <vfprintf+0x98>
    2ad6:	90 33       	cpi	r25, 0x30	; 48
    2ad8:	69 f4       	brne	.+26     	; 0x2af4 <vfprintf+0xa4>
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	24 c0       	rjmp	.+72     	; 0x2b26 <vfprintf+0xd6>
    2ade:	52 e0       	ldi	r21, 0x02	; 2
    2ae0:	f5 2a       	or	r15, r21
    2ae2:	84 e0       	ldi	r24, 0x04	; 4
    2ae4:	f8 2a       	or	r15, r24
    2ae6:	28 c0       	rjmp	.+80     	; 0x2b38 <vfprintf+0xe8>
    2ae8:	98 e0       	ldi	r25, 0x08	; 8
    2aea:	f9 2a       	or	r15, r25
    2aec:	25 c0       	rjmp	.+74     	; 0x2b38 <vfprintf+0xe8>
    2aee:	e0 e1       	ldi	r30, 0x10	; 16
    2af0:	fe 2a       	or	r15, r30
    2af2:	22 c0       	rjmp	.+68     	; 0x2b38 <vfprintf+0xe8>
    2af4:	f7 fc       	sbrc	r15, 7
    2af6:	29 c0       	rjmp	.+82     	; 0x2b4a <vfprintf+0xfa>
    2af8:	89 2f       	mov	r24, r25
    2afa:	80 53       	subi	r24, 0x30	; 48
    2afc:	8a 30       	cpi	r24, 0x0A	; 10
    2afe:	70 f4       	brcc	.+28     	; 0x2b1c <vfprintf+0xcc>
    2b00:	f6 fe       	sbrs	r15, 6
    2b02:	05 c0       	rjmp	.+10     	; 0x2b0e <vfprintf+0xbe>
    2b04:	98 9c       	mul	r9, r8
    2b06:	90 2c       	mov	r9, r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	98 0e       	add	r9, r24
    2b0c:	15 c0       	rjmp	.+42     	; 0x2b38 <vfprintf+0xe8>
    2b0e:	e8 9c       	mul	r14, r8
    2b10:	e0 2c       	mov	r14, r0
    2b12:	11 24       	eor	r1, r1
    2b14:	e8 0e       	add	r14, r24
    2b16:	f0 e2       	ldi	r31, 0x20	; 32
    2b18:	ff 2a       	or	r15, r31
    2b1a:	0e c0       	rjmp	.+28     	; 0x2b38 <vfprintf+0xe8>
    2b1c:	9e 32       	cpi	r25, 0x2E	; 46
    2b1e:	29 f4       	brne	.+10     	; 0x2b2a <vfprintf+0xda>
    2b20:	f6 fc       	sbrc	r15, 6
    2b22:	6b c1       	rjmp	.+726    	; 0x2dfa <vfprintf+0x3aa>
    2b24:	40 e4       	ldi	r20, 0x40	; 64
    2b26:	f4 2a       	or	r15, r20
    2b28:	07 c0       	rjmp	.+14     	; 0x2b38 <vfprintf+0xe8>
    2b2a:	9c 36       	cpi	r25, 0x6C	; 108
    2b2c:	19 f4       	brne	.+6      	; 0x2b34 <vfprintf+0xe4>
    2b2e:	50 e8       	ldi	r21, 0x80	; 128
    2b30:	f5 2a       	or	r15, r21
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <vfprintf+0xe8>
    2b34:	98 36       	cpi	r25, 0x68	; 104
    2b36:	49 f4       	brne	.+18     	; 0x2b4a <vfprintf+0xfa>
    2b38:	f2 01       	movw	r30, r4
    2b3a:	23 fd       	sbrc	r18, 3
    2b3c:	95 91       	lpm	r25, Z+
    2b3e:	23 ff       	sbrs	r18, 3
    2b40:	91 91       	ld	r25, Z+
    2b42:	2f 01       	movw	r4, r30
    2b44:	99 23       	and	r25, r25
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <vfprintf+0xfa>
    2b48:	b8 cf       	rjmp	.-144    	; 0x2aba <vfprintf+0x6a>
    2b4a:	89 2f       	mov	r24, r25
    2b4c:	85 54       	subi	r24, 0x45	; 69
    2b4e:	83 30       	cpi	r24, 0x03	; 3
    2b50:	18 f0       	brcs	.+6      	; 0x2b58 <vfprintf+0x108>
    2b52:	80 52       	subi	r24, 0x20	; 32
    2b54:	83 30       	cpi	r24, 0x03	; 3
    2b56:	38 f4       	brcc	.+14     	; 0x2b66 <vfprintf+0x116>
    2b58:	44 e0       	ldi	r20, 0x04	; 4
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	a4 0e       	add	r10, r20
    2b5e:	b5 1e       	adc	r11, r21
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	59 83       	std	Y+1, r21	; 0x01
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <vfprintf+0x134>
    2b66:	93 36       	cpi	r25, 0x63	; 99
    2b68:	31 f0       	breq	.+12     	; 0x2b76 <vfprintf+0x126>
    2b6a:	93 37       	cpi	r25, 0x73	; 115
    2b6c:	79 f0       	breq	.+30     	; 0x2b8c <vfprintf+0x13c>
    2b6e:	93 35       	cpi	r25, 0x53	; 83
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <vfprintf+0x124>
    2b72:	56 c0       	rjmp	.+172    	; 0x2c20 <vfprintf+0x1d0>
    2b74:	20 c0       	rjmp	.+64     	; 0x2bb6 <vfprintf+0x166>
    2b76:	f5 01       	movw	r30, r10
    2b78:	80 81       	ld	r24, Z
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	42 e0       	ldi	r20, 0x02	; 2
    2b7e:	50 e0       	ldi	r21, 0x00	; 0
    2b80:	a4 0e       	add	r10, r20
    2b82:	b5 1e       	adc	r11, r21
    2b84:	61 01       	movw	r12, r2
    2b86:	01 e0       	ldi	r16, 0x01	; 1
    2b88:	10 e0       	ldi	r17, 0x00	; 0
    2b8a:	12 c0       	rjmp	.+36     	; 0x2bb0 <vfprintf+0x160>
    2b8c:	f5 01       	movw	r30, r10
    2b8e:	c0 80       	ld	r12, Z
    2b90:	d1 80       	ldd	r13, Z+1	; 0x01
    2b92:	f6 fc       	sbrc	r15, 6
    2b94:	03 c0       	rjmp	.+6      	; 0x2b9c <vfprintf+0x14c>
    2b96:	6f ef       	ldi	r22, 0xFF	; 255
    2b98:	7f ef       	ldi	r23, 0xFF	; 255
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <vfprintf+0x150>
    2b9c:	69 2d       	mov	r22, r9
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	42 e0       	ldi	r20, 0x02	; 2
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	a4 0e       	add	r10, r20
    2ba6:	b5 1e       	adc	r11, r21
    2ba8:	c6 01       	movw	r24, r12
    2baa:	0e 94 10 17 	call	0x2e20	; 0x2e20 <strnlen>
    2bae:	8c 01       	movw	r16, r24
    2bb0:	5f e7       	ldi	r21, 0x7F	; 127
    2bb2:	f5 22       	and	r15, r21
    2bb4:	14 c0       	rjmp	.+40     	; 0x2bde <vfprintf+0x18e>
    2bb6:	f5 01       	movw	r30, r10
    2bb8:	c0 80       	ld	r12, Z
    2bba:	d1 80       	ldd	r13, Z+1	; 0x01
    2bbc:	f6 fc       	sbrc	r15, 6
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <vfprintf+0x176>
    2bc0:	6f ef       	ldi	r22, 0xFF	; 255
    2bc2:	7f ef       	ldi	r23, 0xFF	; 255
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <vfprintf+0x17a>
    2bc6:	69 2d       	mov	r22, r9
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	42 e0       	ldi	r20, 0x02	; 2
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	a4 0e       	add	r10, r20
    2bd0:	b5 1e       	adc	r11, r21
    2bd2:	c6 01       	movw	r24, r12
    2bd4:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <strnlen_P>
    2bd8:	8c 01       	movw	r16, r24
    2bda:	50 e8       	ldi	r21, 0x80	; 128
    2bdc:	f5 2a       	or	r15, r21
    2bde:	f3 fe       	sbrs	r15, 3
    2be0:	07 c0       	rjmp	.+14     	; 0x2bf0 <vfprintf+0x1a0>
    2be2:	1a c0       	rjmp	.+52     	; 0x2c18 <vfprintf+0x1c8>
    2be4:	80 e2       	ldi	r24, 0x20	; 32
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	b3 01       	movw	r22, r6
    2bea:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2bee:	ea 94       	dec	r14
    2bf0:	8e 2d       	mov	r24, r14
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	08 17       	cp	r16, r24
    2bf6:	19 07       	cpc	r17, r25
    2bf8:	a8 f3       	brcs	.-22     	; 0x2be4 <vfprintf+0x194>
    2bfa:	0e c0       	rjmp	.+28     	; 0x2c18 <vfprintf+0x1c8>
    2bfc:	f6 01       	movw	r30, r12
    2bfe:	f7 fc       	sbrc	r15, 7
    2c00:	85 91       	lpm	r24, Z+
    2c02:	f7 fe       	sbrs	r15, 7
    2c04:	81 91       	ld	r24, Z+
    2c06:	6f 01       	movw	r12, r30
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	b3 01       	movw	r22, r6
    2c0c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2c10:	e1 10       	cpse	r14, r1
    2c12:	ea 94       	dec	r14
    2c14:	01 50       	subi	r16, 0x01	; 1
    2c16:	10 40       	sbci	r17, 0x00	; 0
    2c18:	01 15       	cp	r16, r1
    2c1a:	11 05       	cpc	r17, r1
    2c1c:	79 f7       	brne	.-34     	; 0x2bfc <vfprintf+0x1ac>
    2c1e:	ea c0       	rjmp	.+468    	; 0x2df4 <vfprintf+0x3a4>
    2c20:	94 36       	cpi	r25, 0x64	; 100
    2c22:	11 f0       	breq	.+4      	; 0x2c28 <vfprintf+0x1d8>
    2c24:	99 36       	cpi	r25, 0x69	; 105
    2c26:	69 f5       	brne	.+90     	; 0x2c82 <vfprintf+0x232>
    2c28:	f7 fe       	sbrs	r15, 7
    2c2a:	08 c0       	rjmp	.+16     	; 0x2c3c <vfprintf+0x1ec>
    2c2c:	f5 01       	movw	r30, r10
    2c2e:	20 81       	ld	r18, Z
    2c30:	31 81       	ldd	r19, Z+1	; 0x01
    2c32:	42 81       	ldd	r20, Z+2	; 0x02
    2c34:	53 81       	ldd	r21, Z+3	; 0x03
    2c36:	84 e0       	ldi	r24, 0x04	; 4
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0a c0       	rjmp	.+20     	; 0x2c50 <vfprintf+0x200>
    2c3c:	f5 01       	movw	r30, r10
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	9c 01       	movw	r18, r24
    2c44:	44 27       	eor	r20, r20
    2c46:	37 fd       	sbrc	r19, 7
    2c48:	40 95       	com	r20
    2c4a:	54 2f       	mov	r21, r20
    2c4c:	82 e0       	ldi	r24, 0x02	; 2
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a8 0e       	add	r10, r24
    2c52:	b9 1e       	adc	r11, r25
    2c54:	9f e6       	ldi	r25, 0x6F	; 111
    2c56:	f9 22       	and	r15, r25
    2c58:	57 ff       	sbrs	r21, 7
    2c5a:	09 c0       	rjmp	.+18     	; 0x2c6e <vfprintf+0x21e>
    2c5c:	50 95       	com	r21
    2c5e:	40 95       	com	r20
    2c60:	30 95       	com	r19
    2c62:	21 95       	neg	r18
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	4f 4f       	sbci	r20, 0xFF	; 255
    2c68:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6a:	e0 e8       	ldi	r30, 0x80	; 128
    2c6c:	fe 2a       	or	r15, r30
    2c6e:	ca 01       	movw	r24, r20
    2c70:	b9 01       	movw	r22, r18
    2c72:	a1 01       	movw	r20, r2
    2c74:	2a e0       	ldi	r18, 0x0A	; 10
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__ultoa_invert>
    2c7c:	d8 2e       	mov	r13, r24
    2c7e:	d2 18       	sub	r13, r2
    2c80:	40 c0       	rjmp	.+128    	; 0x2d02 <vfprintf+0x2b2>
    2c82:	95 37       	cpi	r25, 0x75	; 117
    2c84:	29 f4       	brne	.+10     	; 0x2c90 <vfprintf+0x240>
    2c86:	1f 2d       	mov	r17, r15
    2c88:	1f 7e       	andi	r17, 0xEF	; 239
    2c8a:	2a e0       	ldi	r18, 0x0A	; 10
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	1d c0       	rjmp	.+58     	; 0x2cca <vfprintf+0x27a>
    2c90:	1f 2d       	mov	r17, r15
    2c92:	19 7f       	andi	r17, 0xF9	; 249
    2c94:	9f 36       	cpi	r25, 0x6F	; 111
    2c96:	61 f0       	breq	.+24     	; 0x2cb0 <vfprintf+0x260>
    2c98:	90 37       	cpi	r25, 0x70	; 112
    2c9a:	20 f4       	brcc	.+8      	; 0x2ca4 <vfprintf+0x254>
    2c9c:	98 35       	cpi	r25, 0x58	; 88
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <vfprintf+0x252>
    2ca0:	ac c0       	rjmp	.+344    	; 0x2dfa <vfprintf+0x3aa>
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <vfprintf+0x272>
    2ca4:	90 37       	cpi	r25, 0x70	; 112
    2ca6:	39 f0       	breq	.+14     	; 0x2cb6 <vfprintf+0x266>
    2ca8:	98 37       	cpi	r25, 0x78	; 120
    2caa:	09 f0       	breq	.+2      	; 0x2cae <vfprintf+0x25e>
    2cac:	a6 c0       	rjmp	.+332    	; 0x2dfa <vfprintf+0x3aa>
    2cae:	04 c0       	rjmp	.+8      	; 0x2cb8 <vfprintf+0x268>
    2cb0:	28 e0       	ldi	r18, 0x08	; 8
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	0a c0       	rjmp	.+20     	; 0x2cca <vfprintf+0x27a>
    2cb6:	10 61       	ori	r17, 0x10	; 16
    2cb8:	14 fd       	sbrc	r17, 4
    2cba:	14 60       	ori	r17, 0x04	; 4
    2cbc:	20 e1       	ldi	r18, 0x10	; 16
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	04 c0       	rjmp	.+8      	; 0x2cca <vfprintf+0x27a>
    2cc2:	14 fd       	sbrc	r17, 4
    2cc4:	16 60       	ori	r17, 0x06	; 6
    2cc6:	20 e1       	ldi	r18, 0x10	; 16
    2cc8:	32 e0       	ldi	r19, 0x02	; 2
    2cca:	17 ff       	sbrs	r17, 7
    2ccc:	08 c0       	rjmp	.+16     	; 0x2cde <vfprintf+0x28e>
    2cce:	f5 01       	movw	r30, r10
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	44 e0       	ldi	r20, 0x04	; 4
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	08 c0       	rjmp	.+16     	; 0x2cee <vfprintf+0x29e>
    2cde:	f5 01       	movw	r30, r10
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	42 e0       	ldi	r20, 0x02	; 2
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	a4 0e       	add	r10, r20
    2cf0:	b5 1e       	adc	r11, r21
    2cf2:	a1 01       	movw	r20, r2
    2cf4:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__ultoa_invert>
    2cf8:	d8 2e       	mov	r13, r24
    2cfa:	d2 18       	sub	r13, r2
    2cfc:	8f e7       	ldi	r24, 0x7F	; 127
    2cfe:	f8 2e       	mov	r15, r24
    2d00:	f1 22       	and	r15, r17
    2d02:	f6 fe       	sbrs	r15, 6
    2d04:	0b c0       	rjmp	.+22     	; 0x2d1c <vfprintf+0x2cc>
    2d06:	5e ef       	ldi	r21, 0xFE	; 254
    2d08:	f5 22       	and	r15, r21
    2d0a:	d9 14       	cp	r13, r9
    2d0c:	38 f4       	brcc	.+14     	; 0x2d1c <vfprintf+0x2cc>
    2d0e:	f4 fe       	sbrs	r15, 4
    2d10:	07 c0       	rjmp	.+14     	; 0x2d20 <vfprintf+0x2d0>
    2d12:	f2 fc       	sbrc	r15, 2
    2d14:	05 c0       	rjmp	.+10     	; 0x2d20 <vfprintf+0x2d0>
    2d16:	8f ee       	ldi	r24, 0xEF	; 239
    2d18:	f8 22       	and	r15, r24
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <vfprintf+0x2d0>
    2d1c:	1d 2d       	mov	r17, r13
    2d1e:	01 c0       	rjmp	.+2      	; 0x2d22 <vfprintf+0x2d2>
    2d20:	19 2d       	mov	r17, r9
    2d22:	f4 fe       	sbrs	r15, 4
    2d24:	0d c0       	rjmp	.+26     	; 0x2d40 <vfprintf+0x2f0>
    2d26:	fe 01       	movw	r30, r28
    2d28:	ed 0d       	add	r30, r13
    2d2a:	f1 1d       	adc	r31, r1
    2d2c:	80 81       	ld	r24, Z
    2d2e:	80 33       	cpi	r24, 0x30	; 48
    2d30:	19 f4       	brne	.+6      	; 0x2d38 <vfprintf+0x2e8>
    2d32:	99 ee       	ldi	r25, 0xE9	; 233
    2d34:	f9 22       	and	r15, r25
    2d36:	08 c0       	rjmp	.+16     	; 0x2d48 <vfprintf+0x2f8>
    2d38:	1f 5f       	subi	r17, 0xFF	; 255
    2d3a:	f2 fe       	sbrs	r15, 2
    2d3c:	05 c0       	rjmp	.+10     	; 0x2d48 <vfprintf+0x2f8>
    2d3e:	03 c0       	rjmp	.+6      	; 0x2d46 <vfprintf+0x2f6>
    2d40:	8f 2d       	mov	r24, r15
    2d42:	86 78       	andi	r24, 0x86	; 134
    2d44:	09 f0       	breq	.+2      	; 0x2d48 <vfprintf+0x2f8>
    2d46:	1f 5f       	subi	r17, 0xFF	; 255
    2d48:	0f 2d       	mov	r16, r15
    2d4a:	f3 fc       	sbrc	r15, 3
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <vfprintf+0x326>
    2d4e:	f0 fe       	sbrs	r15, 0
    2d50:	0f c0       	rjmp	.+30     	; 0x2d70 <vfprintf+0x320>
    2d52:	1e 15       	cp	r17, r14
    2d54:	10 f0       	brcs	.+4      	; 0x2d5a <vfprintf+0x30a>
    2d56:	9d 2c       	mov	r9, r13
    2d58:	0b c0       	rjmp	.+22     	; 0x2d70 <vfprintf+0x320>
    2d5a:	9d 2c       	mov	r9, r13
    2d5c:	9e 0c       	add	r9, r14
    2d5e:	91 1a       	sub	r9, r17
    2d60:	1e 2d       	mov	r17, r14
    2d62:	06 c0       	rjmp	.+12     	; 0x2d70 <vfprintf+0x320>
    2d64:	80 e2       	ldi	r24, 0x20	; 32
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	b3 01       	movw	r22, r6
    2d6a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2d6e:	1f 5f       	subi	r17, 0xFF	; 255
    2d70:	1e 15       	cp	r17, r14
    2d72:	c0 f3       	brcs	.-16     	; 0x2d64 <vfprintf+0x314>
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <vfprintf+0x32e>
    2d76:	1e 15       	cp	r17, r14
    2d78:	10 f4       	brcc	.+4      	; 0x2d7e <vfprintf+0x32e>
    2d7a:	e1 1a       	sub	r14, r17
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <vfprintf+0x330>
    2d7e:	ee 24       	eor	r14, r14
    2d80:	04 ff       	sbrs	r16, 4
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <vfprintf+0x352>
    2d84:	80 e3       	ldi	r24, 0x30	; 48
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	b3 01       	movw	r22, r6
    2d8a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2d8e:	02 ff       	sbrs	r16, 2
    2d90:	1d c0       	rjmp	.+58     	; 0x2dcc <vfprintf+0x37c>
    2d92:	01 fd       	sbrc	r16, 1
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <vfprintf+0x34c>
    2d96:	88 e7       	ldi	r24, 0x78	; 120
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e c0       	rjmp	.+28     	; 0x2db8 <vfprintf+0x368>
    2d9c:	88 e5       	ldi	r24, 0x58	; 88
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	0b c0       	rjmp	.+22     	; 0x2db8 <vfprintf+0x368>
    2da2:	80 2f       	mov	r24, r16
    2da4:	86 78       	andi	r24, 0x86	; 134
    2da6:	91 f0       	breq	.+36     	; 0x2dcc <vfprintf+0x37c>
    2da8:	01 ff       	sbrs	r16, 1
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <vfprintf+0x360>
    2dac:	8b e2       	ldi	r24, 0x2B	; 43
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <vfprintf+0x362>
    2db0:	80 e2       	ldi	r24, 0x20	; 32
    2db2:	f7 fc       	sbrc	r15, 7
    2db4:	8d e2       	ldi	r24, 0x2D	; 45
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	b3 01       	movw	r22, r6
    2dba:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2dbe:	06 c0       	rjmp	.+12     	; 0x2dcc <vfprintf+0x37c>
    2dc0:	80 e3       	ldi	r24, 0x30	; 48
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	b3 01       	movw	r22, r6
    2dc6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2dca:	9a 94       	dec	r9
    2dcc:	d9 14       	cp	r13, r9
    2dce:	c0 f3       	brcs	.-16     	; 0x2dc0 <vfprintf+0x370>
    2dd0:	da 94       	dec	r13
    2dd2:	f1 01       	movw	r30, r2
    2dd4:	ed 0d       	add	r30, r13
    2dd6:	f1 1d       	adc	r31, r1
    2dd8:	80 81       	ld	r24, Z
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	b3 01       	movw	r22, r6
    2dde:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2de2:	dd 20       	and	r13, r13
    2de4:	a9 f7       	brne	.-22     	; 0x2dd0 <vfprintf+0x380>
    2de6:	06 c0       	rjmp	.+12     	; 0x2df4 <vfprintf+0x3a4>
    2de8:	80 e2       	ldi	r24, 0x20	; 32
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	b3 01       	movw	r22, r6
    2dee:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fputc>
    2df2:	ea 94       	dec	r14
    2df4:	ee 20       	and	r14, r14
    2df6:	c1 f7       	brne	.-16     	; 0x2de8 <vfprintf+0x398>
    2df8:	43 ce       	rjmp	.-890    	; 0x2a80 <vfprintf+0x30>
    2dfa:	f3 01       	movw	r30, r6
    2dfc:	66 81       	ldd	r22, Z+6	; 0x06
    2dfe:	77 81       	ldd	r23, Z+7	; 0x07
    2e00:	cb 01       	movw	r24, r22
    2e02:	2b 96       	adiw	r28, 0x0b	; 11
    2e04:	e2 e1       	ldi	r30, 0x12	; 18
    2e06:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__>

00002e0a <strnlen_P>:
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	05 90       	lpm	r0, Z+
    2e0e:	61 50       	subi	r22, 0x01	; 1
    2e10:	70 40       	sbci	r23, 0x00	; 0
    2e12:	01 10       	cpse	r0, r1
    2e14:	d8 f7       	brcc	.-10     	; 0x2e0c <strnlen_P+0x2>
    2e16:	80 95       	com	r24
    2e18:	90 95       	com	r25
    2e1a:	8e 0f       	add	r24, r30
    2e1c:	9f 1f       	adc	r25, r31
    2e1e:	08 95       	ret

00002e20 <strnlen>:
    2e20:	fc 01       	movw	r30, r24
    2e22:	61 50       	subi	r22, 0x01	; 1
    2e24:	70 40       	sbci	r23, 0x00	; 0
    2e26:	01 90       	ld	r0, Z+
    2e28:	01 10       	cpse	r0, r1
    2e2a:	d8 f7       	brcc	.-10     	; 0x2e22 <strnlen+0x2>
    2e2c:	80 95       	com	r24
    2e2e:	90 95       	com	r25
    2e30:	8e 0f       	add	r24, r30
    2e32:	9f 1f       	adc	r25, r31
    2e34:	08 95       	ret

00002e36 <fputc>:
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	8c 01       	movw	r16, r24
    2e40:	eb 01       	movw	r28, r22
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	81 ff       	sbrs	r24, 1
    2e46:	1b c0       	rjmp	.+54     	; 0x2e7e <fputc+0x48>
    2e48:	82 ff       	sbrs	r24, 2
    2e4a:	0d c0       	rjmp	.+26     	; 0x2e66 <fputc+0x30>
    2e4c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e4e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e50:	8c 81       	ldd	r24, Y+4	; 0x04
    2e52:	9d 81       	ldd	r25, Y+5	; 0x05
    2e54:	28 17       	cp	r18, r24
    2e56:	39 07       	cpc	r19, r25
    2e58:	64 f4       	brge	.+24     	; 0x2e72 <fputc+0x3c>
    2e5a:	e8 81       	ld	r30, Y
    2e5c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e5e:	01 93       	st	Z+, r16
    2e60:	f9 83       	std	Y+1, r31	; 0x01
    2e62:	e8 83       	st	Y, r30
    2e64:	06 c0       	rjmp	.+12     	; 0x2e72 <fputc+0x3c>
    2e66:	e8 85       	ldd	r30, Y+8	; 0x08
    2e68:	f9 85       	ldd	r31, Y+9	; 0x09
    2e6a:	80 2f       	mov	r24, r16
    2e6c:	09 95       	icall
    2e6e:	89 2b       	or	r24, r25
    2e70:	31 f4       	brne	.+12     	; 0x2e7e <fputc+0x48>
    2e72:	8e 81       	ldd	r24, Y+6	; 0x06
    2e74:	9f 81       	ldd	r25, Y+7	; 0x07
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	9f 83       	std	Y+7, r25	; 0x07
    2e7a:	8e 83       	std	Y+6, r24	; 0x06
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <fputc+0x4c>
    2e7e:	0f ef       	ldi	r16, 0xFF	; 255
    2e80:	1f ef       	ldi	r17, 0xFF	; 255
    2e82:	c8 01       	movw	r24, r16
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	08 95       	ret

00002e8e <__ultoa_invert>:
    2e8e:	fa 01       	movw	r30, r20
    2e90:	aa 27       	eor	r26, r26
    2e92:	28 30       	cpi	r18, 0x08	; 8
    2e94:	51 f1       	breq	.+84     	; 0x2eea <__ultoa_invert+0x5c>
    2e96:	20 31       	cpi	r18, 0x10	; 16
    2e98:	81 f1       	breq	.+96     	; 0x2efa <__ultoa_invert+0x6c>
    2e9a:	e8 94       	clt
    2e9c:	6f 93       	push	r22
    2e9e:	6e 7f       	andi	r22, 0xFE	; 254
    2ea0:	6e 5f       	subi	r22, 0xFE	; 254
    2ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea8:	af 4f       	sbci	r26, 0xFF	; 255
    2eaa:	b1 e0       	ldi	r27, 0x01	; 1
    2eac:	3e d0       	rcall	.+124    	; 0x2f2a <__ultoa_invert+0x9c>
    2eae:	b4 e0       	ldi	r27, 0x04	; 4
    2eb0:	3c d0       	rcall	.+120    	; 0x2f2a <__ultoa_invert+0x9c>
    2eb2:	67 0f       	add	r22, r23
    2eb4:	78 1f       	adc	r23, r24
    2eb6:	89 1f       	adc	r24, r25
    2eb8:	9a 1f       	adc	r25, r26
    2eba:	a1 1d       	adc	r26, r1
    2ebc:	68 0f       	add	r22, r24
    2ebe:	79 1f       	adc	r23, r25
    2ec0:	8a 1f       	adc	r24, r26
    2ec2:	91 1d       	adc	r25, r1
    2ec4:	a1 1d       	adc	r26, r1
    2ec6:	6a 0f       	add	r22, r26
    2ec8:	71 1d       	adc	r23, r1
    2eca:	81 1d       	adc	r24, r1
    2ecc:	91 1d       	adc	r25, r1
    2ece:	a1 1d       	adc	r26, r1
    2ed0:	20 d0       	rcall	.+64     	; 0x2f12 <__ultoa_invert+0x84>
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <__ultoa_invert+0x48>
    2ed4:	68 94       	set
    2ed6:	3f 91       	pop	r19
    2ed8:	2a e0       	ldi	r18, 0x0A	; 10
    2eda:	26 9f       	mul	r18, r22
    2edc:	11 24       	eor	r1, r1
    2ede:	30 19       	sub	r19, r0
    2ee0:	30 5d       	subi	r19, 0xD0	; 208
    2ee2:	31 93       	st	Z+, r19
    2ee4:	de f6       	brtc	.-74     	; 0x2e9c <__ultoa_invert+0xe>
    2ee6:	cf 01       	movw	r24, r30
    2ee8:	08 95       	ret
    2eea:	46 2f       	mov	r20, r22
    2eec:	47 70       	andi	r20, 0x07	; 7
    2eee:	40 5d       	subi	r20, 0xD0	; 208
    2ef0:	41 93       	st	Z+, r20
    2ef2:	b3 e0       	ldi	r27, 0x03	; 3
    2ef4:	0f d0       	rcall	.+30     	; 0x2f14 <__ultoa_invert+0x86>
    2ef6:	c9 f7       	brne	.-14     	; 0x2eea <__ultoa_invert+0x5c>
    2ef8:	f6 cf       	rjmp	.-20     	; 0x2ee6 <__ultoa_invert+0x58>
    2efa:	46 2f       	mov	r20, r22
    2efc:	4f 70       	andi	r20, 0x0F	; 15
    2efe:	40 5d       	subi	r20, 0xD0	; 208
    2f00:	4a 33       	cpi	r20, 0x3A	; 58
    2f02:	18 f0       	brcs	.+6      	; 0x2f0a <__ultoa_invert+0x7c>
    2f04:	49 5d       	subi	r20, 0xD9	; 217
    2f06:	31 fd       	sbrc	r19, 1
    2f08:	40 52       	subi	r20, 0x20	; 32
    2f0a:	41 93       	st	Z+, r20
    2f0c:	02 d0       	rcall	.+4      	; 0x2f12 <__ultoa_invert+0x84>
    2f0e:	a9 f7       	brne	.-22     	; 0x2efa <__ultoa_invert+0x6c>
    2f10:	ea cf       	rjmp	.-44     	; 0x2ee6 <__ultoa_invert+0x58>
    2f12:	b4 e0       	ldi	r27, 0x04	; 4
    2f14:	a6 95       	lsr	r26
    2f16:	97 95       	ror	r25
    2f18:	87 95       	ror	r24
    2f1a:	77 95       	ror	r23
    2f1c:	67 95       	ror	r22
    2f1e:	ba 95       	dec	r27
    2f20:	c9 f7       	brne	.-14     	; 0x2f14 <__ultoa_invert+0x86>
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	61 05       	cpc	r22, r1
    2f26:	71 05       	cpc	r23, r1
    2f28:	08 95       	ret
    2f2a:	9b 01       	movw	r18, r22
    2f2c:	ac 01       	movw	r20, r24
    2f2e:	0a 2e       	mov	r0, r26
    2f30:	06 94       	lsr	r0
    2f32:	57 95       	ror	r21
    2f34:	47 95       	ror	r20
    2f36:	37 95       	ror	r19
    2f38:	27 95       	ror	r18
    2f3a:	ba 95       	dec	r27
    2f3c:	c9 f7       	brne	.-14     	; 0x2f30 <__ultoa_invert+0xa2>
    2f3e:	62 0f       	add	r22, r18
    2f40:	73 1f       	adc	r23, r19
    2f42:	84 1f       	adc	r24, r20
    2f44:	95 1f       	adc	r25, r21
    2f46:	a0 1d       	adc	r26, r0
    2f48:	08 95       	ret

00002f4a <_exit>:
    2f4a:	f8 94       	cli

00002f4c <__stop_program>:
    2f4c:	ff cf       	rjmp	.-2      	; 0x2f4c <__stop_program>
